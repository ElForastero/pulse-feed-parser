<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:admin="http://webns.net/mvcb/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>
			<![CDATA[A List Apart: The Full Feed]]>		</title>

		<link>
			https://alistapart.com		</link>

		<description>Articles for people who make web sites.</description>

		<dc:language>
			en-US		</dc:language>

		<dc:creator>The fine folks at A List Apart</dc:creator>

		<dc:rights>Copyright 2020</dc:rights>

		<dc:date>
			2020-04-24T09:30:01+00:00		</dc:date>

		
			<item>
				<title>
					<![CDATA[Usability Testing for Voice Content]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/preston-so/">Preston So</a>					</author>

				<link>
					https://alistapart.com/article/usability-testing-for-voice-content/				</link>

				<guid>
					https://alistapart.com/article/usability-testing-for-voice-content/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>It’s an important time to be in voice design. Many of us are turning to voice assistants in these times, whether for comfort, recreation, or staying informed. As the interest in interfaces driven by voice continues to reach new heights around the world, so too will users’ expectations and the best practices that guide their design.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Voice interfaces (also known as voice user interfaces or VUIs) have been reinventing how we approach, evaluate, and interact with user interfaces. The impact of conscious efforts to reduce close contact between people will continue to increase users’ <a href="https://alistapart.com/article/do-androids-dream-in-free-verse/">expectations for the availability of a voice component</a> on all devices, whether that entails a microphone icon indicating voice-enabled search or a full-fledged voice assistant waiting patiently in the wings for an invocation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But voice interfaces present inherent challenges and surprises. In this relatively new realm of design, the intrinsic twists and turns in spoken language can make things difficult for even the most carefully considered voice interfaces. After all, spoken language is littered with <em>fillers</em> (in the <a href="https://en.wikipedia.org/wiki/Filler_(linguistics)">linguistic sense of utterances like <em>hmm</em> and <em>um</em></a>), hesitations and pauses, and other interruptions and speech disfluencies that present puzzling problems for designers and implementers alike.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you’ve built a voice interface that introduces information or permits transactions in a rich way for spoken language users, the easy part is done. Nonetheless, voice interfaces also surface unique challenges when it comes to usability testing and robust evaluation of your end result. But there are advantages, too, especially when it comes to accessibility and cross-channel content strategy. The fact that voice-driven content lies on the opposite extreme of the spectrum from the traditional website confers it an additional benefit: it’s an effective way to analyze and stress-test just how channel-agnostic your content truly is.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The quandary of voice usability</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Several years ago, I led a talented team at <a href="https://www.acquia.com/resources/acquia-labs">Acquia Labs</a> to design and build a voice interface for <a href="https://digitalservices.georgia.gov/">Digital Services Georgia</a> called <a href="https://www.acquia.com/blog/ask-georgiagov-alexa-skill-citizens-georgia-acquia-labs/12/10/2017/3312516">Ask GeorgiaGov</a>, which allowed citizens of the state of Georgia to access content about key civic tasks, like registering to vote, renewing a driver’s license, and filing complaints against businesses. Based on copy drawn directly from the frequently asked questions section of the <a href="https://georgia.gov/">Georgia.gov website</a>, it was the first Amazon Alexa interface integrated with the <a href="https://www.drupal.com">Drupal</a> content management system ever built for public consumption. Built by my former colleague <a href="https://www.drupal.org/u/hampercm">Chris Hamper</a>, it also offered a host of impressive features, like allowing users to request the phone number of individual government agencies for each query on a topic.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Designing and building web experiences for the public sector is a uniquely challenging endeavor due to requirements surrounding accessibility and frequent budgetary challenges. Out of necessity, governments need to be exacting and methodical not only in how they engage their citizens and spend money on projects but also how they incorporate new technologies into the mix. For most government entities, voice is a completely different world, with many potential pitfalls.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the outset of the project, the <a href="https://digitalservices.georgia.gov/our-team">Digital Services Georgia team</a>, led by <a href="https://twitter.com/nikofthehill/">Nikhil Deshpande</a>, expressed their most important need: a single content model across all their content irrespective of delivery channel, as they only had resources to maintain a single rendition of each content item. Despite this editorial challenge, Georgia saw Alexa as an exciting opportunity to open new doors to accessible solutions for citizens with disabilities. And finally, because there were relatively few examples of voice usability testing at the time, we knew we would have to learn on the fly and experiment to find the right solution.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Eventually, we discovered that all the traditional approaches to usability testing that we’d executed for other projects were ill-suited to the unique problems of <em>voice usability</em>. And this was only the beginning of our problems.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How voice interfaces improve accessibility outcomes</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Any discussion of voice usability must consider some of the most experienced voice interface users: people who use assistive devices. After all, accessibility has long been a bastion of web experiences, but it has only recently become <a href="https://hbr.org/2019/05/using-voice-interfaces-to-make-products-more-inclusive">a focus of those implementing voice interfaces</a>. In a world where refreshable Braille displays and screen readers prize the rendering of web-based content into synthesized speech above all, the voice interface seems like an anomaly. But in fact, the <a href="https://upsidelab.io/blog/alexa-for-accessibility/">exciting potential of Amazon Alexa</a> for disabled citizens represented one of the primary motivations for Georgia’s interest in making their content available through a voice assistant.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://uxdesign.cc/tips-for-accessibility-in-conversational-interfaces-8e11c58b31f6">Questions surrounding accessibility with voice</a> have surfaced in recent years due to the perceived user experience benefits that voice interfaces can offer over more established assistive devices. Because screen readers make no exceptions when they recite the contents of a page, they can occasionally present superfluous information and force the user to wait longer than they’re willing. In addition, with an effective content schema, it can often be the case that voice interfaces facilitate pointed interactions with content at a more granular level than the page itself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Though it can be difficult to convince even the most forward-looking clients of accessibility’s value, Georgia has been not only a trailblazer but also a committed proponent of content accessibility beyond the web. The state was among the first jurisdictions to offer a text-to-speech (TTS) phone hotline that read web pages aloud. After all, state governments must serve <em>all</em> citizens equally—no ifs, ands, or buts. And while these are still early days, I can see voice assistants becoming new conduits, and perhaps more efficient channels, by which disabled users can access the content they need.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Managing content destined for discrete channels</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Whereas voice can improve accessibility of content, it’s seldom the case that web and voice are the only channels through which we must expose information. For this reason, one piece of advice I often give to content strategists and architects at organizations interested in pursuing voice-driven content is to <a href="https://alistapart.com/article/conversations-with-robots/">never think of voice content in isolation</a>. Siloing it is the same misguided approach that has led to mobile applications and other discrete experiences delivering orphaned or outdated content to a user expecting that all content on the website should be up-to-date and accessible through other channels as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After all, we’ve trained ourselves for many years to think of content in the web-only context rather than across channels. Our closely held assumptions about links, file downloads, images, and other web-based marginalia and miscellany are all aspects of web content that translate poorly to the conversational context—and particularly the voice context. Increasingly, we all need to concern ourselves with an <a href="https://preston.so/writing/building-usable-conversations-the-story-of-ask-georgiagov"><em>omnichannel content strategy</em></a> that straddles all those channels in existence today and others that will doubtlessly surface over the horizon.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the advantages of structured content in Drupal 7, Georgia.gov already had a content model amenable to interlocution in the form of <em>frequently asked questions</em> (FAQs). While <a href="https://alistapart.com/article/the-faq-as-advice-column/">question-and-answer formats are convenient for voice assistants</a> because queries for content tend to come in the form of questions, the returned responses likewise need to be as voice-optimized as possible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For Georgia.gov, the need to preserve a single rendition of all content across all channels led us to perform a <a href="https://preston.so/writing/building-usable-conversations-the-story-of-ask-georgiagov"><em>conversational content audit</em></a>, in which we read aloud all of the FAQ pages, putting ourselves in the shoes of a voice user, and identified key differences between how a user would interpret the written form and how they would parse the spoken form of that same content. After some discussion with the editorial team at Georgia, we opted to limit calls to action (e.g., “Read more”), links lacking clear context in surrounding text, and other situations confusing to voice users who cannot visualize the content they are listening to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s a table containing examples of how we converted certain text on FAQ pages to counterparts more appropriate for voice. Reading each sentence aloud, one by one, helped us identify cases where users might scratch their heads and say “Huh?” in a voice context.</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure>
<table>
<thead>
<tr>
<th scope="col">Before</th>
<th scope="col">After</th>
</tr>
</thead>
<tbody>
<tr>
<td data-title="Before">Learn how to <u>change your name on your Social Security card</u>.</td>
<td data-title="After">The Social Security Administration can help you <u>change your name on your Social Security card</u>.</td>
</tr>
<tr>
<td data-title="Before">You can receive payments through either a debit card or direct deposit. <u>Learn more about payments.</u></td>
<td data-title="After">You can <u>receive payments</u> through either a debit card or direct deposit.</td>
</tr>
<tr>
<td data-title="Before"><u>Read more about this.</u></td>
<td data-title="After">In Georgia, the <u>Family Support Registry</u> typically pulls payments directly from your paycheck. However, you can send your own payments online through your bank account, your credit card, or Western Union. You may also send your payments by mail to the address provided in your court order.</td>
</tr>
</tbody>
</table>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>In areas like content strategy and content governance, content audits have long been key to understanding the full picture of your content, but it doesn’t end there. Successful content audits can run the gamut from automated checks for orphaned content or overly wordy articles to more qualitative analyses of how content adheres to a specific brand voice or certain design standards. For a content strategy truly prepared for <a href="https://preston.so/writing/the-channel-explosion-off-screens-and-out-the-window">channels both here and still to come</a>, a holistic understanding of how users will interact with your content in a variety of situations is a baseline requirement today.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Other conversational interfaces have it easier</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Spoken language is inherently hard. Even the most gifted orators can have trouble with it. It’s littered with mistakes, starts and stops, interruptions, hesitations, and a vertiginous range of other uniquely human transgressions. The written word, because it’s committed instantly to a mostly permanent record, is tame, staid, and carefully considered in comparison.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When we talk about conversational interfaces, we need to draw a clear distinction between the range of user experiences that traffic in <em>written language</em> rather than <em>spoken language</em>. As we know from <a href="https://alistapart.com/article/conversational-design/#section3">the relative solidity of written language and literature</a> versus the comparative transience of spoken language and oral traditions, in many ways the two couldn’t be more different from one another. The implications for designers are significant because spoken language, from the user’s perspective, lacks a graphical equivalent to which those scratching their head can readily refer. We’re dealing with the spoken word and <a href="https://preston.so/writing/affordance-and-wayfinding-in-voice-interface-design"><em>aural</em> affordances</a>, not pixels, written help text, or visual affordances.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Why written conversational interfaces are easier to evaluate</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One of the privileges that chatbots and textbots enjoy over voice interfaces is the fact that by design, they can’t hide the previous steps users have taken. Any conversational interface user working in the written medium has access to their previous history of interactions, which can stretch back days, weeks, or months: the so-called <em>backscroll</em>. A flight passenger communicating with an airline through Facebook Messenger, for example, knows that they can merely scroll up in the chat history to confirm that they’ve already provided the company with their e-ticket number or frequent flyer account information.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This has outsize implications for information architecture and <a href="https://preston.so/writing/affordance-and-wayfinding-in-voice-interface-design">conversational <em>wayfinding</em></a>. Since chatbot users can consult their own written record, it’s much harder for things to go completely awry when they make a move they didn’t intend. Recollection is much more difficult when you have to remember what you said a few minutes ago off the top of your head rather than scrolling up to the information you provided a few hours or weeks ago. An effective chatbot interface may, for example, enable a user to jump back to a much earlier, specific place in a conversation’s history.An effective chatbot interface may, for example, enable a user to jump back to a much earlier, specific place in a conversation’s history. Voice interfaces that live perpetually in the moment have no such luxury.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Eye tracking only works for visual components</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In many cases, those who work with chatbots and messaging bots (especially those leveraging text messages or other messaging services like Facebook Messenger, Slack, or WhatsApp) have the unique privilege of benefiting from a <em>visual</em> component. Some conversational interfaces now insert other elements into the conversational flow between a machine and a person, such as <a href="https://tripetto.com/blog/why-conversational-forms-still-matter/">embedded conversational forms</a> (like <a href="https://space10-community.github.io/conversational-form/landingpage/">SPACE10’s Conversational Form</a>) that allow users to enter rich input or select from a range of possible responses.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The success of eye tracking in more traditional usability testing scenarios highlights its appropriateness for visual interfaces such as websites, mobile applications, and others. However, from the standpoint of evaluating voice interfaces that are entirely aural, eye tracking serves only the limited (but still interesting from a research perspective) purpose of assessing where the test subject is looking while speaking with an invisible interlocutor—not whether they are able to use the interface successfully. Indeed, eye tracking is only a viable option for voice interfaces that have some visual component, like the Amazon Echo Show.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Think-aloud and concurrent probing interrupt the conversational flow</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A well-worn approach for usability testing is <em>think-aloud</em>, which allows for users working with interfaces to present their frequently qualitative impressions of interfaces verbally while interacting with the user experience in question. Paired with eye tracking, think-aloud adds considerable dimension to a usability test for visual interfaces such as websites and web applications, as well as other visually or physically oriented devices.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another is <em>concurrent probing</em> (CP). Probing involves the use of questions to gather insights about the interface from users, and <a href="https://www.usability.gov/how-to-and-tools/methods/running-usability-tests.html">Usability.gov describes two types</a>: <em>concurrent</em>, in which the researcher asks questions during interactions, and <em>retrospective</em>, in which questions only come once the interaction is complete.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Conversational interfaces that utilize written language rather than spoken language can still be well-suited to think-aloud and concurrent probing approaches, especially for the components in the interface that require manual input, like conversational forms and other traditional UI elements interspersed throughout the conversation itself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But for voice interfaces, think-aloud and concurrent probing are highly questionable approaches and can catalyze a variety of unintended consequences, including accidental invocations of trigger words (such as Alexa mishearing “selected” as “Alexa”) and introduction of bad data (such as speech transcription registering both the voice interface and test subject). After all, in a hypothetical think-aloud or CP test of a voice interface, the user would be responsible for conversing with the chatbot while simultaneously offering up their impressions to the evaluator overseeing the test.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Voice usability tests with retrospective probing</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>Retrospective probing</em> (RP), a lesser-known approach for usability testing, is seldom seen in web usability testing due to its chief weakness: the fact that we have awful memories and rarely remember what occurred mere moments earlier with anything that approaches total accuracy. (This might explain why the backscroll has joined the pantheon of rigid recordkeeping currently occupied by cuneiform, the printing press, and other means of concretizing information.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For users of voice assistants lacking scrollable chat histories, retrospective probing introduces the potential for subjects to include false recollections in their assessments or to misinterpret the conclusion of their conversations. That said, retrospective probing permits the participant to take some time to form their impressions of an interface rather than dole out incremental tidbits in a stream of consciousness, as would more likely occur in concurrent probing.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What makes voice usability tests unique</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Voice usability tests have several unique characteristics that distinguish them from web usability tests or other conversational usability tests, but some of the same principles unify both visual interfaces and their aural counterparts. As always, “test early, test often” is a mantra that applies here, as the earlier you can begin testing, the more robust your results will be. Having an individual to administer a test and another to transcribe results or watch for signs of trouble is also an effective best practice in settings beyond just voice usability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Interference from poor soundproofing or external disruptions can derail a voice usability test even before it begins. Many large organizations will have soundproof rooms or recording studios available for voice usability researchers. For the vast majority of others, a mostly silent room will suffice, though absolute silence is optimal. In addition, many subjects, even those well-versed in web usability tests, may be unaccustomed to voice usability tests in which long periods of silence are the norm to establish a baseline for data.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How we used retrospective probing to test Ask GeorgiaGov</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For Ask GeorgiaGov, we used the retrospective probing approach almost exclusively to gather a range of insights about how our users were interacting with voice-driven content. We endeavored to evaluate interactions with the interface early and diachronically. In the process, we asked each of our subjects to complete two distinct tasks that would require them to traverse the entirety of the interface by asking questions (conducting a search), drilling down into further questions, and requesting the phone number for a related agency. Though this would be a significant ask of any user working with a visual interface, the unidirectional focus of voice interface flows, by contrast, reduced the likelihood of lengthy accidental detours.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here are a couple of example scenarios:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="quote">
<blockquote>
<p>You have a business license in Georgia, but you’re not sure if you have to register on an annual basis. Talk with Alexa to find out the information you need. At the end, ask for a phone number for more information.</p>
<p>You’ve just moved to Georgia and you know you need to transfer your driver’s license, but you’re not sure what to do. Talk with Alexa to find out the information you need. At the end, ask for a phone number for more information.</p>
</blockquote>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>We also peppered users with questions after the test concluded to learn about their impressions through retrospective probing:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>“On a scale of 1–5, based on the scenario, was the information you received helpful? Why or why not?”</li><li>“On a scale of 1–5, based on the scenario, was the content presented clear and easy to follow? Why or why not?”</li><li>“What’s the answer to the question that you were tasked with asking?”</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Because state governments also routinely deal with citizen questions having to do with potentially traumatic issues such as divorce and sexual harassment, we also offered the choice for participants to opt out of certain categories of tasks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While this testing procedure yielded compelling results that indicated our voice interface was performing at the level it needed to despite its experimental nature, we also ran into considerable challenges during the usability testing process. Restoring Amazon Alexa to its initial state and troubleshooting issues on the fly proved difficult during the initial stages of the implementation, when bugs were still common.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the end, we found that many of the same lessons that apply to more storied examples of usability testing were also relevant to Ask GeorgiaGov: the importance of testing early and testing often, the need for faithful yet efficient transcription, and the surprising staying power of bugs when integrating disparate technologies. Despite Ask GeorgiaGov’s many similarities to other interface implementations in terms of technical debt and the role of usability testing, we were overjoyed to hear from real Georgians whose engagement with their state government could not be more different from before.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Many of us may be building interfaces for voice content to experiment with newfangled channels, or to build for disabled people and people newer to the web. Now, they are necessities for many others, especially as social distancing practices continue to take hold worldwide. Nonetheless, it’s crucial to keep in mind that voice should be only one component of a channel-agnostic strategy equipped for content ripped away from its usual contexts. Building usable voice-driven content experiences can teach us a great deal about how we should envisage our milieu of content and its future in the first place.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Gone are the days when we could write a page in HTML and call it a day; content now needs to be rendered through synthesized speech, augmented reality overlays, digital signage, and other environments where users will never even touch a personal computer. By focusing on structured content first and foremost with an eye toward moving past our web-based biases in developing our content for voice and others, we can better ensure the effectiveness of our content on any device and in any form factor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Eight months after we finished building Ask GeorgiaGov in 2017, we conducted a retrospective to inspect the logs amassed over the past year. The results were striking. Vehicle registration, driver’s licenses, and the state sales tax comprised the most commonly searched topics. 79.2% of all interactions were successful, an achievement for one of the first content-driven Alexa skills in production, and 71.2% of all interactions led to the issuance of a phone number that users could call for further information.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But deep in the logs we implemented for the Georgia team’s convenience, we found a number of perplexing 404 Not Found errors related to a search term that kept being recorded over and over again as “Lawson’s.” After some digging and consulting the native Georgians in the room, we discovered that one of our dear users with a particularly strong drawl was repeatedly pronouncing “license” in her native dialect to no avail.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As this anecdote highlights, just as no user experience can be truly perfect for everyone, voice content is an environment where imperfections can highlight considerations we missed in developing cross-channel content. And just as we have much to learn when it comes to the new shapes content can take as it jumps off the screen and out the window, it seems our voice interfaces still have a ways to go before they take over the world too.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Special thanks to </em><a href="https://twitter.com/nikofthehill/"><em>Nikhil Deshpande</em></a><em> for his feedback during the writing process.</em></p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Content, Usability]]>				</dc:subject>

				<dc:date>
					2020-04-09T14:00:00+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Cross-Cultural Design]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/senongo-akpem/">Senongo Akpem</a>					</author>

				<link>
					https://alistapart.com/article/cross-cultural-design/				</link>

				<guid>
					https://alistapart.com/article/cross-cultural-design/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>When I first traveled
to Japan as an exchange student in 2001, I lived in northern Kyoto, a block
from the Kitayama subway station. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My first time using the train to get to my university was almost a disaster, even though it was only two subway stops away. I thought I had everything I needed to successfully make the trip. I double- and triple-checked that I had the correct change in one pocket and a computer printout of where I was supposed to go in the other. I was able to make it down into the station, but then I just stood at a ticket machine, dumbfounded, looking at all the flashing lights, buttons, and maps above my head (<strong>Fig 5.1</strong>). Everything was so impenetrable. I was overwhelmed by the architecture, the sounds, the signs, and the language. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172286,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.1-Kyoto-Subway-ticket-machines_v02.jpg?w=960" alt="Photo of two subway ticket machines with complex maps above them" class="wp-image-7172286"/><figcaption>Fig 5.1: Kyoto subway ticket machines—with many line maps and bilingual station names—can seem complicated, especially to newcomers.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>My eyes craved
something familiar—and there it was. The ticket machine had a small button that
said <em>English</em>! I
pushed it but became even more lost: the instructions were poorly translated,
and anyway, they explained a system that I couldn’t use in the first place. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Guess what saved me?
Two little old Japanese ladies. As they bought tickets, I casually looked over
their shoulders to see how they were using the machines. First, they looked up at
the map to find their desired destination. Then, they noted the fare written next
to the station. Finally, they put some money into the machine, pushed the
button that lit up with their correct fare, and out popped the tickets! Wow! I
tried it myself after they left. And after a few tense moments, I got my ticket
and headed through the gates to the train platform.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I pride myself on
being a <em>third-culture</em> <em>kid</em>, meaning I was raised in a culture
other than the country named on my passport. But even with a cultural upbringing in both Nigeria
and the US, it was one of the first times I ever had to guess my way through a
task with no previous reference points. And I did it! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unfortunately, the same guesswork happens online a million times a day. People visit sites that offer them no cultural mental models or visual framework to fall back on, and they end up stumbling through links and pages. Effective visual systems can help eliminate that guesswork and uncertainty by creating layered sets of cues in the design and interface. Let’s look at a few core parts of these design systems and tease out how we can make them more culturally responsive and multifaceted. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Typography</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you work on the
web, you deal with typography all the time. This isn’t a book about typography—others
have written far more eloquently and technically on the subject. What I <em>would
</em>like to do, however, is examine some of the ways culture and identity
influence our perception of type and what typographic choices designers can
make to help create rich cross-cultural experiences.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Stereotypography</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I came across the word
<em>stereotypography</em> a few years ago. Being African, I’m well aware of the way my continent is
portrayed in Western media—a dirt-poor, rural monoculture with little in the
way of technology, education, or urbanization. In the West, one of the most recognizable
graphic markers for things African, tribal, or uncivilized (and no, they are
not the same thing) is the typeface Neuland. Rob Giampietro calls it “the New
Black Face,” a clever play on words. In an essay, he asks an important
question: </p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>How did [Neuland and Lithos] come to signify Africans and African-Americans, regardless of how a designer uses them, and regardless of the purpose for which their creators originally intended them? (<a href="http://bkaprt.com/ccd/05-01/">http://bkaprt.com/ccd/05-01/</a>)</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>From its release in 1923 and continued use through the 1940s in African-American-focused advertising, Neuland has carried heavy connotations and stereotypes of cheapness, ugliness, tribalism, and roughness. You see this even today. Neuland is used in posters for movies like <em>Tarzan</em>, <em>Jurassic Park</em>, and <em>Jumanji—</em>movies that are about jungles, wildness, and scary beasts lurking in the bush, all Western symbolism for the continent of Africa. Even MyFonts’ download page for Neuland (<strong>Fig 5.2</strong>) includes tags for “Africa,” “jungle fever,” and “primitive”—tags unconnected to anything else in the product besides that racist history.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172287,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.2-myfonts-neuland.jpg?w=960" alt="" class="wp-image-7172287"/><figcaption>Fig 5.2: On MyFonts, the Neuland typeface is tagged with “Africa”, “jungle fever”, and “primitive”, perpetuating an old and irrelevant typographic stereotype (<a href="http://bkaprt.com/ccd/05-02/">http://bkaprt.com/ccd/05-02/</a>).</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Don’t make, use, or
sell fonts this way. Here are some tips on how to avoid stereotypography when
defining your digital experiences:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Be immediately suspicious of any typeface that “looks like” a culture or country.</strong> For example, so-called “wonton” or “chop-suey” fonts, whose visual style is thought to express “Asianness” or to suggest Chinese calligraphy, have long appeared on food cartons, signs, campaign websites, and even Abercrombie &amp; Fitch T-shirts with racist caricatures of Asians (<a href="http://bkaprt.com/ccd/05-03/">http://bkaprt.com/ccd/05-03/</a>). Monotype’s website, where you can buy a version called Mandarin Regular (US$35), cringingly describes the typeface’s story as “an interpretation of artistically drawn Asian brush calligraphy” (<strong>Fig 5.3</strong>). Whether or not you immediately know its history, run away from any typeface that purports to represent an entire culture. </li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":7172288,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.3-fonts-dot-com-mandarin-page.png?w=960" alt="A font called &quot;Mandarin&quot; with a stereotypical Asian aesthetic" class="wp-image-7172288"/><figcaption>Fig 5.3: Fonts.com sells a typeface called Mandarin Regular with the following description: “The stylized Asian atmosphere is not created only by the forms of the figures but also by the very name of the typeface. A mandarin was a high official of the ancient Chinese empire” (http://bkaprt.com/ccd/05-04/).</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><strong>Support type designers who are from the culture you are designing for.</strong> This might seem like it’s a difficult task, but the internet is a big place. I have found that, for clients who are sensitive to cultural issues, the inclusion of type designers’ names and backgrounds can be a powerful differentiator, even making its way into their branding packages as a point of pride.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>The world wide webfont</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another common design tool
you should consider is webfonts—fonts specifically designed for use on websites
and apps. One of the main selling points of webfonts is that instead of
putting text in images, clients can use live text on their sites, which is
better for SEO and accessibility. They
are simple to implement these days, a matter of adding a line of code or
checking a box on a templating engine. The easiest way to get them on your site
is by using a service like Google Fonts, Fontstand, or Adobe Fonts. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Or is it? That assumes
those services are actually available to your users. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Google Fonts (and every other service using Google’s Developer API) is blocked in mainland China, which means that any of those nice free fonts you chose would simply not load (<a href="http://bkaprt.com/ccd/05-05/">http://bkaprt.com/ccd/05-05/</a>). You can work around this, but it also helps to have a fallback font—that’s what they’re for. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you’re building your design system, why not take a few extra steps to define some webfonts that are visible in places with content blocks? Justfont is one of the first services focused on offering a wide range of Chinese webfonts (<a href="http://bkaprt.com/ccd/05-06/">http://bkaprt.com/ccd/05-06/</a>). They have both free and paid tiers of service, similar to Western font services. After setting up an account, you can grab whatever CSS and <code>font-family</code> information you need. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Multiple script
systems </h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When your design work
requires more than one script—for instance, a Korean typeface and a Latin
typeface—your choices get much more difficult. Designs that incorporate more
than one are called multiple script systems (<em>multiscript systems</em> for short). Combining them is an
interesting design challenge, one that requires extra typographic sensitivity. Luckily,
your multiscript choices will rarely appear on the same page together; you will
usually be choosing fonts that work across the brand, not that work well next
to one another visually. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s take a look at an example of effective multiscript use. SurveyMonkey, an online survey and questionnaire tool, has their site localized into a variety of different languages (<strong>Fig 5.4</strong>). Take note of the headers, the structure of the text in the menu and buttons, and how both fonts feel like part of the same brand. </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="wp-block-image size-large">
<img src="https://alistapart.com/wp-content/uploads/2020/02/5.4-SurveyMonkey-Korean-take-a-tour-page.png?w=960" alt="A SurveyMonkey page in Korean with a simple aesthetic" class="wp-image-7172290" style="max-width: 49%; float: left;">
<img src="https://alistapart.com/wp-content/uploads/2020/02/5.4-SurveyMonkey-English-take-a-tour-page.png?w=960" alt="A SurveyMonkey page in English with a simple and similar aesthetic" class="wp-image-7172289" style="max-width: 49%;">
<figcaption>Fig 5.4: Compare the typographic choices in the Korean (<a href="http://bkaprt.com/ccd/05-07/">http://bkaprt.com/ccd/05-07/</a>) and US English (<a href="http://bkaprt.com/ccd/05-08/">http://bkaprt.com/ccd/05-08/</a>) versions of SurveyMonkey’s Take a Tour page. Do the header type and spacing retain the spirit of the brand while still accounting for typographic needs?</figcaption>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Some tips as you attempt to choose multiscript fonts for your
project:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Inspect the overall weight and contrast level of the scripts.</strong> Take the time to examine how weight and contrast are used in the scripts you’re using. Find weights and sizes that give you a similar feel and give the page the right balance, regardless of the script. </li><li><strong>Keep an eye on awkward script features.</strong> Character x-heights, descenders, ascenders, and spacing can throw off the overall brand effect. For instance, Japanese characters are always positioned within a grid with all characters designed to fit in squares of equal height and width. Standard Japanese typefaces also contain Latin characters, called <em>romaji</em>. Those Latin characters will, by default, be kerned according to that same grid pattern, often leaving their spacing awkward and ill-formed. Take the extra time to find a typeface that doesn’t have features that are awkward to work with.</li><li><strong>Don’t automatically choose scripts based on superficial similarity.</strong> Initial impressions don’t always mean a typeface is the right one for your project. In an interview in the book <em>Bi-Scriptual</em>, Jeongmin Kwon, a typeface designer based in France, offers an example (<a href="http://bkaprt.com/ccd/05-09/">http://bkaprt.com/ccd/05-09/</a>). Nanum Myeongjo, a contemporary Hangul typeface, might at first glance look really similar to a seventeenth-century Latin old-style typeface—for instance, they both have angled serifs. However, Nanum Myeongjo was designed in 2008 with refined, modern strokes, whereas old-style typefaces were originally created centuries ago and echo handwritten letterforms (<a href="http://bkaprt.com/ccd/05-10/">http://bkaprt.com/ccd/05-10/</a>). Looking at the Google Fonts page for Nanum Myeongjo, though, none of that is clear (<strong>Fig 5.5</strong>). The page automatically generates a Latin <em>Nn</em> glyph in the top left of the page, instead of a more representative Hangul character sample. If I based my multiscript font choices on my initial reactions to that page, my pairings wouldn’t accurately capture the history and design of each typeface.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":7172291,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.5-Nanum-Myeongjo-Google-Font.png?w=960" alt="A font with a large sample character in Latin text rather than a more representative Hangul character" class="wp-image-7172291"/><figcaption>Fig 5.5: The Google Fonts page for Nanum Myeongjo shows a Latin character sample in the top left, rather than a more representative character sample.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Visual density</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>CSS can help you control
visual density—how much text, image, and other content there is relative to the
negative space on your page. As you read on, keep cultural variables in mind: different
cultures value different levels of visual density.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s compare what are
commonly called <em>CJK</em>
(Chinese, Japanese, Korean) alphabets and <em>Latin</em> (English, French, Italian, etc.) alphabets. CJK alphabets
have more complex characters, with shapes that are generally squarer than Latin
letterforms. The glyphs also tend to be more detailed than Latin ones, resulting
in a higher visual density. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your instinct might be
to create custom type sizes and line heights for each of your localized pages.
That is a perfectly acceptable option, and if you are a typophile, it may drive
you crazy <em>not</em> to
do it. But I’m here to tell you that­ when adding CJK languages to a design
system, you can update it to account for their visual density without ripping
out a lot of your original CSS: </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Choose a font size that is slightly larger for CJK characters, because of their density. </li><li>Choose a line height that gives you ample vertical space between each line of text (referred to as <code>line-height</code> in CSS). </li><li>Look at your Latin text in the same sizes and see if it still works. </li><li>Tweak them together to find a size that works well with both scripts. </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The 2017 site for Typojanchi, the Korean Typography Biennale, follows this methodology (<strong>Fig 5.6</strong>). Both the English and Korean texts have a <code>font-size</code> of <code>1.25em</code>, and a <code>line-height</code> of <code>1.5</code>. The result? The English text takes up more space vertically, and the block of Korean text is visually denser, but both are readable and sit comfortably within the overall page design. It is useful to compare translated websites like this to see how CSS styling can be standardized across Latin and CJK pages.</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.6-Typojanchi-English-page.png?w=836" alt="A basic layout with English text" class="wp-image-7172296" style="max-width: 49%; float: left;"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.6-Typojanchi-Korean-page.png?w=836" alt="A basic layout with Korean text" class="wp-image-7172297" style="max-width: 49%;"><figcaption>Fig 5.6: The 2017 site for Typojanchi, the Korean Typography Biennale, shows differing visual density in action. It is useful to compare translated websites like this to see how CSS styling can be standardized across Latin and CJK pages (http://bkaprt.com/ccd/05-11/).</figcaption></figure>
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3>Text expansion factors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Expansion factors calculate
how long strings of text will be in different languages. They use either a
decimal (1.8) or a percentage (180%) to calculate the length of a text string
in English versus a different language. Of course, letter-spacing depends on
the actual word or phrase, but think of them as a very rough way to anticipate space
for text when it gets translated. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using expansion factors is best when planning for microcopy, calls to action, and menus, rather than long-form content like articles or blog posts that can freely expand down the page. The Salesforce Lightning Design System offers a detailed expansion-factor table to help designers roughly calculate space requirements for other languages in a UI (<strong>Fig 5.7</strong>). </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172292,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.7-expansion-factor-table.png?w=736" alt="A chart showing how a different piece of content lays out in different languages" class="wp-image-7172292"/><figcaption>Fig 5.7: This expansion-factor table from Salesforce lets designers and developers estimate the amount of text that will exist in different languages. Though dependent on the actual words, such calculations can give you a benchmark to design with content in mind (<a href="http://bkaprt.com/ccd/05-12/">http://bkaprt.com/ccd/05-12/</a>).</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>But wait! Like
everything in cross-cultural design, nothing is ever that simple. Japanese, for
example, has three scripts: <em>Kanji</em>, for characters of Chinese origin,
<em>hiragana</em>, for words and sounds that are not represented in <em>kanji</em>,&nbsp;and&nbsp;<em>katakana</em>,
for words borrowed from other
languages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The follow button is a core part of the Twitter experience. It has six characters in English (“Follow”) and four in Japanese (<a>フォロー</a>), but the Japanese version is twenty percent longer because it is in katakana, and those characters take up more space than kanji (<strong>Fig 5.8</strong>). Expansion tables can struggle to accommodate the complex diversity of human scripts and languages, so don’t look to them as a one-stop or infallible solution. </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.8-Twitter-Follow-Button-in-Japanese.png?w=960" alt="The Twitter UI in Japanese" class="wp-image-7172294"><img src="https://alistapart.com/wp-content/uploads/2020/02/5.8-Twitter-Follow-Button-in-English.png?w=960" alt="The Twitter UI in English" class="wp-image-7172293"><figcaption>Fig 5.8: On Twitter, expansion is clearly visible: the English “Follow” button text comes in at about 47 pixels wide, while the Japanese text comes in at 60 pixels wide. </figcaption></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Here are a few things
you can do keep expansion factors in mind as you design:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Generate dummy text in different languages for your design comps.</strong> Of course, you should make sure your text doesn’t contain any unintentional swearwords or improper language, but tools like Foreign Ipsum are<strong> </strong>a good place to start getting your head around expansion factors (<a href="http://bkaprt.com/ccd/05-13/">http://bkaprt.com/ccd/05-13/</a>).</li><li><strong>Leave extra space around buttons, menu items, and other microcopy. </strong>As well as being general good practice in responsive design, this allows you to account for how text in your target languages expands.</li><li><strong>Make sure your components are expandable.</strong> Stay away from assigning a fixed width to your UI elements unless it’s unavoidable.</li><li><strong>Let longer text strings wrap to a second line.</strong> Just ensure that text is aligned correctly and is easy to scan.</li></ul>
<!-- /wp:list -->]]>				</description>

				<dc:subject>
					<![CDATA[Design, Typography &amp; Web Fonts]]>				</dc:subject>

				<dc:date>
					2020-02-27T15:30:00+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Standards for Writing Accessibly]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/michael-j-metts/">Michael J. Metts</a>, <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/andy-welfle/">Andy Welfle</a>					</author>

				<link>
					https://alistapart.com/article/standards-for-writing-accessibly/				</link>

				<guid>
					https://alistapart.com/article/standards-for-writing-accessibly/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Writing to meet WCAG2 standards can be a challenge, but it’s worthwhile. Albert Einstein, the archetypical genius and physicist, once said, “Any fool can make things bigger, more complex, and more violent. It takes a touch of genius—and a lot of courage—to move in the opposite direction.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hopefully, this entire book will help you better write for accessibility. So far, you’ve learned:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Why clarity is important</li><li>How to structure messages for error states and stress cases</li><li>How to test the effectiveness of the words you write</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>All that should help your writing be better for screen readers, give additional context to users who may need it, and be easier to parse.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But there are a few specific points that you may not otherwise think about, even after reading these pages. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Writing for Screen Readers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>People with little or no sight interact with apps and websites in a much different way than sighted people do. Screen readers parse the elements on the screen (to the best of their abilities) and read it back to the user. And along the way, there are many ways this could go wrong. As the interface writer, your role is perhaps most important in giving screen reader users the best context.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here are a few things to keep in mind about screen readers:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The average reading time for sighted readers is two to five words per second. Screen-reader users can comprehend text being read at an average of 35 syllables per second, which is significantly faster. Don’t be afraid to sacrifice brevity for clarity, especially when extra context is needed or useful.</li><li>People want to be able to skim long blocks of text, regardless of sight or audio, so it’s extremely important to structure your longform writing with headers, short paragraphs, and other content design best practices. </li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Write Chronologically, Not Spatially </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Writing chronologically is about describing the order of things, rather than where they appear spatially in the interface. There are so many good reasons to do this (devices and browsers will render interfaces differently), but screen readers show you the most valuable reason. You’ll often be faced with writing tooltips or onboarding elements that say something like, “Click the OK button below to continue.” Or “See the instructions above to save your document.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Screen readers will do their job and read those instructions aloud to someone who can’t see the spatial relationships between words and objects. While many times, they can cope with that, they shouldn’t have to. Consider screen reader users in your language. Embrace the universal experience shared by humans and rely on their intrinsic understanding of the <em>top is first, bottom is last</em> paradigm. Write chronologically, as in Figure 5.5.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172224,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/01/fig1.jpg?w=916" alt="" class="wp-image-7172224" alt="A screenshot of a form with a password field. The password hints show up below the password field." /><figcaption>FIGURE 5.5 Password hint microcopy below the password field won’t help someone using a screen reader who hasn’t made it there yet.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Rather than saying:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click the OK button below to continue.</li><li>(A button that scrolls you to the top of a page): Go to top.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Instead, say:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Next, select OK to continue.</li><li>Go to beginning.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Write Left to Right, Top to Bottom</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While you don’t want to convey spatial meaning in your writing, you still want to keep that spatial order in mind.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Have you ever purchased a service or a product, only to find out later that there were conditions you didn’t know about before you paid for it? Maybe you didn’t realize batteries weren’t included in that gadget, or that signing up for that social network, you were implicitly agreeing to provide data to third-party advertisers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>People who use screen readers face this all the time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most screen readers will parse information from left to write, from top to bottom.<sup>1</sup> Think about a few things when reviewing the order and placement of your words. Is there information critical to performing an action, or making a decision, that appears after (to the right or below) an action item, like in Figure 5.5? If so, consider moving it up in the interface. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead, if there’s information critical to an action (rules around setting a password, for example, or accepting terms of service before proceeding), place it <em>before </em>the text field or action button. Even if it’s hidden in a tooltip or info button, it should be presented before a user arrives at a decision point.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Don’t Use Colors and Icons Alone </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you are a sighted American user of digital products, there’s a pretty good chance that if you see a message in red, you’ll interpret it as a warning message or think something’s wrong. And if you see a message in green, you’ll likely associate that with success. But while colors aid in conveying meaning to this type of user, they don’t necessarily mean the same thing to those from other cultures.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, although red might indicate excitement, or danger in the U.S. (broadly speaking), in other cultures it means something entirely different:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>In China, it represents good luck.</li><li>In some former-Soviet, eastern European countries it’s the color strongly associated with Communism.</li><li>In India, it represents purity. </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Yellow, which we in the U.S. often use to mean “caution” (because we’re borrowing a mental model from traffic lights), might convey another meaning for people in other cultures:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>In Latin America, yellow is associated with death.</li><li>In Eastern and Asian cultures, it’s a royal color—sacred and often imperial. </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>And what about users with color-blindness or low to no vision? And what about screen readers? Intrinsic meaning from the interface color means nothing for them. Be sure to add words that bear context so that if you heard the message being read aloud, you would understand what was being said, as in Figure 5.6.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172225,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://alistapart.com/wp-content/uploads/2020/01/fig2.jpg?w=960" alt="" class="wp-image-7172225" alt="Two error tooltips: one that says 'Save your work!' and one that says 'Save your work before going to the next step'" /><figcaption>FIGURE 5.6 While a simple in-app message warning a user to save their work before proceeding is more effective, visually, if it is red and has a warning icon, as seen on the left, you should provide more context when possible. The example on the right explicitly says that a user won’t be able to proceed to the next step before saving their work.
</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Describe the Action, Not the Behavior</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Touch-first interfaces have been steadily growing and replacing keyboard/mouse interfaces for years, so no longer are users “clicking” a link or a button. But they’re not necessarily “tapping” it either, especially if they’re using a voice interface or an adaptive device.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead of microcopy that includes behavioral actions like:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click</li><li>Tap</li><li>Press</li><li>See</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Try device-agnostic words that describe the action, irrespective of the interface, like:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Choose</li><li>Select</li><li>View</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>There are plenty of exceptions to this rule. If your interface requires a certain action to execute a particular function, and you need to teach the user how their gesture affects the interface (“Pinch to zoom out,” for example), then of course you need to describe the behavior. But generally, the copy you’re writing will be simpler and more consistent if you stick with the action in the context of the interface itself.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Accessibility, Content, User Experience, Writing]]>				</dc:subject>

				<dc:date>
					2020-01-23T15:20:00+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Making Room for Variation]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/yperezcruz/">Yesenia Perez-Cruz</a>					</author>

				<link>
					https://alistapart.com/article/making-room-for-variation/				</link>

				<guid>
					https://alistapart.com/article/making-room-for-variation/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Making a brand feel unified, cohesive, and harmonious while also leaving
room for experimentation is a tough balancing act. It’s one of the most
challenging aspects of a design system. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Graphic designer and Pentagram partner Paula Scher faced this
challenge with the visual identity for the Public Theater in New York. As she
explained in a talk at Beyond Tellerrand: </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="quote">
<blockquote>
<p>I began to realize that if you made everything the same, it
was boring after the first year. If you changed it individually for each play,
the theater lost recognizability. The thing to do, which I totally got for the
first time after working there at this point for 17 years, is what they needed
to have were seasons. </p>
<p>You could take the typography and the color system for the summer festival, the Shakespeare in the Park Festival, and you could begin to translate it into posters by flopping the colors, but using some of the same motifs, and you could create entire seasons out of the graphics. That would become its own standards manual where I have about six different people making these all year (<a href="http://bkaprt.com/eds/04-01/">http://bkaprt.com/eds/04-01/</a>).</p>
</blockquote>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Scher’s strategy was to retain the Public Theater’s visual language every year, but to vary some of its elements (<strong>Fig 4.1–2</strong>). Colors would be swapped. Text would skew in different directions. New visual motifs would be introduced. The result is that each season coheres in its own way, but so does the identity of the Public Theater as a whole. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172171} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/12/4.1-Public-Theater-2014.png?w=960" alt="Sixteen Public Theater posters in black, white, and yellow, with slanted wood type letterforms and high-contrast images of people." class="wp-image-7172171"/><figcaption><strong>Fig 4.1</strong>: The posters for the 2014/15 season featured the wood type style the Public Theater is known for, but the typography was skewed. The color palette was restrained to yellow, black, and white, which led to a dynamic look when coupled with the skewed type (http://bkaprt.com/eds/04-02/).</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":7172172} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/12/4.2-Public-Theater-2018.png?w=960" alt="Twelve Public Theater posters using black, white, and pastel colors with wood type letterforms and softer images of people." class="wp-image-7172172"/><figcaption><strong>Fig 4.2</strong>: For the 2018 season, the wood type letterforms were extended on a field of gradated color. The grayscale cut-out photos we saw in the 2014/15 season persisted, but this time in lower contrast to fit better with the softer color tones (http://bkaprt.com/eds/04-03/).</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Even the most robust or thoroughly planned systems will need to account for variation at some point. As soon as you release a design system, people will ask you how to deviate from it, and you’ll want to be armed with persuasive answers. In this chapter, I’m going to talk about what variation means for a design system, how to know when you need it, and how to manage it in a scalable way. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What Is Variation?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We’ve spent most of this book talking about the importance of
unity, cohesion, and harmony in a design system. So why are we talking about
variation? Isn’t that at odds with all of the goals we’ve set until now? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Variation is a deviation from established patterns, and it can
exist at every level of the system. At the component level, for instance, a
team may discover that they need a component to behave in a slightly different
way; maybe this particular component needs to appear without a photo, for
example. At a design-language level, you may have a team that has a different
audience, so they want to adjust their brand identity to serve that audience
better. You can even have variation at the level of design principles: if a
team is working on a product that is functionally different from your core
product, they may need to adjust their principles to suit that context. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are three kinds of deviations that come up in a design
system:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Unintentional divergence</strong> typically happens when designers can’t find the information they’re looking for. They may not know that a certain solution exists within a system, so they create their own style. Clear, easy-to-find documentation and usage guidelines can help your team avoid unintentional variation.</li><li><strong>Intentional but unnecessary divergence</strong> usually results from designers not wanting to feel constrained by the system, or believing they have a better solution. Making sure your team knows how to push back on and contribute to the system can help mitigate this kind of variation. </li><li><strong>Intentional, meaningful divergence</strong> is the goal of an expressive design system. In this case, the divergence is meaningful because it solves a very specific user problem that no existing pattern solves.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>We want to enable intentional, meaningful variation. To do this, we need to understand the needs and contexts for variation.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Contexts for Variation </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Every variation we add makes our design system more complicated. Therefore, we need to take care to find the right moments for variation. Three big contextual changes are served by variation: brand, audience, and environment. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Brand</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you’re creating a system for multiple brands, each with its own
brand language, then your system needs to support variations to reflect those
brands. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The key here is to find the common core elements and then set
some criteria for how you should deviate. When we were creating the design
system for our websites at Vox Media, we constantly debated which elements
should feel more expressive. Should a footer be standardized, or should we
allow for tons of customization? We went back to our core goals: our users were
ultimately visiting our websites to consume editorial content. So the
variations should be in service of the content, writing style, and tone of
voice for each brand. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The newsletter modules across Vox Media brands were an example of unnecessary variation. They were consistent in functionality and layout, but had variations in type, color, and visual treatments like borders (<strong>Fig 4.3</strong>). There was quite a bit of custom design within a very small area: Curbed’s newsletter component had a skewed background, for example, while Eater’s had a background image. Because these modules were so consistent in their user goals, we decided to unify their design and create less variation (<strong>Fig 4.4</strong>).</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="wp-block-image">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.3a-Curbed-Old-Newsletter.png?w=491" alt="" class="wp-image-7172173" style="float: left; max-width: 33%">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.3b-Vox-Old-Newsletter-.png?w=470" alt="" class="wp-image-7172174" style="float: left; max-width:33%">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.3c-Eater-Old-Newsletter.png?w=479" alt="" class="wp-image-7172175" style="float: left; max-width:33%">
<figcaption style="clear:left"><b>Fig 4.3</b>: Older versions of Vox Media’s newsletter modules contained lots of unnecessary visual variation.</figcaption>
</figure>
<!-- /wp:html -->

<!-- wp:image {"id":7172176} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/12/4.4-Curbed-New-Newsletter.png?w=960" alt="Three examples of newsletter modules, showing the same colors, fonts, and spacing." class="wp-image-7172176"/><figcaption>Fig 4.4: The new, unified newsletter modules.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The unified design cleaned up some technical debt. In the
previous design, each newsletter module had CSS overrides to achieve distinct
styling. Some modules even had overrides on the primary button color so it
would work better with the background color. Little CSS overrides like this add
up over time. Whenever we released a new change, we’d have to manually update
the spots containing CSS overrides. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The streamlined design also placed a more appropriate emphasis on
the newsletter module. While important, this module isn’t the star of the page.
It doesn’t need loud backgrounds or fancy shapes to command attention,
especially since it’s placed around article content. Variation in this module
wasn’t necessary for expressing the brands.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the other hand, consider the variation in Vox Media’s global header components. When we were redesigning the <cite>Verge</cite>, its editorial teams were vocal about wanting more latitude to art-direct the page, guide attention toward big features, and showcase custom illustrations. We addressed this by creating a masthead component (<strong>Fig 4.5</strong>) that sits on top of the global header on homepages. It contains a logo, tagline, date, and customizable background image. Though at the time this was a one-off component, we felt that the variation was valuable because it would strengthen the <cite>Verge</cite>’s brand voice. </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/12/4.5a-Verge-Masthead-Pink.jpeg?w=960" alt="Example of the Verge’s masthead component with magenta and blue abstractions." class="wp-image-7172177">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.5b-Verge-Masthead-Orange-City.jpeg?w=960" alt="Example of the Verge’s masthead component with a city skyline in orange tones." class="wp-image-7172178">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.5c-Verge-Masthead-BlackWhite.png?w=960" alt="Example of the Verge’s masthead component in pixelated black and white." class="wp-image-7172179">
<figcaption><b>Fig 4.5:</b> Examples of the <cite>Verge</cite>'s masthead component</figcaption></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>The <cite>Verge</cite> team commissions or makes original art that changes throughout the day. The most exciting part is that they can use the masthead and a one-up hero when they drop a big feature and use these flexible components to art-direct the page (<strong>Fig 4.6</strong>). Soon after launch, the <cite>Verge</cite> masthead even got a Twitter fan account (@VergeTaglines) that tweets every time the image changes. </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="wp-block-image">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.6b-Verge-Homepage-Feature-Yellow.png?w=955" alt="Comparison of the Verge’s homepage, changing based on the masthead design and hero photography." class="wp-image-7172181" style="float:left; max-width:50%;">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.6a-Verge-Homepage-Feature-Black.png?w=913" alt="Comparison of the Verge’s homepage, changing based on the masthead design and hero photography." class="wp-image-7172180" style="float:left; max-width:50%;">
<figcaption style="clear:left"><b>Fig 4.6:</b> The <cite>Verge</cite> uses two generic components, the masthead and one-up hero, to art-direct its homepages.</figcaption></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Though this component was built specifically for the <cite>Verge</cite>, it soon gained broader application with other brands that share Vox’s publishing platform, Chorus. The McElroy Family website, for example, needed to convey its sense of humor and Appalachian roots; the masthead component shines with an original illustration featuring an adorable squirrel (<strong>Fig 4.7</strong>). </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172182} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/12/4.7-McElroy-Masthead.png?w=960" alt="The masthead component for the McElroy Family, showing a blue navigation bar and a pastel illustration of a forest." class="wp-image-7172182"/><figcaption><strong>Fig 4.7:</strong> The McElroy Family site uses the same masthead component as the <em>Verge</em> to display a custom illustration.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":7172183} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/12/4.8-Chicago-Sun-Times-Masthead.png?w=960" alt="The masthead component for the Chicago Sun-Times, showing a white background, stark black text, and a red Subscribe button." class="wp-image-7172183"/><figcaption><strong>Fig 4.8:</strong> The same masthead component on the <em>Chicago Sun-Times</em> site.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The <cite>Chicago Sun-Times</cite>—another Chorus platform site—is very different in content, tone, and audience from The McElroy Family, but the masthead component is just as valuable in conveying the tone of the organization’s high-quality investigative journalism and breaking news coverage (<strong>Fig 4.8</strong>). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why did the masthead variation work well while the newsletter variation didn’t? The variations on the newsletter design were purely visual. When we created them, we didn’t have a strategy for how variation should work; instead, we were looking for any opportunity to make the brands feel distinct. The masthead variation, by contrast, tied directly into the brand strategy. Even though it began as a one-off for the <cite>Verge</cite>, it was flexible and purposeful enough to migrate to other brands. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Audience</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The next contextual variation comes from audience. If your
products serve different audiences who all need different things, then your
system may need to adapt to fit those needs. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A good example of this is Airbnb’s listing pages. In addition to
their standard listings, they also have Airbnb Plus—one-of-a-kind, high quality
rentals at higher price points. Audiences booking a Plus listing are probably
looking for exceptional quality and attention to detail. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Both Airbnb’s standard listing page and Plus listing page are immediately recognizable as belonging to the same family because they use many consistent elements (<strong>Fig 4.9</strong>). They both use Airbnb’s custom font, Cereal. They both highlight photography. They both use many of the same components, like the date picker. The iconography is the same.</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="wp-block-image">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.10-Airbnb-Standard-Listing.png?w=960" alt="Screenshot of AirBnB's standard listing" class="wp-image-7172185" style="max-height: 50vh">
<img src="https://alistapart.com/wp-content/uploads/2019/12/4.9-Airbnb-Plus-Listing.png?w=960" alt="Screenshot of AirBnB's Plus listing" class="wp-image-7172184" style="max-height: 50vh">
<figcaption><b>Fig 4.9:</b> The same brand elements in Airbnb’s standard listings (above) are used in their Plus listings (below), but with variations that make the listing styles distinct.</figcaption></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>However, some of the
design choices convey a different attitude. Airbnb Plus uses larger
typography, airier vertical space, and a lighter weight of Cereal. It has a
more understated color palette, with a deeper color on the call to action.
These choices make Airbnb Plus feel like a more premium experience. You can see
they’ve adjusted the density, weight, and scale levers to achieve a more
elegant and sophisticated aesthetic. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The standard listing page, on the other hand, is more functional,
with the booking module front and center. The Plus design pulls the density and
weight levers in a lighter, airier direction. The standard listing page has
less size contrast between elements, making it feel more functional. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because they use the same core building blocks—the same typography, iconography, and components—both experiences feel like Airbnb. However, the variations in spacing, typographic weights, and color help distinguish the standard listing from the premium listing.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Environment</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I’ve mainly been talking about adding variation to a system to
allow for a range of content tones, but you may also need your system to scale
based on environmental contexts. “Environment” in this context asks: Where will
your products be used? Will that have an impact on the experience? Environments
are the various constraints and pressures that surround and inform an
experience. That can include lighting, ambient noise, passive or active
engagement, expected focus level, or devices. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Shopify’s Polaris design system initially grew out of Shopify’s Store
Management product. When the Shopify Retail team kicked off a project to design
the next generation <em>point-of-sale </em>(POS) system, they realized that the
patterns in Polaris didn’t exactly fit their needs. The POS system needed to
work well in a retail space, often under bright lighting. The app needed to be
used at arm’s length, twenty-four to thirty-six inches away from the merchant.
And unlike the core admin, where the primary interaction is between the
merchant and the UI, merchants using the POS system needed to prioritize their
interactions with their customers instead of the UI. The Retail team wanted
merchants to achieve an “eyes-closed” level of mastery over the UI so they
could maintain eye contact with their customers. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Retail team decided that the existing color palette, which
only worked on a light background, would not be clear enough under the bright
lights of a retail shop. The type scale was also too small to be used at arm’s
length. And in order for merchants to use the POS system without breaking eye
contact with customers, the buttons and other UI elements would need to be much
larger. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Retail team recognized that the current design system didn’t support a variety of environmental scenarios. But after talking with the Polaris team, they realized that other teams would benefit from the solutions they created. The Warehouse team, for example, was also developing an app that needed to be used at arm’s length under bright lights. This work inspired the Polaris team to create a dark mode for the system (<strong>Fig 4.10</strong>). </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172188} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/12/making-room-for-variation-fig10.png?w=960" alt="Comparison of light and dark modes for navigation menus in the Polaris design system." class="wp-image-7172188"/><figcaption><strong>Fig 4.10:</strong> Polaris light mode (left) and dark mode (right).</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This feedback loop between product team and design system team is
a great example of how to build the right variation into your system. Build
your system around helping your users navigate your product more clearly and serving
content needs and you’ll unlock scalable expression. </p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Design]]>				</dc:subject>

				<dc:date>
					2019-12-12T14:30:03+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Request with Intent: Caching Strategies in the Age of PWAs]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/agustafson/"> Aaron Gustafson</a>					</author>

				<link>
					https://alistapart.com/article/request-with-intent-caching-strategies-in-the-age-of-pwas/				</link>

				<guid>
					https://alistapart.com/article/request-with-intent-caching-strategies-in-the-age-of-pwas/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Once upon a time, we relied on browsers to handle caching for us; as developers in those days, we had very little control. But then came <a href="https://alistapart.com/article/yes-that-web-project-should-be-a-pwa/">Progressive Web Apps</a> (PWAs), <a href="https://developer.mozilla.org/docs/Web/API/Service_Worker_API">Service Workers</a>, and the <a href="https://developer.mozilla.org/docs/Web/API/Cache">Cache API</a>—and suddenly we have expansive power over what gets put in the cache and how it gets put there. We can now cache everything we want to… and therein lies a potential problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Media files—especially images—make up <a href="https://httparchive.org/reports/page-weight">the bulk of average page weight</a> these days, and <a href="https://httparchive.org/reports/page-weight#bytesImg">it’s getting worse</a>. In order to improve performance, it’s tempting to cache as much of this content as possible, but should we? In most cases, no. Even with all this newfangled technology at our fingertips, great performance still hinges on a simple rule: <a href="https://alistapart.com/article/the-best-request-is-no-request-revisited">request only what you need and make each request as small as possible</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To provide the best possible experience for our users without abusing their network connection or their hard drive, it’s time to put a spin on some classic best practices, experiment with media caching strategies, and play around with a few Cache API tricks that Service Workers have hidden up their sleeves.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Best intentions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>All those lessons we learned optimizing web pages for dial-up became super-useful again when mobile took off, and they continue to be applicable in the work we do for a global audience today. Unreliable or high latency network connections are still the norm in many parts of the world, reminding us that it’s never safe to assume a technical baseline lifts evenly or in sync with its corresponding cutting edge. And that’s the thing about performance best practices: history has borne out that approaches that are good for performance now will continue being good for performance in the future.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Before the advent of Service Workers, we could provide <a href="https://developer.yahoo.com/performance/rules.html#expires">some instructions to browsers</a> with respect to how long they should cache a particular resource, but that was about it. Documents and assets downloaded to a user’s machine would be dropped into a directory on their hard drive. When the browser assembled a request for a particular document or asset, it would peek in the cache first to see if it already had what it needed to possibly avoid hitting the network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We have considerably more control over network requests and the cache these days, but that doesn’t excuse us from being thoughtful about the resources on our web pages.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Request only what you need</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As I mentioned, the web today is lousy with media. Images and videos have become a dominant means of communication. They may convert well when it comes to sales and marketing, but they are hardly performant when it comes to download and rendering speed. With this in mind, each and every image (and video, etc.) should have to fight for its place on the page.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A few years back, a recipe of mine was included in a newspaper story on cooking with spirits (alcohol, not ghosts). I don’t subscribe to the print version of that paper, so when the article came out I went to the site to take a look at how it turned out. During a recent redesign, the site had decided to load all articles into a nearly full-screen modal viewbox layered on top of their homepage. This meant requesting the article required requests for all of the assets associated with the article page <em>plus</em> all the contents and assets for the homepage. Oh, and the homepage had video ads—plural. And, yes, they auto-played.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I popped open DevTools and discovered the page had blown past 15 MB in page weight. Tim Kadlec had recently launched <a href="https://whatdoesmysitecost.com/">What Does My Site Cost?</a>, so I decided to check out the damage. Turns out that the actual cost to view that page for the average US-based user was more than the cost of the print version of that day’s newspaper. That’s just messed up.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sure, I could blame the folks who built the site for doing their readers such a disservice, but the reality is that none of us go to work with the goal of worsening our users’ experiences. This could happen to any of us. We could spend days scrutinizing the performance of a page only to have some committee decide to set that carefully crafted page atop a Times Square of auto-playing video ads. Imagine how much worse things would be if we were stacking two abysmally-performing pages on top of each other!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Media can be great for drawing attention when competition is high (e.g., on the homepage of a newspaper), but when you want readers to focus on a single task (e.g., reading the actual article), its value can drop from important to “nice to have.” Yes, studies have shown that images excel at drawing eyeballs, but once a visitor is on the article page, <a href="https://theoutline.com/post/2485/not-every-article-needs-a-picture">no one cares</a>; we’re just making it take longer to download and more expensive to access. The situation only gets worse as we shove more media into the page.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We must do everything in our power to reduce the weight of our pages, so avoid requests for things that don’t add value. For starters, if you’re writing an article about a data breach, resist the urge to include <a href="https://www.istockphoto.com/jp/en/photo/hacker-attacking-internet-gm540848970-96658127">that ridiculous stock photo</a> of some random dude in a hoodie typing on a computer in a very dark room.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Request the smallest file you can</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that we’ve taken stock of what we <em>do</em> need to include, we must ask ourselves a critical question: How can we deliver it in the fastest way possible? This can be as simple as <a href="https://vimeo.com/290141511">choosing the most appropriate image format</a> for the content presented (and optimizing the heck out of it) or as complex as recreating assets entirely (for example, if switching from raster to vector imagery would be more efficient).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Offer alternate formats</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When it comes to image formats, we don’t have to choose between performance and reach anymore. We can provide multiple options and let <em>the browser</em> decide which one to use, based on what it can handle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can accomplish this by offering multiple <code>sources</code> within a <code>picture</code> or <code>video</code> element. Start by creating multiple formats of the media asset. For example, with WebP and JPG, it’s likely that the WebP will have a smaller file size than the JPG (but check to make sure). With those alternate sources, you can drop them into a <code>picture</code> like this:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-markup">&lt;picture&gt;
  &lt;source srcset="my.webp" type="image/webp"&gt;
  &lt;img src="my.jpg" alt="Descriptive text about the picture."&gt;
&lt;/picture&gt;</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Browsers that recognize the <code>picture</code> element will check the <code>source</code> element before making a decision about which image to request. If the browser supports the MIME type “image/webp,” it will kick off a request for the WebP format image. If not (or if the browser doesn’t recognize <code>picture</code>), it will request the JPG.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The nice thing about this approach is that you’re serving the smallest image possible to the user without having to resort to any sort of JavaScript hackery.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can take the same approach with video files:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-markup">&lt;video controls&gt;
  &lt;source src="my.webm" type="video/webm"&gt;
  &lt;source src="my.mp4" type="video/mp4"&gt;
  &lt;p&gt;Your browser doesn’t support native video playback,
    but you can &lt;a href="my.mp4" download&gt;download&lt;/a&gt;
    this video instead.&lt;/p&gt;
&lt;/video&gt;</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Browsers that support WebM will request the first <code>source</code>, whereas browsers that don’t—but do understand MP4 videos—will request the second one. Browsers that don’t support the <code>video</code> element will fall back to the paragraph about downloading the file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The order of your <code>source</code> elements matters. <a href="https://html.spec.whatwg.org/multipage/media.html#concept-media-load-algorithm">Browsers will choose the first <em>usable</em> <code>source</code></a>, so if you specify an optimized alternative format <em>after</em> a more widely compatible one, the alternative format may never get picked up.&nbsp;&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Depending on your situation, you might consider bypassing this markup-based approach and handle things on the server instead. For example, if a JPG is being requested and the browser supports WebP (which is indicated in the <code>Accept</code> header), there’s nothing stopping you from replying with a WebP version of the resource. In fact, some CDN services—<a href="https://cloudinary.com">Cloudinary</a>, for instance—come with this sort of functionality right out of the box.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Offer different sizes</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Formats aside, you may want to deliver alternate image sizes optimized for the current size of the browser’s viewport. After all, there’s no point loading an image that’s 3–4 times larger than the screen rendering it; that’s just wasting bandwidth. This is where <a href="https://alistapart.com/article/responsive-images-in-practice/">responsive images</a> come in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s an example:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-markup">&lt;img src="medium.jpg"
  srcset="small.jpg 256w,
    medium.jpg 512w,
    large.jpg 1024w"
  sizes="(min-width: 30em) 30em, 100vw"
  alt="Descriptive text about the picture."&gt;</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>There’s a lot going on in this super-charged <code>img</code> element, so I’ll break it down:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>This <code>img</code> offers three size options for a given JPG: 256 px wide (<code>small.jpg</code>), 512 px wide (<code>medium.jpg</code>), and 1024 px wide (<code>large.jpg</code>). These are provided in the <code>srcset</code> attribute with corresponding <a href="https://cloudfour.com/thinks/responsive-images-101-part-4-srcset-width-descriptors/">width descriptors</a>.</li><li>The <code>src</code> defines a default image source, which acts as a fallback for browsers that don’t support <code>srcset</code>. Your choice for the default image will likely depend on the context and general usage patterns. Often I’d recommend the smallest image be the default, but if the majority of your traffic is on older desktop browsers, you might want to go with the medium-sized image.</li><li>The <code>sizes</code> attribute is a <a href="https://www.w3.org/TR/CSS2/cascade.html#preshint">presentational hint</a> that informs the browser how the image will be rendered in different scenarios (its <a href="https://24ways.org/2018/jank-free-image-loads/">extrinsic size</a>) once CSS has been applied. This particular example says that the image will be the full width of the viewport (<code>100vw</code>) until the viewport reaches 30 em in width (<code>min-width: 30em</code>), at which point the image will be 30 em wide. You can make the <code>sizes</code> value as complicated or as simple as you want; omitting it causes browsers to use the default value of <code>100vw</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can even combine this approach with <a href="https://alistapart.com/article/responsive-images-in-practice/#snippet13">alternate formats and crops within a single <code>picture</code></a>. 🤯</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All of this is to say that you have a number of tools at your disposal for delivering fast-loading media, so use them!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Defer requests (when possible)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Years ago, Internet Explorer 11 introduced a new attribute that enabled developers to de-prioritize specific <code>img</code> elements to speed up page rendering: <code>lazyload</code>. That attribute never went anywhere, standards-wise, but it was a solid attempt to defer image loading until images are in view (or close to it) without having to involve JavaScript.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There have been countless JavaScript-based implementations of lazy loading images since then, but recently Google also took a stab at a more declarative approach, using a different attribute: <a href="https://web.dev/native-lazy-loading"><code>loading</code></a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>loading</code> attribute supports three values (“auto,” “lazy,” and “eager”) to define how a resource should be brought in. For our purposes, the “lazy” value is the most interesting because it defers loading the resource until it reaches a <a href="https://web.dev/native-lazy-loading#load-in-distance-threshold">calculated distance</a> from the viewport.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Adding that into the mix…</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-markup">&lt;img src="medium.jpg"
  srcset="small.jpg 256w,
    medium.jpg 512w,
    large.jpg 1024w"
  sizes="(min-width: 30em) 30em, 100vw"
  loading="lazy"
  alt="Descriptive text about the picture."&gt;</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>This attribute offers a bit of a performance boost in Chromium-based browsers. Hopefully it will become a standard and get picked up by other browsers in the future, but in the meantime there’s no harm in including it because browsers that don’t understand the attribute will simply ignore it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This approach complements a media prioritization strategy really well, but before I get to that, I want to take a closer look at Service Workers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Manipulate requests in a Service Worker</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Service Workers are a special type of <a href="https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers">Web Worker</a> with the ability to intercept, modify, and respond to all network requests via the <a href="https://developer.mozilla.org/docs/Web/API/Fetch_API">Fetch API</a>. They also have access to the <a href="https://developer.mozilla.org/docs/Web/API/Cache">Cache API</a>, as well as other asynchronous client-side data stores like <a href="https://developer.mozilla.org/docs/Web/API/IndexedDB_API">IndexedDB</a> for resource storage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When a Service Worker is installed, you can hook into that event and prime the cache with resources you want to use later. Many folks use this opportunity to squirrel away copies of global assets, including styles, scripts, logos, and the like, but you can also use it to cache images for use when network requests fail.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Keep a fallback image in your back pocket</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Assuming you want to use a fallback in more than one networking recipe, you can set up a named function that will respond with that resource:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">function respondWithFallbackImage() {
  return caches.match( "/i/fallbacks/offline.svg" );
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Then, within a <a href="https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent"><code>fetch</code> event handler</a>, you can use that function to provide that fallback image when requests for images fail at the network:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">self.addEventListener( "fetch", event =&gt; {
  const request = event.request;
  if ( request.headers.get("Accept").includes("image") ) {
    event.respondWith(
      return fetch( request, { mode: 'no-cors' } )
        .then( response =&gt; {
          return response;
        })
        .catch(
          respondWithFallbackImage
        );
    );
  }
});</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>When the network is available, users get the expected behavior:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172145} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/11/fig1.png?w=960" alt="Screenshot of a component showing a series of user profile images of users who have liked something" class="wp-image-7172145"/><figcaption>Social media avatars are rendered as expected when the network is available.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>But when the network is interrupted, images will be swapped automatically for a fallback, and the user experience is still acceptable:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172144} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/11/fig2-1.png?w=960" alt="Screenshot showing a series of identical generic user images in place of the individual ones which have not loaded" class="wp-image-7172144"/><figcaption>A generic fallback avatar is rendered when the network is unavailable.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>On the surface, this approach may not seem all that helpful in terms of performance since you’ve essentially added an additional image download into the mix. With this system in place, however, some pretty amazing opportunities open up to you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Respect a user’s choice to save data</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Some users reduce their data consumption by entering a “lite” mode or turning on a “data saver” feature. When this happens, browsers will often send a <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Save-Data"><code>Save-Data</code> header</a> with their network requests. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Within your Service Worker, you can look for this header and adjust your responses accordingly. First, you look for the header:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">let save_data = false;
if ( 'connection' in navigator ) {
  save_data = navigator.connection.saveData;
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Then, within your <code>fetch</code> handler for images, you might choose to preemptively respond with the fallback image instead of going to the network at all:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">self.addEventListener( "fetch", event =&gt; {
  const request = event.request;
  if ( request.headers.get("Accept").includes("image") ) {
    event.respondWith(
      if ( save_data ) {
        return respondWithFallbackImage();
      }
      // code you saw previously
    );
  }
});</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>You could even take this a step further and tune <code>respondWithFallbackImage()</code> to provide alternate images based on what the original request was for. To do that you’d define several fallbacks globally in the Service Worker:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">const fallback_avatar = "/i/fallbacks/avatar.svg",
      fallback_image = "/i/fallbacks/image.svg";</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Both of those files should then be cached during the Service Worker install event:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">return cache.addAll( [
  fallback_avatar,
  fallback_image
]);</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Finally, within <code>respondWithFallbackImage()</code> you could serve up the appropriate image based on the URL being fetched. In my site, the avatars are pulled from <a href="https://webmention.io">Webmention.io</a>, so I test for that.</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">function respondWithFallbackImage( url ) {
  const image = avatars.test( /webmention\.io/ ) ? fallback_avatar
                                                 : fallback_image;
  return caches.match( image );
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>With that change, I’ll need to update the <code>fetch</code> handler to pass in <code>request.url</code> as an argument to <code>respondWithFallbackImage()</code>. Once that’s done, when the network gets interrupted I end up seeing something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172143} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/11/fig3.png?w=960" alt="Screenshot showing a blog comment with a generic user profile image and image placeholder where the network could not load the actual images" class="wp-image-7172143"/><figcaption>A webmention that contains both an avatar and an embedded image will render with two different fallbacks when the Save-Data header is present.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next, we need to establish some general guidelines for handling media assets—based on the situation, of course.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The caching strategy: prioritize certain media</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my experience, media—especially images—on the web tend to fall into three categories of necessity. At one end of the spectrum are elements that don’t add meaningful value. At the other end of the spectrum are critical assets that <em>do</em> add value, such as charts and graphs that are essential to understanding the surrounding content. Somewhere in the middle are what I would call “nice-to-have” media. They <em>do</em> add value to the core experience of a page but are not critical to understanding the content.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you consider your media with this division in mind, you can establish some general guidelines for handling each, based on the situation. In other words, a caching strategy. </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure>
  <table>
    <caption>Media loading strategy, broken down by how critical an asset is to understanding an interface</caption>
    <thead>
      <tr>
        <th scope="col">Media category</th>
        <th scope="col">Fast connection</th>
        <th scope="col"><code>Save-Data</code></th>
        <th scope="col">Slow connection</th>
        <th scope="col">No network</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td data-title="Media category"><b>Critical</b></td>
        <td colspan="3" data-title="Fast connection, Save-Data, Slow Connection">Load media</td>
        <td data-title="No network">Replace with placeholder</td>
      </tr>
      <tr>
        <td data-title="Media category"><b>Nice-to-have</b></td>
        <td data-title="Fast connection">Load media</td>
        <td colspan="3" data-title="Save-Data, Slow connection, No network">Replace with placeholder</td>
      </tr>
      <tr>
        <td data-title="Media category"><b>Non-critical</b></td>
        <td colspan="4" data-title="Fast connection, Save-Data, Slow connection, No network">Remove from content entirely</td>
      </tr>
    </tbody>
  </table>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>When it comes to disambiguating the critical from the nice-to-have, it’s helpful to have those resources organized into separate directories (or similar). That way we can add some logic into the Service Worker that can help it decide which is which. For example, on my own personal site, critical images are either self-hosted or come from the website for <a href="https://adaptivewebdesign.info">my book</a>. Knowing that, I can write regular expressions that match those domains:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">const high_priority = [
    /aaron\-gustafson\.com/,
    /adaptivewebdesign\.info/
  ];</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>With that <code>high_priority</code> variable defined, I can create a function that will let me know if a given image request (for example) is a high priority request or not:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">function isHighPriority( url ) {
  // how many high priority links are we dealing with?
  let i = high_priority.length;
  // loop through each
  while ( i-- ) {
    // does the request URL match this regular expression?
    if ( high_priority[i].test( url ) ) {
      // yes, it’s a high priority request
      return true;
    }
  }
  // no matches, not high priority
  return false;
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Adding support for prioritizing media requests only requires adding a new conditional into the <code>fetch</code> event handler, like we did with <code>Save-Data</code>. Your specific recipe for network and cache handling will likely differ, but here was <a href="https://github.com/aarongustafson/aaron-gustafson.com/blob/master/_javascript/serviceworker/fetch.js#L162-L219">how I chose to mix in this logic within image requests</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">// Check the cache first
  // Return the cached image if we have one
  // If the image is not in the cache, continue

// Is this image high priority?
if ( isHighPriority( url ) ) {

  // Fetch the image
    // If the fetch succeeds, save a copy in the cache
    // If not, respond with an "offline" placeholder

// Not high priority
} else {

  // Should I save data?
  if ( save_data ) {

    // Respond with a "saving data" placeholder

  // Not saving data
  } else {

    // Fetch the image
      // If the fetch succeeds, save a copy in the cache
      // If not, respond with an "offline" placeholder
  }
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>We can apply this prioritized approach to many kinds of assets. We could even use it to control which pages are served cache-first vs. network-first.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Keep the cache tidy</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The&nbsp; ability to control which resources are cached to disk is a huge opportunity, but it also carries with it an equally huge responsibility not to abuse it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Every caching strategy is likely to differ, at least a little bit. If we’re publishing a book online, for instance, it might make sense to cache all of the chapters, images, etc. for offline viewing. There’s a fixed amount of content and—assuming there aren’t a ton of heavy images and videos—users will benefit from not having to download each chapter separately.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On a news site, however, caching every article and photo will quickly fill up our users’ hard drives. If a site offers an indeterminate number of pages and assets, it’s <em>critical</em> to have a caching strategy that puts hard limits on how many resources we’re caching to disk.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One way to do this is to create several different blocks associated with caching different forms of content. The more ephemeral content caches can have strict limits around how many items can be stored. Sure, we’ll still be bound to the storage limits of the device, but do we really want our website to take up 2 GB of someone’s hard drive?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here’s an example, again from my own site:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">const sw_caches = {
  static: {
    name: `${version}static`
  },
  images: {
    name: `${version}images`,
    limit: 75
  },
  pages: {
    name: `${version}pages`,
    limit: 5
  },
  other: {
    name: `${version}other`,
    limit: 50
  }
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Here I’ve defined several caches, each with a <code>name</code> used for addressing it in the Cache API and a <code>version</code> prefix. The <code>version</code> is defined elsewhere in the Service Worker, and allows me to purge all caches at once if necessary.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the exception of the <code>static</code> cache, which is used for static assets, every cache has a <code>limit</code> to the number of items that may be stored. I only cache the most recent 5 pages someone has visited, for instance. Images are limited to the most recent 75, and so on. This is an approach that <a href="https://adactio.com/">Jeremy Keith</a> outlines in his fantastic book <a href="https://abookapart.com/products/going-offline"><em>Going Offline</em></a> (which you should really read if you haven’t already—<a href="https://alistapart.com/article/going-offline/">here’s a sample</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With these cache definitions in place, I can clean up my caches periodically and prune the oldest items. Here’s Jeremy’s recommended code for this approach:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">function trimCache(cacheName, maxItems) {
  // Open the cache
  caches.open(cacheName)
  .then( cache =&gt; {
    // Get the keys and count them
    cache.keys()
    .then(keys =&gt; {
      // Do we have more than we should?
      if (keys.length &gt; maxItems) {
        // Delete the oldest item and run trim again
        cache.delete(keys[0])
        .then( () =&gt; {
          trimCache(cacheName, maxItems)
        });
      }
    });
  });
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>We can trigger this code to run whenever a new page loads. By running it in the Service Worker, it runs in a separate thread and won’t drag down the site’s responsiveness. We trigger it by posting a message (using <code>postMessage()</code>) to the Service Worker from the main JavaScript thread:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">// First check to see if you have an active service worker
if ( navigator.serviceWorker.controller ) {
  // Then add an event listener
  window.addEventListener( "load", function(){
    // Tell the service worker to clean up
    navigator.serviceWorker.controller.postMessage( "clean up" );
  });
}</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>The final step in wiring it all up is setting up the Service Worker to receive the message:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure><pre><code class="language-javascript">addEventListener("message", messageEvent =&gt; {
  if (messageEvent.data == "clean up") {
    // loop though the caches
    for ( let key in sw_caches ) {
      // if the cache has a limit
      if ( sw_caches[key].limit !== undefined ) {
        // trim it to that limit
        trimCache( sw_caches[key].name, sw_caches[key].limit );
      }
    }
  }
});</code></pre></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Here, the Service Worker listens for inbound messages and responds to the “clean up” request by running <code>trimCache()</code> on each of the cache buckets with a defined <code>limit</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This approach is by no means elegant, but it works. It would be far better to make decisions about purging cached responses based on how frequently each item is accessed and/or how much room it takes up on disk. (Removing cached items based purely on when they were cached isn’t nearly as useful.) Sadly, we don’t have that level of detail when it comes to inspecting the caches…yet. I’m actually working to address this limitation in the Cache API right now.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Your users always come first</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The technologies underlying Progressive Web Apps are continuing to mature, but even if you aren’t interested in turning your site into a PWA, there’s so much you can do today to improve your users’ experiences when it comes to media. And, as with every other form of inclusive design, it starts with centering on your users who are most at risk of having an awful experience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Draw distinctions between critical, nice-to-have, and superfluous media. Remove the cruft, then optimize the bejeezus out of each remaining asset. Serve your media in multiple formats and sizes, prioritizing the smallest versions first to make the most of high latency and slow connections. If your users say they want to save data, respect that and have a fallback plan in place. Cache wisely and with the utmost respect for your users’ disk space. And, finally, audit your caching strategies regularly—especially when it comes to large media files.Follow these guidelines, and every one of your users—from folks rocking a <a href="https://www.jio.com/en-in/jiophone2">JioPhone</a> on a rural mobile network in India to people on a high-end gaming laptop wired to a 10 Gbps fiber line in Silicon Valley—will thank you.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Browsers, Code, The Server Side]]>				</dc:subject>

				<dc:date>
					2019-11-21T14:30:06+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Responsible JavaScript: Part III]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/jeremy-wagner/">Jeremy Wagner</a>					</author>

				<link>
					https://alistapart.com/article/responsible-javascript-part-3/				</link>

				<guid>
					https://alistapart.com/article/responsible-javascript-part-3/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>You’ve done everything you thought was possible to address your website’s JavaScript problem. You <a href="https://alistapart.com/article/responsible-javascript-part-1/">relied on the web platform where you could</a>. You <a href="https://alistapart.com/article/responsible-javascript-part-2/#section9">sidestepped Babel</a> and <a href="https://alistapart.com/article/responsible-javascript-part-2/#section7">found smaller framework alternatives</a>. You whittled your application code down to its most streamlined form possible. Yet, things are just not fast enough. When websites fail to perform the way we as designers and developers expect them to, we inevitably turn on ourselves:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"center"} -->
<p style="text-align:center"><em>“What are we failing to do?” “What can we do with the code we have written?” “Which parts of our architecture are failing us?”</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These are valid inquiries, as a fair share of performance woes <em>do</em> originate from our own code. Yet, assigning blame solely to ourselves blinds us to the unvarnished truth that a sizable onslaught of our performance problems comes from the outside.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>When the third wheel crashes the party</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Convenience always has a price, and <a href="https://httparchive.org/reports/state-of-javascript#bytesJs">the web is wracked by our collective preference for it</a>.&nbsp; JavaScript, in particular, is employed in a way that suggests a rapidly increasing tendency to outsource whatever it is that We (the first party) don’t want to do. At times, this is a necessary decision; it makes perfect financial and operational sense in many situations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But make no mistake, <a href="https://www.thirdpartyweb.today/">third-party JavaScript is <em>never</em> cheap</a>. It’s a devil’s bargain where vendors seduce you with solutions to your problem, yet conveniently fail to remind you that you have little to no control over the side effects that solution introduces. If a third-party provider adds features to their product, <em>you</em> bear the brunt. If they change their infrastructure, <em>you</em> will feel the effects of it. Those who use your site <em>will</em> become frustrated, and they aren’t going to bother grappling with an intolerable user experience. You can mitigate some of the symptoms of third parties, but you can’t cure the ailment unless you remove the solutions altogether—and that’s not always practical or possible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this installment of <em>Responsible JavaScript</em>, we’ll take a <em>slightly</em> less technical approach than in the <a href="https://alistapart.com/article/responsible-javascript-part-2/">previous installment</a>. We are going to talk more about the human side of third parties. Then, we’ll go down some of the technical avenues for how you might go about tackling the problem.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Hindered by convenience</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When we talk about the sorry state of the web today, <a href="https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/">some of us are quick to point out the role of <em>developer convenience</em></a> in contributing to the problem. While I share the view that developer convenience has a tendency to harm the user experience, they’re not the only kind of convenience that can turn a website into a sluggish, janky mess.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Operational conveniences</em> can become precursors to a very thorny sort of technical debt. These conveniences are what we reach for when we can’t solve a pervasive problem on our own. They represent third-party solutions that address problems in the absence of architectural flexibility and/or adequate development resources.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Whenever an inconvenience arises, <em>that</em> is the time to have the discussion around how to tackle it in a way that’s comprehensive. So let’s talk about what it looks like to tackle that sort of scenario from a more human angle.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The problem is pain</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The reason third parties come into play in the first place is pain. When a decision maker in an organization has felt enough pain around a certain problem, they’re going to do a <em>very human thing</em>, which is to find the fastest way to make that pain <em>go away</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Markets will always find ways to address these pain points, even if the way they do so isn’t sustainable or even remotely helpful. Web accessibility overlays—third-party scripts that purport to automatically fix accessibility issues—are among the worst offenders. First, you fork over your money for <a href="https://blog.tenon.io/web-accessibility-overlays-dont-work/">a fix that doesn’t <em>fix</em> anything</a>. Then you pay a wholly different sort of price when that “fix” harms the usability of your website. This is not a screed to discredit the usefulness of the tools some third-party vendors provide, but to illustrate how the adoption of third-party solutions happens, even those that are objectively awful</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172133} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/11/fig-1.png?fit=960%2C561" alt="A depiction of a long task in a flame chart from the performance panel in Chrome DevTools." class="wp-image-7172133" /><figcaption>A Chrome performance trace of a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Long_Tasks_API#Long_task">long task</a> kicked off by a third party’s web accessibility overlay script. The task occupies the main thread for roughly 600 ms on a 2017 <a href="https://en.wikipedia.org/wiki/MacBook_(2015%E2%80%932019)">Retina MacBook</a>.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>So when a vendor rolls up and promises to solve the very painful problem we’re having, there’s a good chance someone is going to nibble. If that someone is high enough in the hierarchy, they’ll exert downward pressure on others to buy in—if not circumvent them entirely in the decision-making process. Conversely, adoption of a third-party solution can also occur when those in the trenches are under pressure and lack sufficient resources to create the necessary features themselves.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Whatever the catalyst, it pays to gather your colleagues and collectively form a plan for navigating and mitigating the problems you’re facing.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Create a mitigation plan</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once people in an organization have latched onto a third-party solution, however ill-advised, the difficulty you’ll encounter in forcing a course change will depend on how urgent a need that solution serves. In fact, you shouldn’t try to convince proponents of the solution that their decision was wrong. Such efforts almost always backfire and can make people feel attacked and more resistant to what you’re telling them. Even worse, those efforts could create acrimony where people stop listening to each other completely, and <em>that</em> is a breeding ground for far worse problems to develop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Grouse and commiserate amongst your peers if you must—as I myself have often done—but put your grievances aside and <a href="https://csswizardry.com/2018/05/identifying-auditing-discussing-third-parties/#discussing">come up with a mitigation plan</a> to guide your colleagues toward better outcomes. The nooks and crannies of your specific approach will depend on the third parties themselves and the structure of the organization, but the bones of it could look like the following series of questions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What problem does this solution address?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There’s a reason why a third-party solution was selected, and this question will help you suss out whether the rationale for its adoption is sound. Remember, there are times decisions are made when all the necessary people are not in the room. You might be in a position where you have to react to the aftermath of that decision, but the answer to this question will lead you to a natural follow-up.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How long do we intend to use the solution?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This question will help you identify the solution’s shelf life. Was it introduced as a bandage, with the intent to remove it once the underlying problem has been addressed, such as in the case of an accessibility overlay? Or is the need more long-term, such as the data provided by an A/B testing suite? The other possibility is that the solution can never be effectively removed because it serves a crucial purpose, as in the case of analytics scripts. <a href="https://alistapart.com/article/the-foundation-of-technical-leadership/#section3">It’s like throwing a mattress in a swimming pool</a>: it’s easy to throw in, but nigh impossible to drag back out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In any case, you can’t know if a third-party script is here to stay if you don’t ask. Indeed, if you find out the solution is temporary, you can form a plan to eventually remove it from your site once the underlying problem it addresses has been resolved.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Who’s the point of contact if issues arise?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When a third-party solution is put into place, someone <em>must</em> be the point of contact for when—not <em>if</em>—issues arise.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’ve seen what happens (far too often) when a third-party script gets out of control. For example, when a tag manager or an A/B testing framework’s JavaScript grows slowly and insidiously because marketers aren’t cleaning out old tags or completed A/B tests. It’s for precisely these reasons that responsibility needs to be attached to a specific person in your organization for third-party solutions currently in use on your site. What that responsibility entails will differ in every situation, but could include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>periodic monitoring of the third-party script’s footprint;</li><li>maintenance to ensure the third-party script doesn’t grow out of control;</li><li>occasional meetings to discuss the future of that vendor’s relationship with your organization;</li><li>identification of overlaps of functionality between multiple third parties, and if potential redundancies can be removed;</li><li>and ongoing research, especially to identify speedier alternatives that may act as better replacements for slow third-party scripts.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The idea of responsibility in this context should never be an onerous, draconian obligation you yoke your teammates with, but rather an exercise in encouraging mindfulness in your colleagues. Because without mindfulness, a third-party script’s ill effects on your website <em>will</em> be overlooked until it becomes a grumbling ogre in the room that can no longer be ignored. Assigning responsibility for third parties can help to prevent that from happening.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Ensuring responsible usage of third-party solutions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you can put together a mitigation plan and get everyone on board, the work of ensuring the responsible use of third-party solutions can begin. Luckily for you, the actual technical work will be easier than trying to wrangle people. So if you’ve made it this far, all it will take to get results is time and persistence.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Load only what’s necessary</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It may seem obvious, but load only what’s necessary. Judging by the amount of unused first-party JavaScript I see loaded—let alone <em>third-party</em> JavaScript—it’s clearly a problem. It’s like trying to clean your house by stuffing clutter into the closets. Regardless of whether they’re actually needed, it’s not uncommon for third-party scripts to be loaded on every single page, so refer to your point of contact to figure out which pages need which third-party scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As an example, one of my past clients used a popular third-party tool across multiple brand sites to get a list of retailers for a given product. It demonstrated clear value, but that script only needed to be on a site’s product detail page. In reality, it was frequently loaded on <em>every</em> page. Culling this script from pages where it didn’t belong significantly boosted performance for non-product pages, which ostensibly reduced the friction on the conversion path.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Figuring out which pages need which third-party scripts requires you to do some decidedly untechnical work. You’ll actually have to get up from your desk and talk to the person who has been assigned responsibility for the third-party solution you’re grappling with. This is very difficult work for me, but it’s rewarding when good-faith collaboration happens, <em>and</em> good outcomes are realized as a result.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Self-host your third-party scripts</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This advice isn’t a secret by any stretch. <a href="https://alistapart.com/article/responsible-javascript-part-2/#section6">I even touched on it</a> in the previous installment of this series, but it needs to be shouted from the rooftops at every opportunity: you should <a href="https://csswizardry.com/2019/05/self-host-your-static-assets/">self-host as many third-party resources</a> as possible. Whether this is feasible depends on the third-party script in question.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Is it some framework you’re grabbing from <a href="https://developers.google.com/speed/libraries">Google’s hosted libraries</a>, <a href="https://cdnjs.com/">cdnjs</a>, or other similar provider? Self-host that sucker <em>right now</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://medium.com/caspertechteam/we-shaved-1-7-seconds-off-casper-com-by-self-hosting-optimizely-2704bcbff8ec">Casper found a way to self-host their Optimizely script</a> and significantly reduced their start render time for their trouble. It really drives home the point that a major detriment of third-party resources is the fact that their mere existence on other servers is one of the worst performance bottlenecks we encounter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you’re looking to self-host an analytics solution or a similar sort of script, there’s a higher level of difficulty to contend with to self-host it. You may find that some third-party scripts simply can’t be self-hosted, but that doesn’t mean it isn’t worth the trouble to find out. If you find that self-hosting isn’t an option for a third-party script, don’t fret. There are other mitigations you can try.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Mask latency of cross-origin connections</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you can’t self-host your third-party scripts, the next best thing is to preconnect to servers that host them. WebPageTest’s Connection View does a fantastic job of showing you which servers your site gathers resources from, as well as the latency involved in establishing connections to them.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172134} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/11/fig2.png" alt="A screenshot of WebPageTest's connection view, which visualizes the latency involved with all the servers that serve content for a given page in a waterfall chart." class="wp-image-7172134" /><figcaption>WebPageTest’s Connection View shows all the different servers a page requests resources from during load.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><a href="https://web.dev/uses-rel-preconnect">Preconnections</a> are effective because they establish connections to third-party servers before the browser would otherwise discover them in due course. Parsing HTML takes time, and parsers are often blocked by stylesheets and other scripts. Wherever you can’t self-host third-party scripts, preconnections make perfect sense.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Maybe don’t preload third-party scripts</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content">Preloading resources</a> is one of those things that sounds fantastic at first—until you consider <a href="https://andydavies.me/blog/2019/02/12/preloading-fonts-and-the-puzzle-of-priorities/">its potential to backfire</a>, as <a href="https://andydavies.me/">Andy Davies</a> points out. If you’re unfamiliar with preloading, it’s similar to preconnecting but goes a step further by instructing the browser to fetch a particular resource far sooner than it ordinarily would.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The drawback of preloading is that while it’s great for ensuring a resource gets loaded as soon as possible, it changes the discovery order of that resource. Whenever we do this, we’re implicitly saying that other resources are less important—including resources crucial to rendering or even core functionality.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s probably a safe bet that most of your third-party code is not as crucial to the functionality of your site as your own code. That said, if you <em>must</em> preload a third-party resource, ensure you’re only doing so for third-party scripts that are critical to page rendering.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you do find yourself in a position where your site’s initial rendering depends on a third-party script, refer to your mitigation plan to see what you can do to eliminate or ameliorate your dependence on it. Depending on a third party for core functionality is never a good position to be in, as you’re relinquishing a lot of control to others who might not have your best interests in mind.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Lazy load non-essential third-party scripts</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://alistapart.com/article/the-best-request-is-no-request-revisited/">The best request is no request</a>. If you have a third-party script that doesn’t need to be loaded right away, consider lazy loading it with an <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer</a>. Here’s what it might look like to <a href="https://codepen.io/malchata/pen/JjjGOGZ">lazy load a Facebook Like button</a> when it’s scrolled into the viewport:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<pre id="snippet1" class="wp-block-code language-javascript"><code class="language-javascript">
let loadedFbScript = false;

const intersectionListener = new IntersectionObserver(entries =&gt; {
  entries.forEach(entry =&gt; {
    if ((entry.isIntersecting || entry.intersectionRatio) &amp;&amp; !loadedFbScript) {
      const scriptEl = document.createElement("script");

      scriptEl.defer = true;
      scriptEl.crossOrigin = "anonymous";
      scriptEl.src = "https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v3.0";
      scriptEl.onload = () =&gt; {
        loadedFbScript = true;
      };
      
      document.body.append(scriptEl);
    }
  });
});

intersectionListener.observe(document.querySelector(".fb-like"));
</code>
</pre>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>In the above snippet, we first set a variable to track whether we’ve loaded the Facebook SDK JavaScript. After that, an <code>IntersectionListener</code> is created that checks whether the observed element is in the viewport, and whether the Facebook SDK has been loaded. If the SDK JavaScript hasn’t been loaded, a reference to it is injected into the DOM, which will kick off a request for it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You’re not going to be able to lazy load every third-party script. Some of them simply need to do their work at page load time, or otherwise can’t be deferred. Regardless, do the detective work to see if it’s possible to lazy load at least some of your third-party JavaScript.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of the common concerns I hear from coworkers when I suggest lazy loading third-party scripts is how it can delay whatever interactions the third party provides. That’s a reasonable concern, because when you lazy load anything, a noticeable delay may occur as the resource loads. You can get around this to some extent with <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ">resource prefetching</a>. This is different than preloading, which we discussed earlier. Prefetching consumes a comparable amount of data, yes, but prefetched resources are given lower priority and are less likely to contend for bandwidth with critical resources.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Staying on top of the problem</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Keeping an eye on your third-party JavaScript requires mindfulness bordering on hypervigilance. When you recognize poor performance for the technical debt that it truly is, you’ll naturally slip into a frame of mind where you’ll recognize and address it as you would any other kind of technical debt.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Staying on top of third parties <em>is</em> refactoring—a sort that requires you to periodically perform tasks such as cleaning up tag managers and A/B tests, consolidating third-party solutions, eliminating any that are no longer needed, and applying the coding techniques discussed above. Moreover, you’ll need to work with your team to address this technical debt on a cyclical basis. This kind of work can’t be automated, so yes, you’ll need to knuckle down and have face-to-face, synchronous conversations with actual people.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you’re already in the habit of scheduling “cleanup sprints” on some interval, then <em>that</em> is the time and space for you to address performance-related technical debt, regardless of whether it involves third- or first-party code. There’s a time for feature development, but that time should not comprise the whole of your working hours. Development shops that focus only on feature development are destined to be wholly consumed by the technical debt that will inevitably result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So it will come to pass that in the fourth and final installment of this series we’ll discuss what it means to do the hard work of using JavaScript responsibly in the context of process. Therein, we’ll explore what it takes to unite your organization under the banner of making your website faster and more accessible, and therefore more usable for everyone, everywhere.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Application Development, Code, Industry &amp; Business, JavaScript, State of the Web]]>				</dc:subject>

				<dc:date>
					2019-11-14T14:30:42+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[The Untapped Power of Vulnerability &#038; Transparency in Content Strategy]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/travis-mcknight/">Travis McKnight</a>					</author>

				<link>
					https://alistapart.com/article/the-untapped-power-of-vulnerability-transparency-in-content-strategy/				</link>

				<guid>
					https://alistapart.com/article/the-untapped-power-of-vulnerability-transparency-in-content-strategy/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>In marketing, transparency and vulnerability are unjustly stigmatized. The words conjure illusions of being frightened, imperfect, and powerless. And for companies that shove carefully curated personas in front of users, little is more terrifying than losing control of how people perceive the brand.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s shatter this illusioned stigma. <em>Authentic vulnerability and transparency are strengths masquerading as weaknesses</em>. And companies too scared to embrace both traits in their content forfeit bona fide user-brand connections for often shallow, misleading engagement tactics that create fleeting relationships.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Transparency and vulnerability are closely entwined concepts, but each one engages users in a unique way. Transparency is how much information you share, while vulnerability is the truth and meaning behind your actions and words. Combining these ideas is the trick to creating empowering and meaningful content. You can’t tell true stories of vulnerability without transparency, and to be authentically transparent you must be vulnerable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To be vulnerable, your brand and its content must be brave, genuine, humble, and open, all of which are traits that promote long-term customer loyalty. And if you’re transparent with users about who you are and about your business practices, you’re courting <a href="https://www.labelinsight.com/Transparency-ROI-Study">94 percent of consumers</a> who say they’re more loyal to brands that offer complete openness and <a href="https://martechtoday.com/report-customers-are-more-loyal-to-companies-that-are-transparent-on-social-media-223053">89 percent of people</a> who say they give transparent companies a second chance after a bad experience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For many companies, being completely honest and open with their customers—or employees, in some cases—only happens in a crisis. Unfortunately for those businesses, using vulnerability and transparency only as a crisis management strategy diminishes how sincere they appear and can <a href="https://hbr.org/2018/01/sorry-is-not-enough">reduce customer satisfaction</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unlocking the potential of being transparent and vulnerable with users isn’t a one-off tactic or quick-fix emergency response tool—it’s a commitment to intimate storytelling that embraces a user’s emotional and psychological needs, which builds a meaningful connection between the storyteller and the audience.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The three storytelling pillars of vulnerable and transparent content</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In her book, <cite>Braving the Wilderness</cite>, sociologist Brené Brown explains that vulnerability connects us at an emotional level. She says that when we recognize someone is being vulnerable, we invest in their story and begin to develop an emotional bond. This interwoven connection encourages us to experience the storyteller’s joy and pain, and then creates a sense of community and common purpose among the person being vulnerable and the people who acknowledge that vulnerability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Three pillars in a company’s lifecycle embrace this bond and provide an outline for telling stories worthy of a user’s emotional investment. The pillars are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>the origins of a company, product, idea, or situation;</li><li>intimate narratives about customers’ life experiences;</li><li>and insights about product success and failure.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Origin stories</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>An origin story spins a transparent tale about how a company, product, service, or idea is created. It is often told by a founder, CEO, or industry innovator. This pillar is usually used as an authentic way to provide crisis management or as a method to change how users feel about a topic, product, or your brand.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Customers’ life experiences</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While vulnerable origin stories do an excellent job of making users trust your brand, telling a customer’s personal life story is arguably the most effective way to use vulnerability to entwine a brand with someone’s personal identity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unlike an origin story, the customer experiences pillar is focused on being transparent about who your customers are, what they’ve experienced, and how those journeys align with values that matter to your brand. Through this lens, you’ll empower your customers to tell emotional, meaningful stories that make users feel vulnerable in a positive way. In this situation, your brand is often a storytelling platform where users share their story with the brand and fellow customers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Product and service insights</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Origin stories make your brand trustworthy in a crisis, and customers’ personal stories help users feel an intimate connection with your brand’s persona and mission. The last pillar, product and service insights, combines the psychological principles that make origin and customer stories successful. The outcome is a vulnerable narrative that rallies users’ excitement about, and emotional investment in, what a company sells or the goals it hopes to achieve.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Vulnerability, transparency, and the customer journey</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The three storytelling pillars are crucial to embracing transparency and vulnerability in your content strategy because they let you target users at specific points in their journey. By embedding the pillars in each stage of the customer’s journey, you teach users about who you are, what matters to you, and why they should care.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For our purposes, let’s define the user journey as:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>awareness;</li><li>interest;</li><li>consideration;</li><li>conversion;</li><li>and retention.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Awareness</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>People give each other <a href="https://www.forbes.com/sites/serenitygibbons/2018/06/19/you-have-7-seconds-to-make-a-first-impression-heres-how-to-succeed/#5e47a32856c2">seven seconds</a> to make a good first impression. We’re not so generous with brands and websites. After discovering your content, users determine if it’s trustworthy within <a href="https://www.psychologicalscience.org/observer/how-many-seconds-to-a-first-impression">one-tenth of a second</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Page design and aesthetics are often <a href="https://conversionxl.com/blog/first-impressions-matter-the-importance-of-great-visual-design/">the determining factors in these split-second choices</a>, but the information users discover after that decision shapes their long-term opinions about your brand. This snap judgement is why transparency and vulnerability are crucial within awareness content.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you only get one chance to make a positive first impression with your audience, what content is going to be more memorable?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Typical marketing “fluff” about how your brand was built on a shared vision and commitment to unyielding customer satisfaction and quality products? Or an upfront, authentic, and honest story about the trials and tribulations you went through to get where you are now?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Buffer, a social media management company that helped pioneer <a href="https://en.wikipedia.org/wiki/Radical_transparency">the <i>radical transparency</i> movement</a>, chose the latter option. The outcome created awareness content that leaves a positive lasting impression of the brand.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In 2016, Joel Gascoigne, cofounder and CEO of Buffer, used an origin story to discuss the mistakes he and his company made that resulted in laying off 10 employees.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the blog post “<a href="https://open.buffer.com/layoffs-and-moving-forward/">Tough News: We’ve Made 10 Layoffs. How We Got Here, the Financial Details and How We’re Moving Forward</a>,” Gascoigne wrote about Buffer’s over-aggressive growth choices, lack of accountability, misplaced trust in its financial model, explicit risk appetite, and overenthusiastic hiring. He also discussed what he learned from the experience, the changes Buffer made based on these lessons, the consequences of those changes, and next steps for the brand.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Gascoigne writes about each subject with radical honesty and authenticity. Throughout the article, he’s personable and relatable; his tone and voice make it obvious he’s more concerned about the lives he’s irrevocably affected than the public image of his company floundering. Because Gascoigne is so transparent and vulnerable in the blog post, it’s easy to become invested in the narrative he’s telling. The result is an article that feels more like a deep, meaningful conversation over coffee instead of a carefully curated, PR-approved response.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Yes, Buffer used this origin story to confront a PR crisis, but they did so in a way that encouraged users to trust the brand. Buffer chose to show up and be seen when they had no control over the outcome. And because Gascoigne used vulnerability and transparency to share the company’s collective pain, the company reaped positive press coverage and support on social media—further improving brand awareness, user engagement, and customer loyalty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, awareness content isn’t always brand focused. Sometimes, smart awareness content uses storytelling to teach users and shape their worldviews. The <a href="https://www.3m.com/3M/en_US/state-of-science-index-survey/about-2019-survey/">2019 <cite>State of Science Index</cite></a> is an excellent example.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The annual <cite>State of Science Index</cite> evaluates how the global public perceives science. The 2019 report shows that 87 percent of people acknowledge that science is necessary to solve the world’s problems, but 33 percent are skeptical of science and believe that scientists cause as many problems as they solve. Furthermore, 57 percent of respondents are skeptical of science because of scientists’ conflicting opinions about topics they don’t understand.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3M, the multinational science conglomerate that publishes the report, says the solution for this anti-science mindset is to promote intimate storytelling among scientists and layfolk.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3M creates an origin story with its awareness content by focusing on the ins and outs of scientific research. The company is open and straightforward with its data and intentions, eliminating any second guesses users might have about the content they’re digesting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The company kicked off this strategy on three fronts, and each storytelling medium interweaves the benefits of vulnerability and transparency by encouraging researchers to tell stories that lead with how their findings benefit humanity. Every story 3M tells focuses on breaking through barriers the average person faces when they encounter science and encouraging scientists to be vulnerable and authentic with how they share their research.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, 3M began a podcast series known as <a href="https://www.3m.com/3M/en_US/state-of-science-index-survey/science-champion-podcasts/"><cite>Science Champions</cite></a>. In the podcast, 3M Chief Science Advocate Jayshree Seth interviews scientists and educators about the global perception of science and how science and scientists affect our lives. The show is currently in its second season and discusses a range of topics in science, technology, engineering, and math.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, the company worked with science educators, journalist Katie Couric, actor Alan Alda, and former NASA astronaut Scott Kelly to develop the free <a href="https://multimedia.3m.com/mws/media/1667242O/sosi-3-13-toolkit-pdf.pdf"><cite>Scientists as Storytellers Guide</cite></a>. The ebook helps STEM researchers improve how and why they communicate their work with other people—with a special emphasis on being empathetic with non-scientists. The guide breaks down how to develop communications skills, overcome common storytelling challenges, and learn to make science more accessible, understandable, and engaging for others.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Last, 3M created a film series called <a href="https://www.3m.com/3M/en_US/state-of-science-index-survey/insights/beyond-the-beaker/"><cite>Beyond the Beaker</cite></a> that explores the day-to-day lives of 3M scientists. In the short videos, scientists give the viewer a glimpse into their hobbies and home life. The series showcases how scientists have diverse backgrounds, hobbies, goals, and dreams.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unlike Buffer, which benefits directly from its awareness content, 3M’s three content mediums are designed to create a long-term strategy that changes how people understand and perceive science, by spreading awareness through third parties. It’s too early to conclude that the strategy will be successful, but it’s off to a good start. <cite>Science Champions</cite> often tops “best of” podcast lists for science lovers, and the <cite>Scientists as Storytellers Guide</cite> is a popular resource among public universities.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Interest</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>How do you court new users when word-of-mouth and organic search dominate how people discover new brands? Target their interests.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now, you can be like the hundreds of other brands that create a “10 best things” list and hope people stumble onto your content organically and like what they see. Or, you can use content to engage with people who are passionate about your industry and have genuine, open discussions about the topics that matter to you both.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The latter option is a perfect fit for the product and service insights pillar, and the customers’ life experiences pillar.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To succeed in these pillars you must balance discussing the users’ passions and how your brand plays into that topic against appearing disingenuous or becoming too self-promotional.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nonprofits have an easier time walking this taut line because people are less judgemental when engaging with NGOs, but it’s rare for a for-profit company to achieve this balance. SpaceX and Thinx are among the few brands that are able to walk this tightrope.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Thinx, a women’s clothing brand that sells period-proof underwear, uses its blog to generate awareness, interest, and consideration content via the customers’ life experiences pillar. The blog, aptly named <a href="https://www.shethinx.com/pages/thinx-periodical/"><cite>Periodical</cite></a>, relies on transparency and vulnerability as a cornerstone to engage users about reproductive and mental health.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Toni Brannagan, Thinx’s content editor, says the brand embraces transparency and vulnerability by sharing diverse ideas and personal experiences from customers and experts alike, not shying away from sensitive subjects and never misleading users about Thinx or the subjects <cite>Periodical</cite> discusses.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a company focused on women’s healthcare, the product Thinx sells is political by nature and entangles the brand with themes of shame, cultural differences, and personal empowerment. Thinx’s strategy is to tackle these subjects head-on by having vulnerable conversations in its branding, social media ads, and <cite>Periodical</cite> content.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Vulnerability and transparency play a role because you can’t share authentic diverse ideas and experiences about those things—shame, cultural differences, and empowerment—without it,” Brannagan says.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A significant portion of Thinx’s website traffic is organic, which means <cite>Periodical</cite>’s interest-driven content may be a user’s first touchpoint with the brand.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“We’ve seen that our most successful organic content is educational, well-researched articles, and also product-focused blogs that answer the questions about our underwear, in a way that’s a little more casual than what’s on our product pages,” Brannagan says. “In contrast, our personal essays and ‘more opinionated’ content performs better on social media and email.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Thanks in part to the blog’s authenticity and open discussions about hard-hitting topics, readers who find the brand through organic search drive the most direct conversions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Conversations with users interested in the industry or topic your company is involved in don’t always have to come from the company itself. Sometimes a single person can drive authentic, open conversations and create endearing user loyalty and engagement.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For a company that relies on venture capital investments, NASA funding, and public opinion for its financial future, crossing the line between being too self-promotional and isolating users could spell doom. But SpaceX has never shied away from difficult or vulnerable conversations. Instead, the company’s founder, Elon Musk, embraces engaging with users interests in public forums like Twitter and press conferences.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172044} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/vulnerability-marketing-fig1.png?w=589" alt="Twitter thread showing an exchange between Elon Musk and a user" class="wp-image-7172044"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Musk’s tweets about SpaceX are unwaveringly authentic and transparent. He often tweets about his thoughts, concerns, and the challenges his companies face. Plus, Musk frequently engages with his Twitter followers and provides candid answers to questions many CEOs avoid discussing. This authenticity has earned him a <a href="https://thewire.in/tech/the-new-institution-called-elon-musk">cult-like following</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172045} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/vulnerability-marketing-fig2.png?w=790" alt="Elon Musk gives an honest, if not flattering, response on Twitter to a user" class="wp-image-7172045"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Musk and SpaceX create conversations that target people’s interests and use vulnerability to equally embrace failure and success. Both the company and its founder give the public and investors an unflinching story of space exploration.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And despite laying off 10 percent of its workforce in January of 2019, SpaceX is flourishing. In May 2019, its <a href="https://www.cnbc.com/2019/05/31/spacex-valuation-33point3-billion-after-starlink-satellites-fundraising.html">valuation had risen to $33.3 billion</a> and reported <a href="https://www.cnbc.com/2019/05/20/spacex-revenue-2-billion-from-rockets-last-year-jefferies-estimate.html">annual revenue exceeded $2 billion</a>. It also earned global media coverage from launching Musk’s Tesla Roadster into space, recently completed a test flight of its Crew Dragon space vehicle, and cemented multiple new payload contracts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By engaging with users on social media and through standard storytelling mediums, Thinx and SpaceX bolster customer loyalty and brand engagement.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Consideration</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Modern consumers argue that ignorance is not bliss. When users are considering converting with a brand, <a href="https://sproutsocial.com/insights/guides/2018-bgr-transparency/">86 percent of consumers say transparency is a deciding factor</a>. Transparency remains crucial even after they convert, with 85 percent of users saying they’ll support a transparent brand during a PR crisis.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your brand must be open, clear, and honest with users; there is no longer another viable option.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how do you remain transparent while trying to sell someone a product? One solution employed by REI and Everlane is to be openly accountable to your brand and your users via the origin stories and product insights pillars.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>REI, a national outdoor equipment retailer, created a <a href="https://www.rei.com/stewardship/outdoor-industry-collaboration">stewardship program</a> that behaves as a multifaceted origin story. The program’s content highlights the company’s history and manufacturing policies, and it lets users dive into the nitty-gritty details about its factories, partnerships, product production methods, manufacturing ethics, and carbon footprint.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172046} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/vulnerability-marketing-fig3.png?w=960" alt="Screenshot of the Collaborating for Good website" class="wp-image-7172046"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>REI also employs a classic <a href="https://www.portent.com/blog/seo/content-hubs-seo-strategy.htm">content hub strategy</a> to let customers find the program and explore its relevant information. From a single landing page, users can easily find the program through the website’s global navigation and then navigate to every tangential topic the program encompasses.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>REI also publishes an annual stewardship report, where users can learn intimate details about how the company makes and spends its money.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172047} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/vulnerability-marketing-fig4.png?w=960" alt="Screenshot of REI's stewardship report" class="wp-image-7172047"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Everlane, a clothing company, is equally transparent about its supply chain. The company promotes an insider’s look into its global factories via product insights stories. These glimpses tell the personal narratives of factory employees and owners, and provide insights into the products manufactured and the materials used. Everlane also <a href="https://www.everlane.com/supply-chain">published details</a> of how they comply with the California Transparency in Supply Chains Act to guarantee ethical working conditions throughout its supply chain, including refusing to partner with human traffickers.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172048} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/vulnerability-marketing-fig5.png?w=960" alt="Screenshot of Everlane's page about the factory in Lima" class="wp-image-7172048"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The crucial quality that Everlane and REI share is they publicize their transparency and encourage users to explore the shared information. On each website, users can easily find information about the company’s transparency endeavors via the global navigation, social media campaigns, and product pages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The consumer response to transparent brands like REI and Everlane is overwhelmingly positive. <a href="https://www.environmentalleader.com/2018/12/study-shows-consumers-are-willing-to-pay-a-premium-for-supply-chain-transparency/">Customers are willing to pay price premiums for the additional transparency</a>, which gives them comfort by knowing they’re purchasing ethical products.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>REI’s ownership model has further propelled the success of its transparency by using it to create unwavering customer engagement and loyalty. As a co-op where customers can “own” part of the company for a one-time $20 membership fee, REI is beholden to its members, many of which pay close attention to its supply chain and the brands REI partners with.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After a deadly school shooting in Parkland, Florida, REI members urged the company to refuse to carry CamelBak products because the brand’s parent company manufactures assault-style weapons. Members argued the partnership violated REI’s supply chain ethics. <a href="https://www.chicagotribune.com/business/ct-biz-rei-vista-outdoor-20180302-story.html">REI listened and halted orders with CamelBak</a>. Members rejoiced and REI earned a significant amount of positive press coverage.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conversion</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Imagine you’ve started incorporating transparency throughout your company, and promote the results to users. Your brand also begins engaging users by telling vulnerable, meaningful stories via the three pillars. You’re seeing great engagement metrics and customer feedback from these efforts, but not much else. So, how do you get your newly invested users to convert?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Provide users with a full-circle experience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you combine the three storytelling pillars with blatant transparency and actively promote your efforts, users often transition from the consideration stage into the conversion state. Best of all, when users convert with a company that already earned their trust on an emotional level, <a href="https://link.springer.com/article/10.1057/palgrave.bm.2550080">they’re more likely to remain loyal to the brand</a> and emotionally invested in its future.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The crucial step in combining the three pillars is consistency. Your brand’s stories must always be authentic and your content must always be transparent. The outdoor clothing brand Patagonia is among the most popular and successful companies to maintain this consistency and excel with this strategy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Patagonia is arguably the most vocal and aggressive clothing retailer when it comes to environmental stewardship and ethical manufacturing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In some cases, the company tells users <em>not to buy its clothing</em> because rampant consumerism harms the environment too much, which they care about more than profits. This level of radical transparency and vulnerability skyrocketed the company’s popularity among environmentally-conscious consumers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In 2011, Patagonia took out a <a href="https://www.patagonia.com/blog/2011/11/dont-buy-this-jacket-black-friday-and-the-new-york-times/">full-page Black Friday ad in the New York Times</a> with the headline “Don’t Buy This Jacket.” In the ad, Patagonia talks about the environmental toll manufacturing clothes requires.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Consider the R2 Jacket shown, one of our best sellers. To make it required 135 liters of water, enough to meet the daily needs (three glasses a day) of 45 people. Its journey from its origin as 60 percent recycled polyester to our Reno warehouse generated nearly 20 pounds of carbon dioxide, 24 times the weight of the finished product. This jacket left behind, on its way to Reno, two-thirds [of] its weight in waste.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The ad encourages users to not buy any new Patagonia clothing if their old, ratty clothes can be repaired. To help, Patagonia launched a supplementary subdomain to its e-commerce website to support its Common Thread Initiative, which eventually got rebranded as the <a href="https://wornwear.patagonia.com/">Worn Wear program</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Patatgonia’s Worn Wear subdomain gets users to engage with the company about causes each party cares about. Through Worn Wear, Patagonia will repair your old gear for free. If you’d rather have new gear, you can instead sell the worn out clothing to Patagonia, and they’ll repair it and then resell the product at a discount. This interaction encourages loyalty and repeat brand-user engagement.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition, the navigation on Patagonia’s main website practically begs users to learn about the brand’s non-profit initiatives and its commitment to ethical manufacturing.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172049} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/vulnerability-marketing-fig6.png?w=960" alt="Screenshot of Patagonia's page on environmental responsibility" class="wp-image-7172049"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Today, <a href="https://crm.org/articles/patagonias-customer-base-and-the-rise-of-an-environmental-ethos">Patagonia is among the most respected, profitable, and trusted consumer brands</a> in the United States.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Retention</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Content strategy expands through nearly every aspect of the marketing stack, including ad campaigns, which take a more controlled approach to vulnerability and transparency. To target users in the retention stage and keep them invested in your brand, your goal is to create content using the customers’ life experiences pillar to amplify the emotional bond and brand loyalty that vulnerability creates.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Always took this approach and ended up with one of its most successful social media campaigns.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7172050} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/vulnerability-marketing-fig7.png?w=557" alt="An Always ad portraying a determined girl holding a baseball" class="wp-image-7172050"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In June 2014, Always launched its #LikeAGirl campaign to empower adolescent and teenage girls by transforming the phrase “like a girl” from a slur into a meaningful and positive statement.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The campaign is centered on a video in which Always tasked children, teenagers, and adults to behave “like a girl” by running, punching, and throwing while mimicking their perception of how a girl performs the activity. Young girls performed the tasks wholeheartedly and with gusto, while boys and adults performed overly feminine and vain characterizations. The director then challenged the person on their portrayal, breaking down what doing things “like a girl” truly means. The video ends with a powerful, heart-swelling statement:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure class="quote"><blockquote><p>“If somebody else says that running like a girl, or kicking like a girl, or shooting like a girl is something you shouldn’t be doing, that’s their problem. Because if you’re still scoring, and you’re still getting to the ball in time, and you’re still being first...you’re doing it right. It doesn’t matter what they say.”</p></blockquote></figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>This customer story campaign put the vulnerability girls feel during puberty front and center so the topic would resonate with users and give the brand a powerful, relevant, and purposeful role in this connection, <a href="https://instituteforpr.org/wp-content/uploads/Always-LikeAGirl-Turning-an-Insult-into-a-Confidence-Movement.pdf">according to an Institute for Public Relations campaign analysis</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Consequently, the #LikeAGirl campaign was a rousing success and blew past the KPIs Always established. Initially, Always determined an “impactful launch” for the video meant 2 million video views and 250 million media impressions, the analysis states.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Five years later, the campaign video has more than 66.9 million views and 42,700 comments on YouTube, with more than 85 percent of users reacting positively. Here are a few additional highlights the analysis document points out:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Eighty-one percent of women ages 16–24 support Always in creating a movement to reclaim “like a girl” as a positive and inspiring statement.</li><li>More than 1 million people shared the video.</li><li>Thirteen percent of users created user-generated content about the campaign.</li><li>The #LikeAGirl program achieved 4.5 billion global impressions.</li><li>The campaign received 290 million social impressions, with 133,000 social mentions, and it caused a 195.3 percent increase in the brand’s Twitter followers.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Among the reasons the #LikeAGirl content was so successful is that it aligned with Brené Brown’s concept that experiencing vulnerability creates a connection centered on powerful, shared emotions. Always then amplified the campaign’s effectiveness by using those emotions to encourage specific user behavior on social media.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How do you know if you’re making vulnerable content?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Designing a vulnerability-focused content strategy campaign begins by determining what kind of story you want to tell, why you want to tell it, why that story matters, and how that story helps you or your users achieve a goal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you’re brainstorming topics, the most important factor is that you need to care about the stories you’re telling. These tales need to be meaningful because if you’re weaving a narrative that isn’t important to you, it shows. And ultimately, why do you expect your users to care about a subject if you don’t?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s say you’re developing a content campaign for a nonprofit, and you want to use your brand’s emotional identity to connect with users. You have a handful of possible narratives but you’re not sure which one will best unlock the benefits of vulnerability. In a Medium post about <a href="https://medium.com/@caylavidmar/your-story-matters-3-powerful-brands-that-do-vulnerability-right-a3360694ffa7">telling vulnerable stories</a>, Cayla Vidmar presents a list of seven self-reflective questions that can reveal what narrative to choose and why.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you can answer each of Vidmar’s questions, you’re on your way to creating a great story that can connect with users on a level unrivaled by other methods. Here’s what you should ask yourself:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>What meaning is there in my story?</li><li>Can my story help others?</li><li>How can it help others?</li><li>Am I willing to struggle and be vulnerable in that struggle (even with strangers)?</li><li>How has my story shaped my worldview (what has it made me believe)?</li><li>What good have I learned from my story?</li><li>If other people discovered this good from their story, would it change their lives?</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>While you’re creating narratives within the three pillars, refer back to Vidmar’s list to maintain the proper balance between vulnerability and transparency.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What’s next?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You now know that vulnerability and transparency are an endless fountain of strength, not a weakness. Vulnerable content won’t make you or your brand look weak. Your customers won’t flee at the sight of imperfection. Being human and treating your users like humans isn’t a liability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s time for your brand to embrace its untapped potential. Choose to be vulnerable, have the courage to tell meaningful stories about what matters most to your company and your customers, and overcome the fear of controlling how users will react to your content.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Origin story</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Every origin story has six chapters:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>the discovery of a problem or opportunity;</li><li>what caused this problem or opportunity;</li><li>the consequences of this discovery;</li><li>the solution to these consequences;</li><li>lessons learned during the process;</li><li>and next steps.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Customers’ life experiences</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Every customer journey narrative has six chapters:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>plot background to frame the customer’s experiences;</li><li>the customer’s journey;</li><li>how the brand plays into that journey (if applicable);</li><li>how the customer’s experiences changed them;</li><li>what the customer learned from this journey;</li><li>and how other people can use this information to improve their lives.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Product and service insights</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Narratives about product and service insights have seven chapters:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>an overview of the product/service;</li><li>how that product/service affects users;</li><li>why the product/service is important to the brand’s mission or to users;</li><li>what about this product/service failed or succeeded;</li><li>why did that success or failure happen;</li><li>what lessons did this scenario create;</li><li>and how are the brand and its users moving forward.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You have the tools and knowledge necessary to be transparent, create vulnerable content, and succeed. And we need to tell vulnerable stories because sharing our experiences and embracing our common connections matters. So go ahead, put yourself out into the open, and see how your customers respond.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Content, Content Strategy]]>				</dc:subject>

				<dc:date>
					2019-08-22T13:30:11+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[An Essential Tool for Capturing Your Career Accomplishments]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/jessica-ivins/">Jessica Ivins</a>					</author>

				<link>
					https://alistapart.com/article/the-career-management-document/				</link>

				<guid>
					https://alistapart.com/article/the-career-management-document/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Imagine you’re ready to apply for your next job. Like most busy professionals, you probably haven’t updated your résumé or your portfolio since you looked for your current job.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now you need to update both, and you can’t remember what work you’ve done over the past few years. (In fact, you can barely remember what you’ve done over the past few months!)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So you scramble to update your résumé with new content. Then you spend all weekend scraping together a new portfolio using screenshots of whatever work evidence you can find on your laptop. You submit the résumé and portfolio with your application, hoping you didn’t forget to include any major career milestones you achieved over the last few years.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the process most of us use to approach our job search. We wait until we’re ready to find a job, panic at our lack of résumé and portfolio, and pull together a “good enough” version of each for the job application. (Trust me, I’ve done this many times myself.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is a stressful and ineffective way to approach a job search. There’s a much better approach you can take—and you can start working on it now, even if you’re not on the job market.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>The Career Management Document</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A Career Management Document (CMD) is a comprehensive collection of your résumé and portfolio content. It’s a document you update regularly, over time, with all the work you’ve done.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you’re ready to apply for your next job, you’ll have all the résumé and portfolio pieces available in your CMD. All you need to do is assemble those pieces into résumé and portfolio documents, then send the documents off with your job application.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I update my CMD about once a week. I start by reviewing evidence of my recent work. I review Slack messages, Basecamp posts, emails, and any other current work-related content. I write my accomplishments in the format of résumé bullets, using the <a href="https://www.manager-tools.com/2005/10/your-resume-stinks">framework of responsibilities and accomplishments from this Manager Tools podcast</a>. Then I add those bullets to the CMD.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here are some examples from my CMD:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Coached a student on writing a stronger portfolio story to showcase their advanced UX skills, resulting in the student getting a job interview.</li><li>Facilitated an end-of-study analysis in under 90 minutes to help the team synthesize user research data from 12 participants.</li><li>Led a remote retrospective with teams in two offices, developed actionable takeaways, and ended on time despite a delayed start.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>My CMD has several hundred résumé bullets, and it continues to grow. I organize content by year and by project. Within each project are responsibilities and accomplishments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I add any content to the CMD that might go into my résumé someday. I include everything I can think of, even if it seems insignificant or trivial at the time.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, I sometimes help with social media marketing at Center Centre, the UX design school where I’m a faculty member. I include it in my CMD. I don’t plan to pursue social media marketing as a career, but it may be relevant to a future job. Who knows—I may apply to work for an organization that makes social media marketing software someday. In that case, my social media experience could be relevant.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Include portfolio artifacts with your CMD</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to capturing bullets for my résumé, I capture content for my portfolio. Each week, I gather screenshots of my work, photos of me working with the team, and any other artifacts I can find. I store them in an organized system I can reference later.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also take brief notes about the work I did and store them with the artifacts. That way, if I look back at these materials a year from now, I’ll have notes about what I did during the project, reminding me of the details.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, after I facilitated a user research analysis session late last year, I captured evidence of it for my portfolio. I included photos of the whiteboard where I recorded public notes during the session. I also captured brief notes about who attended the session, the date, and when it took place during the project.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can use whatever tools you’d like to gather evidence of your work. I use Google Docs for the résumé portion of my CMD. I use Dropbox to store my portfolio artifacts. I create Dropbox folders with dates and project names that correspond to the contents of my CMD.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7171743} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/cmd-screenshot-1.jpg" alt="" class="wp-image-7171743" /><figcaption><br>Résumé content from my CMD. I wrote about coaching a student on crafting a presentation for her job interview. The highlighted areas are where I left comments reminding me of the details of the work. Note that some of the résumé bullets seem redundant, which is OK. When I create my next résumé, I’ll choose the most appropriate bullets.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":7171744} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/08/cmd-screenshot-2.jpg" alt="" class="wp-image-7171744" /><figcaption><br>I took notes on a whiteboard while coaching the student. I stored a photo of the whiteboard in Dropbox in a folder named with the date of the work and a description of what I did.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The key is to collect the evidence regularly and store it in an accessible, organized way that works for you. To know if you’re storing work evidence effectively, ask yourself, “Will I understand this CMD content a year from now based on how I’m capturing and storing it today?” If the answer is “yes,” you’re in good shape.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Update your CMD regularly</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For the CMD to work when you need it, it needs to be comprehensive and up-to-date. As I mentioned before, I update my CMD once a week. I schedule thirty minutes on my calendar each week so I remember to do it.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sometimes I have a busy week, and I can’t spend thirty minutes on my CMD. So I spend whatever amount of time I have. Some weeks, I only spend ten minutes. Ten minutes per week is better than zero minutes per week.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Occasionally, I don’t get a chance to update it because my week is so hectic. That’s OK because I’ll probably get to it the following week.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I recommend updating your CMD once a week and not once a month or once a quarter. If you wait even a month, you’ll have trouble remembering what you did three and a half weeks ago. Even worse, if you schedule a CMD update once a month and then miss it, you won’t get to it until the next month. That means you have to think back and remember two months of work, which is hard to do.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Updating your CMD every week, while the work is fresh in your mind, gets the best results.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>The CMD benefits you in additional ways</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The CMD can help you prepare for your job search beyond your résumé and your portfolio.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can use it to prepare for a job interview. Since you’re capturing work evidence from each stage of the process in your CMD, you can use that evidence to remember what you did throughout a project. Then, you can craft a story about your role on that project.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hiring managers love to hear stories about your work during job interviews. For instance, if you’re a designer, they want to know the journey you took during your design process, from the start of a project to the end. A detailed CMD will help you remember this process so you can share it in an interview.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’ve even used my CMD to write blog posts. I’ve been blogging regularly for the past two years, and I often refer to my CMD to remember work experience I had that’s relevant to what I’m writing. When I wrote the article “<a href="https://uxdesign.cc/how-to-tell-compelling-stories-during-a-ux-job-interview-ef5350ff83e7">How to Tell Compelling Stories During a UX Job Interview</a>,” I used my CMD to remember interview preparation exercises I did with students.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The CMD can also help you track work accomplishments for your quarterly or annual performance reviews. Additionally, you can use it to write job ads when hiring for related roles on your team.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lastly, I find it rewarding to peruse my CMD now and then, especially when I look back at work I did over a year ago. The CMD serves as a record of all my professional accomplishments. This record helps me appreciate my professional growth because I see how far my skills have come over time.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Learn more about the CMD from Manager Tools</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>At Center Centre, we originally learned about the Career Management Document through the <a href="https://www.manager-tools.com/">Manager Tools podcast series</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Manager Tools’ podcasts explain how to use a CMD for your résumé. We expanded their approach to include portfolio work as well. I recommend listening to their podcasts about creating and maintaining your CMD:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://www.manager-tools.com/2010/06/systematic-career-documentation-part-1-hall-fame-guidance">Systematic Career Documentation (Part 1)</a></li><li><a href="https://www.manager-tools.com/2010/06/systematic-career-documentation-part-2-hall-fame-guidance">Systematic Career Documentation (Part 2)</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2><strong>Prepare for your next job search now</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We tell our students at Center Centre that preparing for your next job search is a process that starts early. It’s like saving for retirement—the sooner you start saving money, the more likely you are to be prepared when the time comes.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Similarly, collecting résumé and portfolio content ahead of time will prepare you to find your next job whenever you’re ready to do so. It also prepares you for a sudden job termination like an unexpected layoff. If you lose your job without warning, you’ll likely be under a lot of stress to find a new position. Having a CMD ready will relieve the additional stress of building a résumé and portfolio from scratch.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don’t have a CMD yet, now is a great time to start one. Schedule 30 minutes this week to begin crafting your repository of work accomplishments. You’ll be glad you did when you seek your next job.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Career]]>				</dc:subject>

				<dc:date>
					2019-08-08T13:45:20+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Getting to the Heart of Digital Accessibility]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/carie-fisher/">Carie Fisher</a>					</author>

				<link>
					https://alistapart.com/article/getting-to-the-heart-of-digital-accessibility/				</link>

				<guid>
					https://alistapart.com/article/getting-to-the-heart-of-digital-accessibility/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Quick! Think of the word “developer” or “coder” — what’s the first thing that comes to mind? Maybe a whiteish male in his twenties living in a busy metropolis, wearing a nerdy t-shirt and hoodie? Someone a bit like Mark Zuckerberg? Or maybe a younger Bill Gates or Sergey Brin? Any of the dudes from the HBO series <em>Silicon Valley</em>, perhaps? Certainly no one like me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By tech standards, I’m old. I’m also female <em>and</em> a mother. I live in a midwestern town you’ve never heard of and will never visit — a town where the cows vastly outnumber the people. My hair color is (almost) natural and is no longer part of the ROYGBIV collection, so I have no perceived conference street cred. I own about a thousand geeky T-shirts, but never actually wear them in public, opting for more “girly” attire (or so was pointed out by a male colleague). On the surface, I look more suited to taking notes at a PTA meeting than writing code. I’m a bit of an outsider. A tech misfit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So when my 11-year-old daughter finished her recent coding camp and excitedly declared, “Now I’m a real developer, Mom, just like you!” there was the usual parent pride, but also a small piece of me that cringed. Because, as much as I support the STEM fields, and want the next generation of girls to be coding wizard-unicorn-ninjas, I really don’t want my own daughter to be a developer. The rationale behind this bold (and maybe controversial) statement comes from a place of protection. The tech world we live in today is far from perfect. I’ve endured my share of misogyny, self-doubt, and sexual harassment. Why wouldn’t I want to protect her from all of that?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The (diversity) elephant in the (computer) room</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You’ve heard this story before: there is not enough diversity in tech. This puzzling trend seems to continue year after year, even though numerous studies show that by including more people from underrepresented communities, a company can increase its <a href="https://www.fastcompany.com/40515712/want-a-more-innovative-company-simple-hire-a-more-diverse-workforce">innovation</a>, <a href="https://devskiller.com/diversity-in-tech/">employee retention</a>, and <a href="https://www.forbes.com/sites/annapowers/2018/06/27/a-study-finds-that-diverse-companies-produce-19-more-revenue/">bottom line</a>. Even with the recent push and supposed support for diversity and inclusivity from many Fortune 500 companies, women and female-identifying people still only hold <a href="https://smallbiztrends.com/2018/03/women-in-technology-statistics.html">20% of all top tech jobs</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The data from FY 2018 shows that the number of women in technical roles at three of the top tech giants was <a href="https://www.adobe.com/diversity/data.html">24% for Adobe</a>, <a href="https://diversity.google/annual-report/">26% for Google</a>, and <a href="https://newsroom.fb.com/news/2018/07/diversity-report/">22% for Facebook</a>. While these numbers show that there is still not enough representation for women, these numbers do reflect a slight increase from the previous year (FY 2017: Adobe 22%, Google 25%, Facebook 15%). But even with this upward trend of hiring women in tech roles, the marginal growth rate has not caught up with the real world. The tech workforce is seriously out of touch with reality if, in 2019, a demographic (women) that represents more than half the global population is still considered a minority.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sometimes this lack of diversity at the top level is blamed on a “pipeline” issue. The logic being: “If there are not enough girls who learn to code, then there will not be enough women who can code.” However, programs aimed at <a href="https://girlswhocode.com/">teaching girls how to code</a> have skyrocketed in the past few years. Girls now make up about <a href="https://csedu.gallup.com/home.aspx">half of the enrollment</a> in high-school coding classes and are scoring almost identically to their male classmates on standardized math and science tests, yet, young women make up only <a href="https://ngcproject.org/statistics">18% of all Computer Science degrees</a>. I have to wonder if this steep drop in interest has more to do with lack of representation in the tech sphere, than with girls and young women simply not being “smart enough” or “not interested” in working with code? At the very least, the lack of representation certainly doesn’t help.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, the diversity picture becomes even more abysmal when you consider other underrepresented groups such as people of color, people from the LGBTQ community, and people with disabilities. And while I really don’t like glossing over these deeper diversity issues in tech, because they are abundant and are much more grotesque failings than the male/female ratio, I also don’t feel qualified to speak about these issues. I encourage you to look to and value the voices of others who can speak with higher authority on these deeper diversity issues, such as <a href="https://twitter.com/ireaderinokun">Ire Aderinokun</a>, <a href="https://twitter.com/TaelurAlexis">Taelur Alexis</a>, <a href="https://twitter.com/Imani_Barbarin">Imani Barbarin</a>, <a href="https://twitter.com/techgirl1908">Angie Jones</a>, <a href="https://twitter.com/sugaroverflow">Fatima Khalid</a>, <a href="https://twitter.com/TatianaTMac">Tatiana Mac</a>, <a href="https://twitter.com/sonniesedge">Charlie Owen</a>, <a href="https://twitter.com/cherryrae">Cherry Rae</a>, and so many others. And for those readers who are new to the topic of diversity in tech, watch Tatiana Mac’s recent conference talk <a href="https://youtu.be/nQq_gZiZ-jg">How Privilege Defines Performance</a> — it’s well worth the 35 minutes of your life.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The four stages in the digital accessibility journey</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>However you look at it, the numbers don’t lie. There are some pretty significant diversity issues in tech. So how do we fix this issue before the next wave of young developers join the tech workforce? Simple: teach developers to write accessible code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This may seem like a joke to some and stretch to others, but hear me out. When we talk about accessible code, what we are really talking about at its core is inclusiveness. The actual process of writing accessible code involves rules and standards, tests and tools; but inclusive development is more abstract than that. It’s a shift in thinking. And when we rethink our approach to development, we go beyond just the base level of simple code functionality. We instead think, <em>how</em> is this code consumed? How can we make it even more intelligible and easier for people to use? Inclusive development means making something valuable, not just accessible, to as many people as we can.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That line of thinking is a bit abstract, so let’s go through an example. Let’s say you are tasked with updating the color contrast between the text on a webpage or app and the background. What happens at each stage in the accessibility journey?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Stage 1: Awareness </strong>— You are brand new to digital accessibility and are still trying to understand what it is and how you can implement changes in your daily workflow. You may be aware that there is a set of <a href="https://www.w3.org/WAI/WCAG21/quickref/">digital accessibility guidelines</a> that other developers follow, but you are a bit hazy on what it all means in a practical sense.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Stage 2: Knowledge </strong>— You know a bit more about digital accessibility and feel comfortable using a few testing tools, so you run an automated accessibility test on your website and it flags a possible issue with the color contrast. Based on your awareness of the guidelines, you know the <a href="https://contrastchecker.com/">color contrast ratio</a> between the text and the background needs to be a certain number and that you need a tool to test this.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Stage 3: Practice </strong>— Feeling more confident in your knowledge of digital accessibility rules and best practices, you use a <a href="https://developer.paciellogroup.com/resources/contrastanalyser/">tool to measure the color contrast ratio</a> between the text and the background. Then based on the output of the tool, you modify the hex code to meet the color contrast ratio guidelines and retest to confirm you have met the accessibility requirements for this issue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Stage 4: Understanding </strong>— You understand that the accessibility guidelines and tools are created with people in mind, and that code is secondary to all of that. One is the means, and the other is the end. In the color contrast example, you understand that people with low-vision or colorblindness need these color contrast changes in order to actually <em>see</em> the words on your web page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is a bit of an oversimplification of the process. But I hope you get the gist — that there are different stages of digital accessibility knowledge and understanding. True beginners may not be to even stage one, but I am finding that group rarer and rarer these days. The word about digital accessibility seems to be out! Which is great; but that’s only the first hurdle. What I’m seeing now is that a lot of people stop at <em>Stage 2: Knowledge</em> or <em>Stage 3: Practice </em>— where you are aware of the digital accessibility guidelines, have some testing tools in your back pocket, and know how to fix some of the issues reported, but haven’t quite connected the dots to the humans they impact.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From the standpoint of getting daily stuff done, stages two and three are okay stopping points. But what happens when the things you need to do are too complex for a quick fix, or you have no buy-in from your peers or management? I feel that once we get to <em>Stage 4: Understanding</em>, and really get <em>why</em> these kinds of changes are needed, people will be more motivated to make those changes regardless of the challenges involved. When you arrive at stage four, you have gone beyond knowing the basic rules, testing, and coding. You recognize that digital accessibility is not just a “nice to have” but a “must have” and it becomes about quality of life for <em>real</em> people. This is digital inclusion. This is something you can’t unsee, you can’t unlearn, and you can’t ignore.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Making digital accessibility a priority — not a requirement</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my role as an accessibility trainer, I like to kick-off each session with the question: “What are you hoping to learn today about digital accessibility?” I ask this question to establish a rapport with the audience and to understand where everyone is in their accessibility journey, but I am also evaluating the level of company and individual buy-in too. There is nothing worse than showing up to teach a group that does not care to be taught. If I hear the words “I am only here because I have to be” — I know it will be an uphill battle to get them anywhere close to <em>Stage 4: Understanding</em>, so I mentally regroup and aim for another stage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my experience, when companies and their leaders say “Digital accessibility is a requirement,” nine times out of ten there is a motivating factor behind this sweeping declaration (for example, impending litigation, or at least the fear of it). When changes are framed as mandatory and packaged as directives from on high with little additional context, people can be resistant and will find excuses to fight or challenge the declaration, and any change can become an uphill battle. Calling something “mandatory” only speaks to <em>Stage 1: Awareness</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By swapping out one word from the original declaration and saying “Digital accessibility is a priority,” companies and their leaders have reframed the conversation with their employees. When changes are framed as “working towards a solution” and discussed openly and collaboratively, people feel like they are part of the process and are more open to embracing change. In the long run, embracing change becomes part of a company’s culture and leads to innovation (and, yes, inclusion) on all levels. Calling something a priority speaks to <em>Stage 4: Understanding</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some of the excuses I often hear from clients for not prioritizing accessibility is that it is too difficult, too costly, and/or too time consuming — but is that really the case? In the same accessibility training, I lead an exercise where we look at a website with an accessibility testing tool and review any issues that came up. With the group’s help we plot out the “impact to user” versus the “remediation effort” on the part of the team. From group to group, while the plots are slightly different, one commonality is that close to 80% of the errors plotted fall into the quadrant of “simple to fix” for the team, but they also fall under “high impact” to the user. Based on this empirical data, I won’t buy the argument from clients who say that accessibility is too difficult and costly and time consuming anymore. It comes down to whether it’s a priority — for each individual and for the company as a whole.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What will your coding legacy be?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <a href="https://en.wikipedia.org/wiki/Infinite_monkey_theorem"><em>infinite monkey theorem</em></a> states that a monkey hitting keys at random on a typewriter for an infinite amount of time will eventually type any given text, such as the complete works of William Shakespeare. So by that same logic, a programmer hitting keys at random on a computer for an infinite amount of time will almost surely produce a website that is accessible. But where is the thought process? Where is the human element? While all the things we’ve already talked about — awareness, education, and prioritization of accessibility are important steps in making the digital world more inclusive to all — without <em>intent, </em>we are just going to keep randomly tapping away at our computers, repeating the same mistakes over and over again. The intent behind the code has to be part of the process, otherwise accessibility is just another task that has no meaning.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Maybe I’m naive, but I’d like to think we’ve come to a point in our society where we want our work lives to have meaning. And that we don’t want to just hear about the positive change that is happening, but want to be part of the change. Digital accessibility is a place where this can happen! Not only does understanding and writing purpose-driven code help people with disabilities in the short-run, I believe strongly that is key to solving the overarching diversity issue in tech in the long-run. Developers who reach <em>Stage 4: Understanding</em>, and who prioritize accessible code because they understand it’s fundamentally about <em>people</em>, will also be the ones who help create and cultivate an inclusive environment where people from more diverse backgrounds are also prioritized and accepted in the tech world.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because when you strip away all the styles, all the mark-up, all the cool features from a website or app — what’s left? People. And honestly, the more I learn about digital accessibility, the more I realize it’s not about the code at all. Digital accessibility is rooted in the user; and, while I (<a href="https://a11yproject.com/follow/">and countless others</a>) can certainly teach you how to write accessible code, and build you tools, patterns, and libraries to use, I realize we can’t teach you to care. That is a choice you have to make yourself. So think for a moment — what are you leaving the next generation of developers with all that inaccessible code you haven’t given much thought to? Is it the coding legacy you really want to leave? I challenge you to do better for my daughter, her peers, and for the countless others who are not fully represented in the tech community today.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Accessibility]]>				</dc:subject>

				<dc:date>
					2019-08-01T13:45:18+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Responsible JavaScript: Part II]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/jeremy-wagner/">Jeremy Wagner</a>					</author>

				<link>
					https://alistapart.com/article/responsible-javascript-part-2/				</link>

				<guid>
					https://alistapart.com/article/responsible-javascript-part-2/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>You and the rest of the dev team lobbied enthusiastically for a total re-architecture of the company’s aging website. Your pleas were heard by management—even up to the C-suite—who gave the green light. Elated, you and the team started working with the design, copy, and IA teams. Before long, you were banging out new code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It started out innocently enough with an <code>npm install</code> here and an <code>npm install</code> there. Before you knew it, though, you were installing production dependencies like an undergrad doing keg stands without a care for the morning after.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then you launched.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unlike the aftermath of most copious boozings, the agony didn’t start the morning after. <em>Oh</em>, no. It came months later in the ghastly form of low-grade nausea and headache of product owners and middle management wondering why conversions and revenue were both down since the launch. It then hit a fever pitch when the CTO came back from a weekend at the cabin and wondered why the site loaded so slowly on their phone—if it indeed ever loaded at all.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Everyone was happy. Now <em>no</em> one is happy. Welcome to your first JavaScript hangover.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>It’s not your fault</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you’re grappling with a vicious hangover, “I told you so” would be a well-deserved, if fight-provoking, rebuke—assuming you could even fight in so sorry a state.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it comes to JavaScript hangovers, there’s plenty of blame to dole out. Pointing fingers is a waste of time, though. The landscape of the web today demands that we iterate faster than our competitors. This kind of pressure means we’re likely to take advantage of any means available to be as productive as possible. <em>That</em> means we’re more likely—but not necessarily doomed—to build apps with more overhead, and possibly use patterns that can hurt performance and accessibility.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Web development isn't easy. It’s a long slog we rarely get right on the first try. The best part of working on the web, however, is that we don’t <em>have</em> to get it perfect at the start. We can make improvements after the fact, and that’s just what the second installment of <a href="https://alistapart.com/article/responsible-javascript-part-1/">this series</a> is here for. Perfection is a long ways off. For now, let’s take the edge off of that JavaScript hangover by improving your site’s, er, <em>scriptuation</em> in the short term.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Round up the usual suspects</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It might seem rote, but it’s worth going through the list of basic optimizations. It’s not uncommon for large development teams—particularly those that work across many repositories or don’t use optimized boilerplate—to overlook them.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Shake those trees</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, make sure your toolchain is configured to perform <a href="https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"><em>tree shaking</em></a>. If tree shaking is new to you, I wrote <a href="https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/">a guide on it last year</a> you can consult. The short of it is that tree shaking is a process in which unused exports in your codebase don’t get packaged up in your production bundles.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tree shaking is available out of the box with modern bundlers such as <a href="https://webpack.js.org/">webpack</a>, <a href="https://rollupjs.org/">Rollup</a>, or <a href="https://parceljs.org/">Parcel</a>. <a href="https://gruntjs.com/">Grunt</a> or <a href="https://gulpjs.com/">gulp</a>—which are not <em>bundlers</em>, but rather <em>task runners</em>—won’t do this for you. A task runner doesn’t build a <a href="https://webpack.js.org/concepts/dependency-graph/">dependency graph</a> like a bundler does. Rather, they perform discrete tasks on the files you feed to them with any number of plugins. Task runners <em>can</em> be extended with plugins to use bundlers to process JavaScript. If extending task runners in this way is problematic for you, you’ll likely need to manually audit and remove unused code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For tree shaking to be effective, the following must be true:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Your app logic and the packages you install in your project must be authored as <a href="https://ponyfoo.com/articles/es6-modules-in-depth">ES6 modules</a>. Tree shaking <a href="https://en.wikipedia.org/wiki/CommonJS">CommonJS</a> modules isn’t practically possible.</li><li>Your bundler must <em>not</em> transform ES6 modules into another module format at build time. If this happens in a toolchain that uses Babel, <a href="https://babeljs.io/docs/en/babel-preset-env">@babel/preset-env configuration</a> must specify <a href="https://babeljs.io/docs/en/babel-preset-env#modules"><code>modules: false</code></a> to prevent ES6 code from being converted to CommonJS.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>On the off chance tree shaking isn’t occurring during your build, getting it to work may help. Of course, its effectiveness varies on a case-by-case basis. It also depends on whether the modules you import introduce <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">side effects</a>, which may influence a bundler’s ability to shake unused exports.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Split that code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Chances are good that you’re employing some form of <a href="https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/">code splitting</a>, but it’s worth re-evaluating how you’re doing it. No matter <em>how</em> you’re splitting code, there are two questions that are always worth asking yourself:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Are you <a href="https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/#removing_duplicate_code">deduplicating common code</a> between <a href="https://webpack.js.org/concepts/entry-points/">entry points</a>?</li><li>Are you lazy loading all the functionality you reasonably can with <a href="https://developers.google.com/web/updates/2017/11/dynamic-import">dynamic <code>import()</code></a>?</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These are important because reducing redundant code is essential to performance. Lazy loading functionality also improves performance by lowering the initial JavaScript footprint on a given page. On the redundancy front, using an analysis tool such as <a href="https://github.com/samccone/bundle-buddy">Bundle Buddy</a> can help you find out if you have a problem.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7171674} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/06/figure-6-2x.png?w=435" alt="The Bundle Buddy utility demonstrating how much code is shared between bundles of JavaScript." class="wp-image-7171674"/><figcaption>Bundle Buddy can examine your webpack compilation statistics and determine how much code is shared between your bundles.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Where lazy loading is concerned, it can be a bit difficult to know where to start looking for opportunities. When I look for opportunities in existing projects, I’ll search for user interaction points throughout the codebase, such as click and keyboard events, and similar candidates. Any code that requires a user interaction to run is a potentially good candidate for dynamic <code>import()</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, loading scripts on demand brings the possibility that interactivity could be noticeably delayed, as the script necessary for the interaction must be downloaded first. If data usage is not a concern, consider using the <a href="https://www.w3.org/TR/resource-hints/#prefetch"><code>rel=prefetch</code> resource hint</a> to load such scripts at a low priority that won’t contend for bandwidth against critical resources. <a href="https://caniuse.com/#feat=link-rel-prefetch">Support for<strong> </strong><code>rel=prefetch</code></a> is good, but nothing will break if it’s unsupported, as such browsers will ignore markup they doesn’t understand.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Externalize third-party hosted code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Ideally, you should self-host as many of your site’s dependencies as possible. If for some reason you <em>must</em> load dependencies from a third party, <a href="https://webpack.js.org/configuration/externals/">mark them as externals</a> in your bundler’s configuration. Failing to do so could mean your website’s visitors will download both locally hosted code <em>and</em> the same code from a third party.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s look at a hypothetical situation where this could hurt you: say that your site loads Lodash from a public CDN. You've also installed Lodash in your project for local development. However, if you fail to mark Lodash as external, your production code will end up loading a third party copy of it <em>in addition</em> to the bundled, locally hosted copy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This may <em>seem</em> like common knowledge if you know your way around bundlers, but I’ve seen it get overlooked. It’s worth your time to check twice.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you aren’t convinced to self-host your third-party dependencies, then consider adding <a href="https://css-tricks.com/prefetching-preloading-prebrowsing/#article-header-id-0"><code>dns-prefetch</code></a>, <a href="https://css-tricks.com/prefetching-preloading-prebrowsing/#article-header-id-1"><code>preconnect</code></a>, or possibly even <a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/"><code>preload</code></a> hints for them. Doing so can lower your site’s <a href="https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive">Time to Interactive</a> and—if JavaScript is critical to rendering content—your site’s <a href="https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index">Speed Index</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Smaller alternatives for less overhead</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://nodejs.org/en/knowledge/getting-started/what-is-node-core-verus-userland/">Userland JavaScript</a> is like an obscenely massive candy store, and we as developers are awed by the sheer amount of open source offerings. Frameworks and libraries allow us to extend our applications to quickly do all sorts of stuff that would otherwise take loads of time and effort.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While I personally prefer to aggressively minimize the use of client-side frameworks and libraries in my projects, their value is compelling. Yet, we <em>do</em> have a responsibility to be a bit hawkish when it comes to what we install. When we’ve already built and shipped something that depends on a slew of installed code to run, we’ve accepted a baseline cost that only the maintainers of that code can practically address. Right?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Maybe, but then again, maybe not. It depends on the dependencies used. For instance, React is extremely popular, but <a href="https://preactjs.com/">Preact</a> is an <a href="https://bundlephobia.com/result?p=preact@8.4.2">ultra-small</a> alternative that largely shares the same API and retains compatibility with many React add-ons. <a href="https://moment.github.io/luxon/">Luxon</a> and <a href="https://date-fns.org/">date-fns</a> are much more compact alternatives to <a href="https://momentjs.com/">moment.js</a>, which is <a href="https://bundlephobia.com/result?p=moment">not exactly tiny</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Libraries such as <a href="https://lodash.com/">Lodash</a> offer many useful methods. Yet, some of them are easily replaceable with native ES6. <a href="https://lodash.com/docs/4.17.11#compact">Lodash’s <code>compact</code> method</a>, for example, is replaceable with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code>filter</code> array method</a>. <a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_chunk">Many more can be replaced</a> without much effort, and without the need for pulling in a large utility library.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Whatever your preferred tools are, the idea is the same: do some research to see if there are smaller alternatives, or if native language features can do the trick. You may be surprised at how little effort it may take you to seriously reduce your app’s overhead.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Differentially serve your scripts</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There’s a good chance you’re using Babel in your toolchain to transform your ES6 source into code that can run on older browsers. Does this mean we’re doomed to serve giant bundles even to browsers that don’t need them, until the older browsers disappear altogether? <a href="https://philipwalton.com/articles/deploying-es2015-code-in-production-today/">Of course not</a>! Differential serving helps us get around this by generating two different builds of your ES6 source:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Bundle one, which contains all the transforms and polyfills required for your site to work on older browsers. You’re probably already serving this bundle right now.</li><li>Bundle two, which contains <em>little to none</em> of the transforms and polyfills because it targets modern browsers. This is the bundle you’re probably not serving—at least not <em>yet</em>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Achieving this is a bit involved. <a href="https://calendar.perfplanet.com/2018/doing-differential-serving-in-2019/">I’ve written a guide on one way you can do it</a>, so there’s no need for a deep dive here. The long and short of it is that you can modify your build configuration to generate an additional but smaller version of your site’s JavaScript code, and serve it only to modern browsers. The best part is that these are savings you can achieve without sacrificing any features or functionality you already offer. Depending on your application code, the savings could be quite significant.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7171677} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/06/diff-serving-bundles.jpg?w=960" alt="" class="wp-image-7171677"/><figcaption>A webpack-bundle-analyzer analysis of a project's legacy bundle (left) versus one for a modern bundle (right). <a href="https://alistapart.com/wp-content/uploads/2019/06/diff-serving-bundles.jpg" rel="noopener noreferrer" target="_blank">View full-sized image</a>.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The <a href="https://developers.google.com/web/fundamentals/primers/modules#browser">simplest pattern</a> for serving these bundles to their respective platforms is brief. It also works a treat in modern browsers:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<pre id="snippet1" class="wp-block-code language-html"><code class="language-html">&lt;!-- Modern browsers load this file: --&gt;
&lt;script type="module" src="/js/app.mjs"&gt;&lt;/script&gt;
&lt;!-- Legacy browsers load this file: --&gt;
&lt;script defer nomodule src="/js/app.js"&gt;&lt;/script&gt;</code></pre>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Unfortunately, there’s a caveat with this pattern: legacy browsers like IE 11—and even relatively modern ones such as Edge versions 15 through 18—will download <em>both</em> bundles. If this is an acceptable trade-off for you, then worry no further.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the other hand, you'll need a workaround if you’re concerned about <a href="https://gist.github.com/jakub-g/5fc11af85a061ca29cc84892f1059fec">the performance implications of older browsers downloading both sets of bundles</a>. Here’s one potential solution that uses script injection (instead of the <code>script</code> tags above) to avoid double downloads on affected browsers:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<pre id="snippet2" class="wp-block-code language-javascript"><code class="language-javascript">var scriptEl = document.createElement("script");

if ("noModule" in scriptEl) {
  // Set up modern script
  scriptEl.src = "/js/app.mjs";
  scriptEl.type = "module";
} else {
  // Set up legacy script
  scriptEl.src = "/js/app.js";
  scriptEl.defer = true; // type="module" defers by default, so set it here.
}

// Inject!
document.body.appendChild(scriptEl);</code></pre>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>This script infers that if a browser supports <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nomodule">the <code>nomodule</code> attribute</a> in the <code>script</code> element, it understands <code>type="module"</code>. This ensures that legacy browsers only get legacy scripts and modern browsers only get modern ones. Be warned, though, that dynamically injected scripts load asynchronously by default, so set the <code><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async">async</a></code> attribute to <code>false</code> if dependency order is crucial.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Transpile less</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"align":"left"} -->
<p style="text-align:left">I’m not here to trash Babel. It’s indispensable, but lordy, it adds a <em>lot</em> of extra stuff without your ever knowing. It pays to peek under the hood to see what it’s up to. Some minor changes in your coding habits can have a positive impact on what Babel spits out.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7171676} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/06/twete.png?w=306" alt="" class="wp-image-7171676"/><figcaption><a href="https://twitter.com/_developit/status/1110229993999777793">https://twitter.com/_developit/status/1110229993999777793</a></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To wit: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">default parameters</a> are a <em>very</em> handy ES6 feature you probably already use:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<pre id="snippet3" class="wp-block-code language-javascript"><code class="language-javascript">function logger(message, level = "log") {
  console[level](message);
}</code></pre>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>The thing to pay attention to here is the <code>level</code> parameter, which has a default of “log.” This means if we want to invoke <code>console.log</code> with this wrapper function, we don’t need to specify <code>level</code>. Great, right? Except when Babel transforms this function, the output looks like this:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<pre id="snippet4" class="wp-block-code language-javascript"><code class="language-javascript">function logger(message) {
  var level = arguments.length &gt; 1 &amp;&amp; arguments[1] !== undefined ? arguments[1] : "log";

  console[level](message);
}</code></pre>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>This is an example of how, despite our best intentions, developer conveniences can backfire. What was a handful of bytes in our source has now been transformed into <em>much</em> larger in our production code. Uglification can’t do much about it either, as arguments can’t be reduced. Oh, and if you think <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">rest parameters</a> might be a worthy antidote, Babel’s transforms for them are even bulkier:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<pre id="snippet5" class="wp-block-code language-javascript"><code class="language-javascript">// Source
function logger(...args) {
  const [level, message] = args;

  console[level](message);
}

// Babel output
function logger() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  const level = args[0],
        message = args[1];
  console[level](message);
}</code></pre>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Worse yet, Babel transforms this code even for projects with a <a href="https://babeljs.io/docs/en/babel-preset-env">@babel/preset-env</a> configuration <a href="https://babeljs.io/docs/en/babel-preset-env#targetsesmodules">targeting modern browsers</a>, meaning the modern bundles in your differentially served JavaScript will be affected too! You <em>could</em> use <a href="https://babeljs.io/docs/en/babel-preset-env#loose">loose transforms</a> to soften the blow—and that’s a fine idea, as they’re often quite a bit smaller than their more spec-compliant counterparts—<a href="http://2ality.com/2015/12/babel6-loose-mode.html">but enabling loose transforms can cause issues if you remove Babel from your build pipeline later on</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Regardless of whether you decide to enable loose transforms, here’s one way to cut the cruft of transpiled default parameters:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<pre id="snippet6" class="wp-block-code language-javascript"><code class="language-javascript"><pre id="snippet2" class="wp-block-code language-javascript"><code class="language-javascript">// Babel won't touch this
function logger(message, level) {
  console[level || "log"](message);
}</code></pre></code></pre>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Of course, default parameters aren’t the <em>only</em> feature to be wary of. For example, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">spread syntax</a> gets transformed, as do <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow functions</a> and a whole host of <a href="https://babeljs.io/repl/#?babili=false&amp;browsers=%3E%200.25%25%2C%20ie%20%3E%2010%2C%20Firefox%20ESR%2C%20not%20dead&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=MYGwhgzhAECyYDsCuAzMwAuSBOBTb0A3gFDTTAD2CEG2SmFBAFALaKrpZ7YA05FSBLQCeASiKky0DAAsAlhAB0bZGkw580ALzQVHddwDcksrIWLKgkdv5Xsw42QC-xF8VCQYAYTAFcADwxcBAATGHhVTg0CEjJKalp6DEZoVgoQ3BA-YVxfPkoQRj5FEt8AcwhxWKkIJAAHfCYSxXLKxykTaXklFnTMm16MkHbTbsUc3xsJ7BGu8wKUnQWZyRcySTw6sDkhVOWqzrMlZZtl9pc3eJpoNBY5EGEfAh0EXAB3aCemACIfFntvnxvgAmAAMoOBgOg3wAMoJJrAFBg4LgMGAQCA5MAod8ACoUYQUNE4gBSYC2CG-okMQA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=true&amp;fileSize=true&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env&amp;prettier=false&amp;targets=&amp;version=7.4.5&amp;externalPlugins=">other stuff</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don’t want to avoid these features altogether, you have a couple ways of reducing their impact:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>If you’re authoring a library, consider using <a href="https://babeljs.io/docs/en/babel-runtime">@babel/runtime</a> in concert with <a href="https://babeljs.io/docs/en/babel-plugin-transform-runtime">@babel/plugin-transform-runtime</a> to deduplicate the helper functions Babel puts into your code.</li><li>For polyfilled features in apps, you can include them selectively with <a href="https://babeljs.io/docs/en/babel-polyfill">@babel/polyfill</a> via <a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins">@babel/preset-env’s useBuiltIns: "usage"</a> option.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This is solely my opinion, but I believe the best choice is to avoid transpilation altogether in bundles generated for modern browsers. That’s not always possible, especially if you use <a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a>, which must be transformed for <em>all</em> browsers, or if you’re using bleeding edge language features that aren’t widely supported. In the latter case, it might be worth asking if those features are really necessary to deliver a good user experience (they rarely are). If you arrive at the conclusion that Babel must be a part of your toolchain, then it’s worth peeking under the hood from time to time to catch suboptimal stuff Babel might be doing that you can improve on.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Improvement is not a race</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As you massage your temples wondering when this horrid JavaScript hangover is going to lift, understand that it’s precisely when we rush to get something out there as fast as we possibly can that the user experience can suffer. As the web development community obsesses on iterating faster in the name of competition, it’s worth your time to <a href="https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow"><em>slow down a little bit</em></a>. You’ll find that by doing so, you may not be iterating as fast as your competitors, but <em>your product</em> will be <em>faster</em> than theirs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As you take these suggestions and apply them to your codebase, know that progress doesn’t spontaneously happen overnight. Web development is a job. The truly impactful work is done when we’re thoughtful and dedicated to the craft for the long haul. Focus on steady improvements. Measure, test, repeat, and your site’s user experience will improve, and you’ll get faster bit by bit over time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Special thanks to </em><a href="https://twitter.com/_developit"><em>Jason Miller</em></a><em> for tech editing this piece. Jason is the creator and one of the many maintainers of </em><a href="https://preactjs.com/"><em>Preact</em></a><em>, a vastly smaller alternative to React with the same API. If you use Preact, </em><a href="https://opencollective.com/preact"><em>please consider supporting Preact through Open Collective</em></a><em>.</em></p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Application Development, Browsers, JavaScript]]>				</dc:subject>

				<dc:date>
					2019-06-13T13:30:28+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Resilient Management, An Excerpt]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/larahogan/">Lara Hogan</a>					</author>

				<link>
					https://alistapart.com/article/resilient-management-excerpt/				</link>

				<guid>
					https://alistapart.com/article/resilient-management-excerpt/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>In <a href="https://en.wikipedia.org/wiki/Tuckman's_stages_of_group_development">Tuckman’s Stages of Group Development</a>, the Storming stage happens as a group begins to figure out how to work together. Previously, each person had been doing their own thing as individuals, so necessarily a few things need to be ironed out: how to collaborate, how to hit goals, how to determine priorities. Of <em>course </em>there may be some friction here! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But even if your team doesn’t noticeably demonstrate this kind of internal Storming as they begin to gel, there might be some outside factors at play in your work environment that create friction. During times of team scaling and organizational change—the water we in the web industry are often swimming in—managers are responsible for things like strategy-setting, aligning their team’s work to company objectives, and unblocking the team as they ship their work. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to these business-context responsibilities, managers need to be able to help their teammates navigate this storm by helping them grow in their roles and support the team’s overall progress. If you and your teammates don’t adapt and evolve in your roles, it’s unlikely that your team will move out of the Storming stage and into the Norming stage of team dynamics. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To spur this course-correction and growth in your teammates, you’ll end up wearing four different hats: </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Mentoring: </strong>lending advice and helping to problem solve based on your own experience. </li><li><strong>Coaching: </strong>asking open questions to help your teammate reflect and introspect, rather than sharing your own opinions or quickly problem solving.</li><li><strong>Sponsoring: </strong>finding opportunities for your teammate to level up, take on new leadership roles, and get promoted.</li><li><strong>Delivering feedback: </strong>observing behavior that is or isn’t aligned to what the team needs to be doing and sharing those observations, along with praise or suggestions. </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Let’s dive in to how to choose, and when to use, each of
these skills as you grow your teammates, and then talk about
what it looks like when teammates support the overarching
direction of the team.
</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Mentoring</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When I talk to managers, I find that the vast majority have their
mentor hats on ninety percent of the time when they’re working with their
teammates. It’s natural! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In mentoring mode, we’re doling out advice, sharing our perspective,
and helping someone else problem solve based on that information. Our personal
experiences are often what we can talk most confidently about! For this reason,
mentorship mode can feel really good and effective for the mentor. Having that
mentor hat on can help the other person overcome a roadblock or know which next
steps to take, while avoiding drastic errors that they wouldn’t have seen
coming otherwise. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a mentor, it’s your responsibility to give advice that’s current and sensitive to the changing dialog happening in our industry. Advice that might work for one person (“Be louder in meetings!” or “Ask your boss for a raise!”) may undermine someone else, because members of underrepresented groups are unconsciously assessed and treated differently. For example, <a href="https://hbr.org/2018/05/the-different-words-we-use-to-describe-male-and-female-leaders">research has shown</a> that “when women are collaborative and communal, they are not perceived as competent—but when they emphasize their competence, they’re seen as cold and unlikable, in a classic ‘double bind’”. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are not a member of a marginalized group, and you have a
mentee who <em>is</em>, please be a responsible mentor! Try to be aware of the
way members of underrepresented groups are perceived, and the unconscious bias
that might be at play in your mentee’s work environment. When you have your
mentor hat on, do lots of gut checking to make sure that your advice is going
to be helpful in practice for your mentee.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mentoring is ideal when the mentee is new to their role or to the
organization; they need to learn the ropes from someone who has firsthand
experience. It’s also ideal when your teammate is working on a problem and has
tried out a few different approaches, but still feels stumped; this is why
practices like pair coding can help folks learn new things. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As mentors, we want our mentees to reach beyond us, because our mentees’ success is ultimately <em>our</em> success. Mentorship relationships evolve over time, because each party is growing. Imaginative, innovative ideas often come from people who have never seen a particular challenge before, so if your mentee comes up with a creative solution on their own that you wouldn’t have thought of, be excited for them—don’t just focus on the ways that <em>you’ve </em>done it or seen it done before.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Managers often default to mentoring mode because it feels like the fastest way to solve a problem, but it falls short in helping your teammate connect their <em>own</em> dots. For that, we’ll look to coaching.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Coaching</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In mentoring mode, you’re focused on both the problem and the solution. You’ll share what you as the mentor would do or have done in this situation. This means you’re more focused on yourself, and less on the person who is sitting in front of you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In coaching mode—an extremely powerful but often underutilized mode—you’re doing two primary things: </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Asking open questions </strong>to help the other person explore more of the shape of the topic, rather than staying at the surface level.</li><li><strong>Reflecting</strong>, which is like holding up a mirror for the other person and describing what you see or hear, or asking them to reflect for themselves. </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p> These two tools will help you become your teammate’s fiercest champion. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Open Questions</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>“Closed” questions can only be answered with <em>yes</em> or <em>no</em>.
Open questions often start with <em>who</em>, <em>what</em>, <em>when</em>, <em>where</em>,
<em>why</em>, and <em>how</em>. But the best open questions are about the
problem, not the solution. Questions that start with <em>why</em> tend to make
the other person feel judged, and questions that start with <em>how</em> tend
to go into problem solving mode—both of which we want to avoid while in
coaching mode. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, <em>what</em> questions can be authentically curious!
When someone comes to you with a challenge, try asking questions like:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>What’s most important to you about it?</li><li>What’s holding you back?</li><li>What does success look like?</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Let’s say my teammate comes to me and says they’re ready for a
promotion. Open questions could help this teammate explore what this promotion
means and demonstrate to me what introspection they’ve already done around it.
Rather than telling them what I think is necessary for them to be promoted, I
could instead open up this conversation by asking them:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>What would you be able to do in the new level
that you can’t do in your current one?</li><li>What skills are required in the new level? What
are some ways that you’ve honed those skills?</li><li>Who are the people already at that level that
you want to emulate? What about them do you want to emulate?</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p> Their answers would give me a place to start coaching. These questions might push my teammate to think more deeply about what this promotion means, rather than allowing them to stay surface level and believe that a promotion is about checking off a lot of boxes on a list. Their answers might also open <em>my</em> eyes to things that I hadn’t seen before, like a piece of work that my teammate had accomplished that made a huge impact. But most important, going into coaching mode would start a two-way conversation with this teammate, which would help make an otherwise tricky conversation feel more like a shared exploration.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Open
questions, asked from a place of genuine curiosity, help people feel seen and
heard. However, if the way you ask your questions comes across as judgy or like
you’ve already made some assumptions, then your questions aren’t truly open
(and your teammate can smell this on you!). Practice your intonation to make
sure your open questions are <em>actually</em> curious and open. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By the way, forming lots of open questions (instead of problem solving questions, or giving advice) is tremendously hard for most people. Don’t worry if you don’t get the hang of it at first; it takes a lot of practice and intention over time to default to coaching mode rather than mentoring mode. I promise, it’s worth it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Reflections</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Just like open questions, reflections help the other person feel
seen and heard, and to explore the topic more deeply. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s almost comical how rarely we get the sense that the person
we’re talking to is actively listening to us, or focusing entirely on helping
us connect our own dots. Help your teammates reflect by repeating back to them
what you hear them say, as in:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>“What I’m hearing you say is that you’re
frustrated with how this project is going. Is that right?”</li><li>“What I know to be true about you is how deeply
you care about your teammates’ feelings.”</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In each of these
examples, you are holding up a metaphorical mirror to your teammate, and
helping them look into it. You can coach them to reflect, too:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>“How does this new architecture project map to
your goals?”</li><li>“Let’s reflect on where you were this time last
year and how far you’ve come.”</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Occasionally, you might get a reflection wrong; this gives the
other person an opportunity to realize something new about their topic, like
the words they’re choosing aren’t quite right, or there’s another underlying
issue that should be explored. So don’t be worried about giving a bad
reflection; reflecting back what you’re hearing will still help your teammate.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The act of reflecting can help the other person do a gut check to
make sure they’re approaching their topic holistically. Sometimes the act of
reflection forces (encourages?) the other person to do some really hard work: <em>introspection</em>.
Introspection creates an opportunity for them to realize new aspects of the
problem, options they can choose from, or deeper meanings that hadn’t occurred
to them before—which often ends up being a nice shortcut to the right solution.
Or, even better, the right problem statement. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you have your coaching hat on, you don’t need to have all the answers, or even fully understand the problem that your teammate is wrestling with; you’re just there as a mirror and as a question-asker, to help prompt the other person to think deeply and come to some new, interesting conclusions. Frankly, it may not feel all that effective when you’re in coaching mode, but I promise, coaching can generate <em>way more growth</em> for that other person than just giving them advice or sharing your perspective.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Choose coaching when you’re looking to help someone (especially an emerging leader) hone their strategic thinking skills, grow their leadership aptitude, and craft their own path forward. Coaching mode is all about helping your teammate develop their own brain wrinkles, rather than telling them how you would do something. The introspection and creativity it inspires create deeper and longer-lasting growth. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Sponsoring</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While you wear the mentoring and coaching hats around your
teammates, the sponsor hat is more often worn when they’re <em>not</em> around,
like when you’re in a 1:1 with your manager, a sprint planning meeting, or
another environment where someone’s work might be recognized. You might hear
about an upcoming project to acquire a new audience and recommend that a
budding user researcher take it on, or you’ll suggest to an All Hands meeting
organizer that a junior designer should give a talk about a new pattern they’ve
introduced to the style guide. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sponsorship is all about feeling <em>on the hook</em> for getting
someone to the next level. As someone’s sponsor, you’ll put their name in the
ring for opportunities that will get them the experience and visibility
necessary to grow in their role and at the organization. You will put your
personal reputation on the line on behalf of the person you’re sponsoring, to
help get them visible and developmental assignments. It’s a powerful tool, and
the one most effective at helping someone get to the next level (way more so
than mentoring or coaching!). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Center for Talent Innovation routinely <a href="https://www.talentinnovation.org/_private/assets/TheSponsorDividend_KeyFindingsCombined-CTI.pdf">measures the career benefits of sponsorship</a> (PDF). Their studies have found that when someone has a sponsor, they are way more likely to have access to career-launching work. They’re also more likely to take actions that lead to even <em>more</em> growth and opportunities, like asking their manager for a stretch assignment or a raise. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you’re in sponsorship mode, think about the different
opportunities you have to offer up someone’s name. This might look like:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>giving visible/public recognition (company
“shout outs,” having them present a project demo, thanking them in a launch
email, giving someone’s manager feedback about their good work);</li><li>assigning stretch tasks and projects that are <em>just
beyond</em> their current skill set, to help them grow and have supporting
evidence for a future promotion; or</li><li>opening the door for them to write blog posts,
give company or conference talks, or contribute open-source work.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Remember that members of underrepresented groups are typically <a href="https://hbr.org/2010/08/women-are-over-mentored-but-un">over-mentored, but under-sponsored</a>. These individuals get <em>lots</em> of advice (often unsolicited), coffee outings, and offers to teach them new skills. But it’s much rarer for them to see support that looks like sponsorship. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This isn’t because sponsors intentionally ignore marginalized folks, but because of <em>in-group bias</em>. Because of how our brains (and social networks) work, the people we’re closest to tend to look mostly like us—and we draw from that same pool when we nominate people for projects, for promotions, and for hires. Until I started learning about bias in the workplace, most of the people I sponsored were white, cisgender women, like myself. Since then, I’ve actively worked to sponsor people of color and nonbinary people. It takes effort and intention to combat our default behaviors—but I know you can do it!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Take a look at the daily communications you participate in: your work chat logs, the conversations you have with others, the process for figuring out who should fix a bug or work on a new project, and the processes for making your teams’ work visible (like an architecture review, code review, launch calendar, etc.). You’ll be surprised how many moments there are to sponsor someone throughout an average day. Please put in the time and intention to ensure that you’re sponsoring members of underrepresented groups, too. </p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Business, Career]]>				</dc:subject>

				<dc:date>
					2019-06-06T13:30:51+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Daily Ethical Design]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/lennartoverkamp/">Lennart Overkamp</a>					</author>

				<link>
					https://alistapart.com/article/daily-ethical-design/				</link>

				<guid>
					https://alistapart.com/article/daily-ethical-design/				</guid>

				<description>
					<![CDATA[Suddenly, I realized that the people next to me might be severely impacted by my work.

I was having a quick lunch in the airport. A group of flight attendants sat down at the table next to me and started to prepare for their flight. For a while now, our design team had been working on futuristic concepts for the operations control center of these flight attendants’ airline, pushing ourselves to come up with innovative solutions enabled by the newest technologies. As the control center deals with all activities around flying planes, our concepts touched upon everything and everyone within the airline.

How was I to know what the impact of my work would be on the lives of these flight attendants? And what about the lives of all the other people working at the airline?

Ideally, we would have talked to all the types of employees in the company and tested our concepts with them. But, of course, there was no budget (or time) allocated to do so, not to mention we faced the hurdle of convincing (internal) stakeholders of the need.

Not for the first time, I felt frustrated: practical, real-world constraints prevented me from assessing the impact and quality of my work. They prevented me from properly conducting <i>ethical design</i>.
<h2>What is ethical design?</h2>
Right, good question. A very comprehensive definition of ethical design can be found at <a href="https://www.encyclopedia.com/science/encyclopedias-almanacs-transcripts-and-maps/design-ethics" target="_blank" rel="noopener noreferrer">Encyclopedia.com</a>:
<figure class="quote">
<blockquote>Design ethics concerns moral behavior and responsible choices in the practice of design. It guides how designers work with clients, colleagues, and the end users of products, how they conduct the design process, how they determine the features of products, and how they assess the ethical significance or moral worth of the products that result from the activity of designing.</blockquote>
</figure>
In other words, ethical design is about the “goodness”—in terms of benefit to individuals, society, and the world—of how we collaborate, how we practice our work, and what we create. There’s never a black-and-white answer for whether design is good or bad, yet there are a number of areas for designers to focus on when considering ethics.
<h3>Usability</h3>
Nowadays usability has conquered a spot as a basic requirement for each interface; unusable products are considered design failures. And rightly so; we have a moral obligation as designers to create products that are intuitive, safe, and free from possibly life-threatening errors. We were all reminded of usability’s importance by last year’s <a href="https://www.nngroup.com/articles/error-prevention/" target="_blank" rel="noopener noreferrer">accidental nuclear strike warning</a> in Hawaii. What if, instead of a false-positive, the operator had broadcasted a false-negative?
<h3>Accessibility</h3>
Like usability, inclusive design has become a standard item in the requirement list of many designers and companies. (I will never forget that time someone tried to use our website with a screen reader—and got absolutely stuck at the cookie message.) Accessible design benefits all, as it attempts to cover as many needs and capabilities as possible. Yet for each design project, there are still a lot of tricky questions to answer. Who gets to benefit from our solutions? Who is (un)intentionally left out? Who falls outside the “target customer segment”?
<h3>Privacy</h3>
Another day, another Facebook privacy scandal. As we’re progressing into the Data Age, the topic of privacy has become almost synonymous with design ethics. There’s a reason why more and more people use <a href="https://duckduckgo.com/traffic" target="_blank" rel="noopener noreferrer">DuckDuckGo</a> as an alternative search engine to Google. Corporations have access to an abundance of personal information about consumers, and as designers we have the privilege—and responsibility—of using this information to shape products and services. We have to consider how much information is strictly necessary and how much people are willing to give up in exchange for services. And how can we make people aware of the potential risks <a href="https://link.springer.com/article/10.1007/s10603-018-9399-7" target="_blank" rel="noopener noreferrer">without overloading them</a>?
<h3>User involvement</h3>
Overlapping largely with privacy, this focus area is about how we deal with our users and what we do with the data that we collect from them. IDEO has recently published <a href="https://lbodre.ideo.com/" target="_blank" rel="noopener noreferrer"><cite>The Little Book of Design Research Ethics</cite></a>, which provides a comprehensive overview of the core principles and guidelines we should follow when conducting design research.
<h3>Persuasion</h3>
Ethics related to persuasion is about to what extent we may influence the behavior and thoughts of our users. It doesn’t take much to bring acceptable, “white hat” persuasion into gray or even dark territories. Conversion optimization, for example, can easily turn into “How do we squeeze out more revenue from our customers by <a href="https://www.fastcompany.com/90306916/were-all-being-manipulated-by-a-b-testing-all-the-time" target="_blank" rel="noopener noreferrer">turning their unconsciousness against them</a>?” Prime examples include Netflix, which convinces us to watch, watch, and watch even more, and Booking.com, which barrages our senses with urgency and social pressure.
<h3>Focus</h3>
The current digital landscape is addictive, distracting, and competing for attention. Designing for focus is about responsibly handling people’s most valuable resource: time. Our challenge is to limit everything that disrupts our users’ attention, lower the addictiveness of products, and create <a href="https://calmtech.com/" target="_blank" rel="noopener noreferrer">calmness</a>. The Center for Humane Technology has started a useful list of <a href="http://humanetech.com/resources" target="_blank" rel="noopener noreferrer">resources</a> for this purpose.
<h3>Sustainability</h3>
What’s the impact of our work on the world’s environment, resources, and climate? Instead of continuously adding new features in the unrelenting scrum treadmill, how could we design for fewer? We’re in the position to create responsible digital solutions that enable sustainable consumer behavior and prevent overconsumption. For example, apps such as <a href="https://www.optimiam.com/" target="_blank" rel="noopener noreferrer">Optimiam</a> and <a href="https://www.optimiam.com/" target="_blank" rel="noopener noreferrer">Too Good To Go</a> allow people to order leftover food that would normally be thrashed. Or consider <a href="https://www.mutum.com/" target="_blank" rel="noopener noreferrer">Mutum</a> and <a href="https://www.peerby.com/one" target="_blank" rel="noopener noreferrer">Peerby</a>, whose peer-to-peer platforms promote the sharing and reuse of owned products.
<h3>Society</h3>
The <a href="https://ledger.humanetech.com/" target="_blank" rel="noopener noreferrer">Ledger of Harms</a> of the Center for Human Technology is a work-in-progress collection of the negative impacts that digital technology has on society, including topics such as relationships, mental health, and democracy. Designers who are mindful of society consider the impact of their work on the global economy, communities, politics, and health.
<figure>

[caption id="attachment_7171650" align="alignnone" width="1200"]<img class="wp-image-7171650 size-full" src="https://alistapart.com/wp-content/uploads/2019/05/daily-ethical-design-fig1-1.jpg" alt="Focus areas of ethical design: user involvement, persuasion, focus, sustainability, society, usability, accessibility, privacy" width="1200" height="848" /> The focus areas of design ethics. That’s a lot to consider![/caption]
<h2>Ethics as an inconvenience</h2>
Ideally, in every design project, we should assess the potential impact in all of the above-mentioned areas and take steps to prevent harm. Yet there are many legitimate, understandable reasons why we often neglect to do so. It’s easy to <i>have</i> moral principles, yet in the real world, with the constraints that our daily life imposes upon us, it’s seldom easy to <em>act</em> according to those principles.

We might simply say it’s inconvenient at the moment. That there’s a lack of time or budget to consider all the ethical implications of our work. That there are many more pressing concerns that have priority right now. We might genuinely believe it’s just a small issue, something to consider later, perhaps. Mostly, we are simply <em>unaware</em> of the possible consequences of our work.

And then there’s the sheer complexity of it all: it’s simply too much to simultaneously focus on. When short on time, or in the heat of approaching deadlines and impatient stakeholders, how do you incorporate all of design ethics’ focus areas?

Where do you even start?
<h2>Ethics as a structural practice</h2>
For these reasons, I believe we need to elevate design ethics to a more practical level. We need to find ways to make ethics not an afterthought, not something to be considered separately, but rather something that’s so ingrained in our process that not doing it means <em>not</em> doing design at all.

The only way to overcome the “inconvenience” of acting ethically is to practice <em>daily</em> ethical design: ethics structurally integrated in our daily work, processes, and tools as designers. No longer will we have to rely on the exceptions among us; those extremely principled who are brave enough to stand up against the system no matter what kind of pressure is put upon them. Because the system will be on our side.

By applying ethics daily and structurally in our design process, we’ll be able to identify and neutralize in a very early stage the potential for mistakes and misuse. We’ll increase the quality of our design and our practices simply because we’ll think things through more thoroughly, in a more conscious and structured manner.

But perhaps most important is that we’ll establish a new standard for design. A standard that we can sell to our clients as the way design should be done, with ethical design processes and deliverables already included. A standard that can be taught to design students so that the newest generation of designers doesn’t know any better than to apply ethics, always.
<h2>How to practice daily ethical design?</h2>
At this point we’ve arrived at the question of <em>how</em> we can structurally integrate ethics into our design process. How do we make sure that our daily design decisions will result in a product that’s usable and accessible; protects people’s privacy, agency, and focus; and benefits both society and nature?

I want to share with you some best practices that I’ve identified so far, and how I’ve tried to apply them during a recent project at Mirabeau. The goal of the project was to build a web application that provides a shaver manufacturer’s factory workers insight into the real-time availability of production materials.
<h3>Connect to your organization’s mission and values</h3>
By connecting our designs to the mission and values of the companies we work for, we can structurally use our design skills in a <a href="http://strategicdesignbook.com/" target="_blank" rel="noopener noreferrer">strategic manner</a>, for moral purposes. We can challenge the company to truly live up to its promises and support it in carrying out its mission. This does, however, require you to be aware of the company’s values, and to compare these to your personal values.

As I had worked with our example client before, I knew it was a company that takes care of its employees and has a strong focus on creating a better world. During the kick-off phase, we used a strategy pyramid to structure the client’s mission and values, and to agree upon success factors for the project. We translated the company’s customer-facing brand guidelines to employee-focused design principles that maintained the essence of the organization.
<h3>Keep track of your assumptions</h3>
Throughout our entire design process, we make assumptions for each decision that we take. By structurally keeping track of these assumptions, you’ll never forget about the limitations of your design and where the potential risks lie in terms of (harmful) impact on users, the project, the company, and society.

In our example project, we listed our assumptions about user goals, content, and functionalities for each page of the application. If we were not fully sure about the value for end users, or the accuracy of a user goal, we marked it as a <i>value assumption</i>. When we were unsure if data could be made available, we marked this as a <i>data (feasibility) assumption</i>. If we were not sure whether a feature would add to the manufacturer’s business, we marked it as a <i>scope assumption</i>. Every week, we tested our assumptions with end users and business stakeholders through user tests and sprint demos. Each design iteration led to new questions and assumptions to be tested the next week.
<h3>Aim to be proven wrong</h3>
While our assumptions are the <em>known</em> unknowns, there are always <em>unknown</em> unknowns that we aren’t aware of but could be a huge risk for the quality and impact of our work. The only way we can identify these is by applying the scientific principle of <a href="https://en.wikipedia.org/wiki/Falsifiability" target="_blank" rel="noopener noreferrer"><i>falsifiability</i></a>: seeking actively to be proven <em>wrong</em>. Only outsiders can point out to us what we miss as an individual or as a team.

In our weekly user tests, we included factory workers and stakeholders with different disciplines, from different departments, and working in different contexts, to identify the edge cases that could break our concept. On one occasion, this made us reconsider the entirety of our concept. Still, we could have done better: although scalability to other factories was an important success factor, we were unable to gather input from those other factories during the project. We felt our only option was to mention this as a risk (“limit to scalability”).
<h3>Use the power of checklists</h3>
Let’s face it: <a href="https://medium.com/ux-power-tools/50-things-you-probably-forgot-to-design-7a288b0ef914" target="_blank" rel="noopener noreferrer">we forget things</a>. (Without scrolling up the page, can you name all the focus areas of design ethics?) This is where checklists help us out: they provide knowledge in the world, so that we don’t have to process it in our easily overwhelmed memory. Simple yet powerful, a checklist is an essential tool to practice daily ethical design.

In our example project, we used checklists to maintain an overview of questions and assumptions to user test, checking whether we included our design principles properly, and assessing whether we complied to the client’s values, design principles, and the agreed-upon success factors. In hindsight, we could also have taken a moment during the concept phase to go through the list of focus areas for design ethics, as well as have taken a more structural approach to check accessibility guidelines.
<h2>The main challenge for daily ethical design</h2>
Most ethics focus areas are quite tangible, where design decisions have immediate, often visible effects. While certainly challenging in their own right, they’re relatively easy to integrate in our daily practice, especially for experienced designers.

<i>Society</i> and the <i>environment</i>, however, are more intangible topics; the effects of our work in these areas are distant and uncertain. I’m sure that when Airbnb was first conceived, the founders did not consider the magnitude of its <a href="https://www.bbc.com/news/business-45083954" target="_blank" rel="noopener noreferrer">disruptive impact</a> on the housing market. The same goes for Instagram, as its role in <a href="https://www.gq.com/story/fast-fashion-streetwear-brands-of-instagram" target="_blank" rel="noopener noreferrer">creating demand for fast fashion</a> must have been hard to foresee.

Hard, but not impossible. So how do we overcome this challenge and make the impact that we have on society and the environment more immediate, more <em>daily</em>?
<h3>Conduct Dark Reality sessions</h3>
The ancient Greek philosopher Socrates used a series of questions to gradually uncover the invalidity of people’s beliefs. In a very similar way, we can uncover the assumptions and potential disastrous consequences of our concepts in a ‘Dark Reality’ session, a form of <a href="https://uxplanet.org/can-speculative-design-make-ux-better-design-trend-4-4-ce8d13148e5d" target="_blank" rel="noopener noreferrer">speculative design</a> that focuses on stress-testing a concept with challenging questions.

We have to ask ourselves—or even better, somebody outside our team has to ask <em>us</em>— questions such as, “What is the lifespan of your product? What if the user base will be in the millions? What are the long-term effects on economy, society, and the environment? Who benefits from your design? Who loses? Who is excluded? And perhaps most importantly, how could your design be misused? (For more of these questions, Alan Cooper provided a great list in his <a href="https://interaction18.ixda.org/program/keynote--alan-cooper/" target="_blank" rel="noopener noreferrer">keynote</a> at Interaction 18.)

The back-and-forth Q&amp;A of the Dark Reality session will help us consider and identify our concept’s weaknesses and potential consequences. As it is a team effort, it will spark discussion and uncover differences in team members’ ethical values. Moreover, the session will result in a list of questions and assumptions that can be tested with potential users and subject matter experts. In the project for the airline control center, it resulted in more consideration for the human role in automatization and how digital interfaces can continue to support human capabilities (instead of replacing them), and reflection on the role of airports in future society.

The dark reality session is best conducted during the convergent parts of the <a href="https://www.designcouncil.org.uk/news-opinion/design-process-what-double-diamond" target="_blank" rel="noopener noreferrer">double diamond</a>, as these are the design phases in which we narrow down to realistic ideas. It’s vital to have a questioner from outside the team with strong interviewing skills and who doesn’t easily accept an answer as sufficient. There are helpful tools available to help structure the session, such as the <a href="http://tarotcardsoftech.artefactgroup.com/" target="_blank" rel="noopener noreferrer">Tarot Cards of Tech</a> and these <a href="https://www.ethicsfordesigners.com/tools" target="_blank" rel="noopener noreferrer">ethical tools</a>.
<h2>Take a step back to go forward</h2>
As designers, we’re optimists by nature. We see the world as a set of problems that we can solve systematically and creatively if only we try hard enough. We intend well. However, merely having the <em>intention</em> to do good is not going to be enough. Our mindset comes with the pitfall of (dis)missing potential disastrous consequences, especially under pressure of daily constraints. That’s why we need to regularly, systematically take a step back and consider the future impact of our work. My hope is that the practical, structural mindset to ethics introduced in this article will help us agree on a higher standard for design.</figure>]]>				</description>

				<dc:subject>
					<![CDATA[Design]]>				</dc:subject>

				<dc:date>
					2019-05-30T14:30:24+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Trans-inclusive Design]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/erin-white/">Erin White</a>					</author>

				<link>
					https://alistapart.com/article/trans-inclusive-design/				</link>

				<guid>
					https://alistapart.com/article/trans-inclusive-design/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Late one night a few years ago, a panicked professor emailed me: “My transgender student’s legal name is showing on our online discussion board. How can I keep him from being outed to his classmates?” Short story: we couldn’t. The professor created an offline workaround with the student. Years later this problem persists not just in campus systems, but in many systems we use every day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To anyone who’d call that an unusual situation, it’s not. We are all already designing for trans users—<a href="https://ajph.aphapublications.org/doi/10.2105/AJPH.2016.303578">1 in 250 people</a> in the US identifies as transgender or gender non-binary (based on current estimates), and the <a href="https://pediatrics.aappublications.org/content/141/3/e20171683">number is rising</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We are web professionals; we can do better than an offline workaround. The choices we make impact the online and offline experiences of real people who are trans, non-binary, or gender-variant—choices that can affirm or exclude, uplift or annoy, help or harm. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The rest of this article assumes you agree with the concept that trans people are human beings who deserve dignity, respect, and care. If you are seeking a <a href="https://transequality.org/about-transgender">primer on trans-related vocabulary and concepts</a>, please read up and come back later.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’m going to cover issues touching on content, images, forms, databases, IA, privacy, and AI—just enough to get you thinking about the decisions you make every day and some specific ideas to get you started.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><em>“Tried making a Bitmoji again, but I always get disillusioned immediately by their binary gender model from literally step 1 and end up not using it. I don’t feel represented.”</em></p><cite><em>Editorial note: All personal statements quoted in this article have been graciously shared with the express consent of the original authors.</em></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2>How we can get things right</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Gender is expansively misconstrued as some interchangeable term for anatomical features. Unlike the constellation of <a href="https://slate.com/technology/2018/11/sex-binary-gender-neither-exist.html">human biological forms</a> (our sex), <a href="https://thesocietypages.org/trot/2018/11/26/the-social-construction-of-gender-and-sex/">gender is culturally constructed</a> and varies depending on where you are in the world. It has its own diversity. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Asking for gender when it is not needed; limiting the gender options users can select; assuming things about users based on gender; or simply excluding folks from our designs are all ways we reify the man-woman gender binary in design decisions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Names are fundamentally important</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If we do nothing else, <a href="https://emmah.net/names.html">we must get names right</a>. Names are the difference between past and present, invalidation and affirmation, and sometimes safety and danger. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Yet, many of the systems we use and create don’t offer name flexibility. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Many programmers and designers have a few <a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/">misconceptions about names</a>, such as assuming people have one moniker that they go by all the time, despite how common it is for names to change over a lifetime. People might update them after a change in marital status, family situation, or gender, or perhaps someone is known by a nickname, westernized name, or variation on a first name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In most locales, <a href="https://medium.com/gender-2-0/but-why-don-t-you-change-your-name-edb29297a73f">legally changing names</a> is extremely difficult, extremely expensive, requires medical documentation, or is completely out of the question. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Changes to name <em>and</em><strong> </strong>gender marker are even more complicated; they tend to be two separate, long-drawn-out processes. To make matters worse, <a href="https://www.lgbtmap.org/equality-maps">laws vary from state to state</a> within the U.S. and most only recognize two genders—man and woman—rather than allowing non-binary options.Not all trans people change their names, but for those who do, it’s a serious and significant decision that shouldn’t be sabotaged. We can design systems that protect the lives and privacy of our users, respect the fluid nature of personal identity, and act as an <a href="http://www.accessiblesociety.org/topics/technology/eleccurbcut.htm">electronic curb cut</a> that helps everyone in the process.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Deadnaming</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One need only search Twitter for “deadname app” to get an idea of how apps can leave users in the lurch. Some of the most alarming examples involve apps and sites that facilitate real-life interactions (which already involve a measure of risk for everyone).</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Lyft made it completely impossible for me to change my name on its app even when it was legally changed. I reached out to their support multiple times and attempted to delete the account and start over with no result. I was completely dependent on this service for groceries, appointments, and work, and was emotionally exhausted every single time I needed a ride. I ended up redownloading Uber - even though there was a strike against the service - which I felt awful doing. But Uber allowed me to change my name without any hoops to jump through, so for the sake of my mental health, I had to.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Trans people are more likely to experience financial hardship, so using payment apps to ask for donations is often necessary. Some of these <a href="https://www.change.org/p/paypal-get-paypal-to-add-a-preferred-name-section">services may reveal private information</a> as a matter of course, leaving them exposed and potentially at risk.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are also ramifications when linked services rely on our data sources for name information, instigating an unpredictable cascade effect with little or no recourse to prevent the sharing of sensitive details. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These are examples of deadnaming. <a href="https://www.healthline.com/health/transgender/deadnaming">Deadnaming</a> is what happens when someone’s previous or birth name is used, rather than the name the person uses now. Deadnaming is invalidating at the least, even as a faux pas, but can be psychologically devastating at the other extreme, even putting lives at risk.The experiences of trans, non-binary, or gender-variant folk can vary widely, and they live in <a href="https://www.ustranssurvey.org/reports">disparate conditions</a> throughout the world. Many are thriving and <a href="https://www.tdor.co/">creating new and joyful ways</a> to resist and undo gender norms, despite the <a href="https://www.advocate.com/commentary/2014/02/11/op-ed-why-are-narratives-around-transgender-people-always-so-negative">common negative narrative</a> around trans lives. Others can face hardship; trans people are more likely to be unstably housed, underemployed, underpaid, and targets of violence in and out of their homes, workplaces, and intimate relationships. The ramifications are amplified for people of color and those with disabilities, as well as those in precarious living/working situations and environments where exposure can put them in harm’s way.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Design for name changes</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong><em>Here</em></strong>’<strong><em>s what we can do:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Design for renaming.</strong> Emma Humphries’ <a href="http://adventuresinrenaming.net/2015/09/05/Design-for-Renaming/">talk on renaming</a> covers this nicely. <a href="https://www.fastcompany.com/90165071/how-tech-giants-design-for-transgender-users-or-dont">Airbnb</a> has developed policies and procedures for users who’ve transitioned, allowing users to keep their review histories intact with amended names and/or pronouns.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Get rid of </strong><a href="https://en.wikipedia.org/wiki/Facebook_real-name_policy_controversy"><strong>“real name” requirements</strong></a><strong>.</strong> Allow people to use names they go by rather than their legal first names.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Clarify </strong><a href="https://twitter.com/duckinator/status/545934151610675200"><strong>when you actually need</strong></a><strong> a legal name</strong>, and only use that in conjunction with a display name field.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Have a name change process</strong> that allows users to change their names without legal documentation. (It’s likely that you have procedures for marriage-related name changes already.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Ensure users can still change their display names</strong> when connecting with other data sources to populate users’ names.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Don’t place onerous restrictions on changes.</strong> Once someone creates a username, web address, or profile URL, <a href="https://support.spotify.com/is/account_payment_help/account_help/change-my-username/">allow them to change it</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Draft a code of conduct</strong> if you’re part of an online community, and make sure to include policies around deadnaming. <a href="https://www.theverge.com/2018/11/27/18113344/twitter-trans-user-hateful-content-misgendering-deadnaming-ban">Twitter banned deadnaming</a> last year.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Allow people to be forgotten. </strong>When people delete their accounts for whatever reason, help them make sure that their data is not lingering in your systems or in other places online.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Update the systems users don’t see, too</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Identity management systems can be a mess, and name changes can reveal the failures among those systems, including hidden systems that users don’t see. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One Twitter user’s health insurance company <a href="https://twitter.com/Foone/status/1118026782811152384">kept their ID number between jobs but changed their gender</a>. Another user updated their display name but got an <a href="https://twitter.com/JaceyChase/status/1105177162884280321">email confirmation addressed to their legal name</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hidden information can also undermine job opportunities:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“At a university as a student, I transitioned and changed my name and gender to be a woman. TWELVE YEARS later after being hired to work in the Libraries, the Libraries HR coordinator emailed me that I was listed as male still in the database. He changed it on my asking, but I have to wonder how long… was it a factor in my being turned down for jobs I applied to… who had seen that..?”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Emma Humphries <a href="http://adventuresinrenaming.net/2015/09/05/Design-for-Renaming/">details the hidden systems</a> that can carry out-of-date information about users. Her tips for database design include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Don’t use emails as unique IDs.</li><li>Use an invariant user ID internally, and link the user’s current email and display name to it.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Images</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Visuals should allow room for representation and imagination rather than a narrow subset of the usual suspects: figures who appear to be straight, cisgender, able-bodied, and white/Caucasian. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What we can do is feature a variety of gender presentations, as well as not assume someone’s gender identity if they buy certain items.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some companies, like <a href="https://www.wildfang.com/">Wildfang</a> and <a href="https://www.shethinx.com">Thinx</a>, offer a broad array of images representing different races, body sizes, and gender expressions on their websites and in their ads. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Many are also choosing not to hire models, <a href="https://www.bullockandjones.com/">allowing room for imagination</a> and versatility:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“I got a catalog for a ‘classic menswear company’ that features zero photos of any person of any gender. Now if only I could afford an $800 blazer...”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p><strong><em>Here's what we can do:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Actively recruit diverse groups of models for photos.</strong> And pay them!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>If you can’t shoot your own photos</strong>, Broadly has recently launched a <a href="https://broadly.vice.com/en_us/article/qvyq8p/transgender-non-binary-stock-photos-gender-spectrum-collection">trans-inclusive stock photo collection</a> free for wide use. <a href="https://getavataaars.com/">Avataaars</a> allows users to create an avatar without selecting a gender.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Information architecture</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>How we organize information is a political act and a non-neutral decision (<a href="https://www.journals.uchicago.edu/doi/abs/10.1086/669547">librarians have said this</a> for a while). This applies to gender-based classifications.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Many companies that sell consumer goods incorporate gender into their product design and marketing, no matter what. The product itself might be inherently gender-neutral (such as clothing, <a href="http://lettoysbetoys.org.uk/why-it-matters/">toys</a>, <a href="https://twitter.com/erinrwhite/status/1124058358091329537">bikes</a>, or even <a href="https://www.reddit.com/r/pointlesslygendered/comments/bi9imq/bros%C3%A9/">wine</a>), but these design and marketing decisions can directly impact the information architecture of websites.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><em>Here's what we can do:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Evaluate why any menus, categories, or tags are based on gender</strong>, and how it can be done differently:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Nike has a ‘gender neutral’ clothing category, yet it’s listed under ‘men’ and ‘women’ in the website architecture. 🤔”<em> </em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2>Forms</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Forms, surveys, and other types of data gathering are surefire ways to include or exclude people. If you ask for information you don’t need or limit the options that people can select, you risk losing them as users.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><em>Here's what we can do:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Critically evaluate </strong><a href="http://juliepagano.com/blog/2015/06/12/on-forms-and-personal-information/"><strong>why you are asking for personal information</strong></a>, including gender. Will that information be used to help someone, or sell things to your advertisers?</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>"Why does the @CocaCola site make me select a gender just to make a purchase? Guess my family isn't getting personalized Coke bottles for Christmas."</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p><strong>If you are asking users for their gender</strong>, you’d better have a good reason and options that include everyone. A gender field should have <a href="https://uxdesign.cc/designing-forms-for-gender-diversity-and-inclusion-d8194cf1f51">more than two options</a>, or should ask for pronouns instead. When including more than binary options, actually record the selections in your databases <a href="https://journals.sagepub.com/doi/full/10.1177/1461444815621527">instead of reclassifying</a> answers as male/female/null, otherwise you risk losing trust when disingenuous design decisions become public.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Honorifics</strong> are infrequently used these days, but it takes little work to add <a href="https://en.wikipedia.org/wiki/Gender-neutral_title">gender-inclusive titles</a> to a list. For English-language sites, “Mx.” can go alongside “Mr.” and “Ms.” without fuss. United Airlines <a href="https://www.msn.com/en-ph/autos/other/united-airlines-becomes-first-us-carrier-to-launch-non-binary-gender-booking-option/ar-BBV6nhz?li=AAxCjZq">debuted this option</a> earlier this year.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Content</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong><em>Here's what we can do:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Avoid inappropriately gendered language.</strong> Your style guide should include <a href="https://en.wikipedia.org/wiki/Singular_they">singular “they”</a> instead of “he/she” or “s/he,” and exclude <a href="https://writingcenter.unc.edu/tips-and-tools/gender-inclusive-language/">frequently used words and phrases</a> that exclude trans folks. Resources such as this <a href="https://radicalcopyeditor.com/2017/08/31/transgender-style-guide/">transgender style guide</a> are a quick way to check your language and benchmark your own content guidelines.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Check assumptions about gender and biology.</strong> Not everyone who can have a period, can get pregnant, or can breastfeed identifies as women or mothers—just as not everyone who identifies as women or mothers can have periods, can get pregnant, or can breastfeed. Thinx, a company that sells period underwear, has an inclusive tagline: “For people with periods.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Avoid reinforcing the binary.</strong> Groups of people aren’t “ladies and gentlemen” or “boys and girls.” They are folks, people, colleagues, “y’all,” or even “<a href="https://twitter.com/texaninnyc/status/954334612905394177">all y’all</a>.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Pronouns aren’t “preferred”</strong>—they’re just pronouns. Calling pronouns preferred suggests that they’re optional and are replacing a “true” pronoun.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Avoid reinforcing stereotypes</strong> about trans people. Not all trans people are interested in medically transitioning, or in “<a href="https://en.wikipedia.org/wiki/Passing_(gender)">passing</a>.” They also aren’t fragile or in need of a savior. Gender is separate from sexual orientation. You can’t “tell” someone is trans.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Privacy, surveillance, and nefarious AI</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We’ve heard the story of algorithms <a href="https://www.forbes.com/sites/kashmirhill/2012/02/16/how-target-figured-out-a-teen-girl-was-pregnant-before-her-father-did/">identifying a pregnant teen</a> before her parents knew. What if an algorithm predicts or reveals information about your gender identity?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Inferences.</strong> Users’ genders are assumed based on their purchase/browsing history.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Recommendations.</strong> A user bought something before they transitioned and it shows up in “recommended because you bought X.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Predictions.</strong> Users’ genders are not only inferred but used to predict something else based on characteristics of that gender. Even if you don’t tell big websites what your gender is, they assume one for you based on your interests. That kind of reductive essentialism can harm people of all genders. One of this article’s peer readers summed this up:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>“Gender markers are a poor proxy for tastes. I like dresses, cute flats, and Raspberry Pis.”</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p><strong>Flashbacks.</strong> “On this day” algorithms remind users of the past, sometimes for better (“I’ve come so far”) or for worse (“<a href="https://meyerweb.com/eric/thoughts/2014/12/24/inadvertent-algorithmic-cruelty/">don’t remind me</a>”). </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>AI-based discrimination</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>AI and surveillance software can also reinforce norms about what men’s and women’s bodies should look like, resulting in <a href="https://www.nytimes.com/2019/04/17/opinion/tsa-transgender.html?searchResultPosition=1">harrowing airline travel experiences</a> and creating <a href="https://modelviewculture.com/pieces/the-hidden-dangers-of-ai-for-queer-and-trans-people">AI-based discrimination</a> for trans people.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, too, can <a href="https://www.theverge.com/2017/8/22/16180080/transgender-youtubers-ai-facial-recognition-dataset">trans folks’ public data be used for projects that they don’t consent to</a>. Just because we can use AI for something—like <a href="https://twitter.com/rosa/status/1119736583521853441?s=12">determining gender based on a face scan</a>—doesn’t mean we <em>should</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><em>Here's what we can do:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Read up and proactively mitigate bias. </strong><a href="https://www.dazeddigital.com/science-tech/article/43211/1/trans-algorithm-machine-learning-bias-discrimination-chelsea-manning-edit">AI and algorithms<strong><em> </em></strong>can reflect developers’ biases</a> and perpetuate stereotypes about how people’s bodies should look. Use AI to <a href="https://qz.com/work/1577597/this-ai-voice-is-gender-neutral-unlike-siri-and-alexa/">challenge the gender binary</a><strong><em> </em></strong>rather than reinforce it. Design for <a href="https://medium.com/greater-than-experience-design/privacy-by-design-7b1165d045e0">privacy first</a><strong><em>.</em></strong><strong> </strong>Hire more types of people who represent different lived experiences.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Toward a gender-inclusive web</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The ideas I’ve offered here are only starting points. How you choose to create space for trans folks is going to be up to you. I don’t have all the solutions here, and there is no singular trans experience. Also, language, definitions, and concepts change <em>rapidly</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We shouldn’t use any of these facts as excuses to keep us from trying.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When we start to think about design impact on trans folks, the ideas we bring into question can benefit<strong> </strong>everyone. Our designs should go beyond including—they should affirm and validate. Ideally, they will also reflect organizational cultures that support diversity and inclusion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><em>Here's what we can do:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Keep learning. Learn <a href="https://transequality.org/issues/resources/supporting-the-transgender-people-in-your-life-a-guide-to-being-a-good-ally">how to be a good ally</a>. Pay trans user research participants to help validate your design assumptions. Hire trans people on your team and don't hang them out to dry or make them do all the hard work around inclusion and equity. Make it everyone’s job to build a more just web and world for everybody.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Editorial note: All personal statements quoted in this article have been graciously shared with the express consent of the original authors.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>This article is stronger and wiser thanks to Mica McPheeters at </em>A List Apart<em> and the following peer readers. Thank you.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Jake Atchison<br>Katherine Deibel, Ph.D.<br>Justina F. Hall<br>Austyn Higgs<br>Emma Humphries<br>Tara Robertson<br>Levi R. Walter</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Community, Content, Design, Industry &amp; Business, Information Architecture, User Experience]]>				</dc:subject>

				<dc:date>
					2019-05-09T12:45:49+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Everyday Information Architecture: Auditing for Structure]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/lisamaria/">Lisa Maria Martin</a>					</author>

				<link>
					https://alistapart.com/article/everyday-information-architecture-excerpt/				</link>

				<guid>
					https://alistapart.com/article/everyday-information-architecture-excerpt/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Just as we need to
understand our content before we can recategorize it, we need to understand the
system before we try to rebuild it. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Enter the structural audit: a review of the site focused solely on its menus, links, flows, and hierarchies. I know you thought we were done with audits back in Chapter 2, but hear me out! Structural audits have an important and singular purpose: to help us build a new sitemap.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This isn’t about recreating the <em>intended</em> sitemap—no, this is about experiencing the site the way users experience it. This audit is meant to track and record the structure of the site as it <em>really</em> works.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Setting up the template</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, we’re gonna need another spreadsheet. (Look, it is not <em>my</em> fault that spreadsheets are the perfect system for recording audit data. I don’t make the rules.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because this involves building a spreadsheet from scratch, I keep a “template” at the top of my audit files—rows that I can copy and paste into each new audit (Fig 4.1). It’s a color-coded outline key that helps me track my page hierarchy <em>and</em> my place in the auditing process. When auditing thousands of pages, it’s easy to get dizzyingly lost, particularly when coming back into the sheet after a break; the key helps me stay oriented, no matter how deep the rabbit hole.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6000665,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://alistapart.com/wp-content/uploads/2019/04/4.1-outline-key.png" alt="" class="wp-image-6000665"/><figcaption><strong>Fig 4.1:</strong> I use a color-coded outline key to record page hierarchy as I move through the audit. Wait, how many circles did Dante write about?</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Color-coding</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Color is the easiest, quickest way to convey page depth at a
glance. The repetition of black text, white cells, and gray lines can have a
numbing effect—too many rows of sameness, and your eyes glaze over. My coloring
may result in a spreadsheet that looks like a twee box of macarons, but at
least I know, instantly, where I am.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The exact colors don’t really matter, but I find that the
familiar mental model of a rainbow helps with recognition—the cooler the row color,
the deeper into the site I know I must be. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The nested rainbow of pages is great when you’re auditing neatly nested pages—but most websites color outside the lines (pun <em>extremely</em> intended) with their structure. I leave my orderly rainbow behind to capture duplicate pages, circular links, external navigation, and other inconsistencies like:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>On-page navigation.</strong> A bright text color denotes pages that are accessible via links within page content—not through the navigation. These pages are critical to site structure but are easily overlooked. Not every page <em>needs</em> to be displayed in the navigation menus, of course—news articles are a perfect example—but sometimes this indicates publishing errors. </li><li><strong>External links.</strong> These are navigation links that go to pages outside the domain. They might be social media pages, or even sites held by the same company—but if the domain isn’t the one I’m auditing, I don’t need to follow it. I <em>do </em>need to note its existence in my spreadsheet, so I color the text as the red flag that it is. (As a <em>general </em>rule, I steer clients away from placing external links in navigation, in order to maintain a consistent experience. If there’s a need to send users offsite, I’ll suggest using a contextual, on-page link.)</li><li><strong>Files.</strong> This mostly refers to PDFs, but can include Word files, slide decks, or anything else that requires downloading. As with external links, I want to capture anything that might disrupt the in-site browsing experience. (My audits usually filter out PDFs, but for organizations that overuse them, I’ll audit them separately to show how much “website” content is locked inside.) </li><li><strong>Unknown hierarchy.</strong> Every once in a while, there’s a page that doesn’t seem to belong anywhere—maybe it’s missing from the menu, while its URL suggests it belongs in one section and its navigation scheme suggests another. These pages need to be discussed with their owners to determine whether the content needs to be considered in the new site.</li><li><strong>Crosslinks.</strong> These are navigation links for pages that canonically live in a different section of the site—in other words, they’re duplicates. This often happens in footer navigation, which may repeat the main navigation or surface links to deeper-but-important pages (like a Contact page or a privacy policy). I don’t want to record the same information about the page twice, but I do need to know where the crosslink is, so I can track different paths to the content. I color these cells gray so they don’t draw my attention.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Note that coloring every row (and indenting, as you’ll see in a moment) can be a tedious process—unless you rely on Excel’s formatting brush. That tool applies all the right styles in just two quick clicks. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Outlines and page IDs</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Color-coding is half of my template; the other half is the outline, which is how I keep track of the structure itself. (No big deal, just <em>the entire point of the spreadsheet</em>.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Every page in the site gets assigned an ID. <em>You</em> are assigning this number; it doesn’t correspond to anything but your own perception of the navigation. This number does three things for you: </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>It associates pages with their place in the site hierarchy. Decimals indicate levels, so the page ID can be decoded as the page’s place in the system.</li><li>It gives each page a unique identifier, so you can easily refer to a particular page—saying “2.4.1” is much clearer than “you know that one page in the fourth product category?”</li><li>You can keep using the ID in other contexts, like your sitemap. Then, later, when your team decides to wireframe pages 1.1.1 and 7.0, you’ll all be working from the same understanding.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Let me be completely honest: things might get goofy sometimes
with the decimal outline. There will come a day when you’ll find yourself
casually typing out “1.2.1.2.1.1.1,” and at that moment, a fellow auditor somewhere
in the universe will ring a tiny gong for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to the IDs, I indent each level, which reinforces
both the numbers and the colors. Each level down—each digit in the ID, each
change in color—gets one indentation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I identify top-level pages with a single number: 1.0, 2.0, 3.0, etc. The next page level in the first section would be 1.1, 1.2, 1.3, and so on. I mark the homepage as 0.0, which is mildly controversial—the homepage is technically a level above—but, look: I’ve got a lot of numbers to write, and I don’t need those numbers to tell me they’re under the homepage, so this is my system. Feel free to use the numbering system that work best for you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Criteria and columns</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>So we’ve got some secret codes for tracking hierarchy and depth, but what about other structural criteria? What are our spreadsheet <em>columns </em>(Fig 4.2)? In addition to a column for Page ID, here’s what I cover:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>URL.</strong>
I don’t consistently fill out this column, because I already collected this
data back in my automated audit. I include it every twenty entries or so (and
on crosslinks or pages with unknown hierarchy) as another way of tracking
progress, and as a direct link into the site itself. </li><li><strong>Menu
label/link.</strong> I include this column only if I notice a lot of
mismatches between links, labels, and page names. Perfect agreement isn’t
required; but frequent, significant differences between the language that <em>leads</em>
to a page and the language <em>on the page itself</em> may indicate
inconsistencies in editorial approach or backend structures. </li><li><strong>Name/headline.
</strong>Think of this as “what does the page owner call it?” It may be
the H1, or an H2; it may match the link that brought you here, or the page
title in the browser, or it may not. </li><li><strong>Page
title.</strong> This is for the name of the page in the metadata. Again,
I don’t use this in every audit—particularly if the site uses the same long,
branded metadata title for every single page—but frequent mismatches can be
useful to track.</li><li><strong>Section.</strong>
While the template can indicate your level, it can’t tell you which area of the
site you’re in—unless you write it down. (This may differ from the section data
you applied to your automated audit, taken from the URL structure; here, you’re
noting the section where the page appears.)</li><li><strong>Notes.</strong>
Finally, I keep a column to note specific challenges, and to track patterns I’m
seeing across multiple pages—things like “Different template, missing subnav”
or “Only visible from previous page.” My only caution here is that if you’re planning
to share this audit with another person, make sure your notes are—<em>ahem</em>—professional.
Unless you enjoy anxiously combing through hundreds of entries to revise comments
like “Wow haha nope” (not that I would know anything about that).</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6000666} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/04/4.2-audit-columns.png?w=960" alt="" class="wp-image-6000666"/><figcaption><strong>Fig 4.2:</strong> A semi-complete structural audit. This view shows a lot of second- and third-level pages, as well as pages accessed through on-page navigation.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Depending on your project needs, there may be other columns, too.
If, in addition to using this spreadsheet for your new sitemap, you want to use
it in migration planning or template mapping, you may want columns for new
URLs, or template types.&nbsp; </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can get your own copy of my template as <a href="http://bkaprt.com/eia/04-01/">a downloadable Excel file</a>. Feel free to tweak it to suit your style and needs; I know I always do. As long as your spreadsheet helps you understand the hierarchy and structure of your website, you’re good to go.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Gathering data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p> Setting up the template is one thing—actually filling it out is, admittedly, another. So how do we go from a shiny, new, naive spreadsheet to a complete, jaded, seen-some-<em>stuff</em> spreadsheet? I always liked Erin Kissane’s description of the process, from <em>The Elements of Content Strategy</em>: </p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Big inventories involve a lot of black coffee, a few late nights, and a playlist of questionable but cheering music prominently featuring the soundtrack of object-collecting video game Katamari Damacy. It takes quite a while to exhaustively inventory a large site, but it’s the only way to really understand what you have to work with.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>We’re not talking about the same kind of exhaustive inventory she
was describing (though I <em>am</em> recommending Katamari music). But even our
less intensive approach is going to require your butt in a seat, your eyes on a
screen, and a certain amount of patience and focus. You’re about to walk, with
your fingers, through most of a website.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Start on the homepage. (We know that not all users start there,
but we’ve got to have some kind of order to this process or we’ll never get
through it.) Explore the main navigation before moving on to secondary
navigation structures. Move left to right, top to bottom (assuming that is your
language direction) over each page, looking for the links. You want to record
every page you can reasonably access on the site, noting navigational and
structural considerations as you go. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My advice as you work:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Use two monitors.</strong> I struggle immensely without two screens in this process, which involves constantly switching between spreadsheet and browser in rapid, tennis-match-like succession. If you don’t have access to multiple monitors, find whatever way is easiest for you to quickly flip between applications.</li><li><strong>Record what you see.</strong> I generally note all visible menu links at the same level, then exhaust one section at a time. Sometimes this means I have to adjust what I initially observed, or backtrack to pages I missed earlier. You might prefer to record all data across a level before going deeper, and that would work, too. Just be consistent to minimize missed links.</li><li><strong>Be alert to inconsistencies.</strong> On-page links, external links, and crosslinks can tell you a lot about the structure of the site, but they’re easy to overlook. Missed on-page links mean missed content; missed crosslinks mean duplicate work. (Note: the further you get into the site, the more you’ll start seeing crosslinks, given all the pages you’ve already recorded.) </li><li><strong>Stick to what’s structurally relevant.</strong> A single file that’s not part of a larger pattern of file use is not going to change your understanding of the structure. Neither is recording every single blog post, quarterly newsletter, or news story in the archive. For content that’s dynamic, repeatable, and plentiful, I use an <em>x</em> in the page ID to denote more of the same. For example, a news archive with a page ID of 2.8 might show just one entry beneath it as 2.8.x; I don’t need to record every page up to 2.8.791 to understand that there are 791 articles on the site (assuming I noted that fact in an earlier content review). </li><li><strong>Save</strong>. Save <em>frequently</em>. I cannot even begin to speak of the unfathomable heartbreak that is Microsoft Excel burning an unsaved audit to the ground. &nbsp;</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Knowing which links to follow, which to record, and how best to
untangle structural confusion—that improves with time and experience. Performing
structural audits will not only teach you about your current site, but will
help you develop fluency in systems thinking—a boon when it comes time to
document the new site.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Information Architecture]]>				</dc:subject>

				<dc:date>
					2019-04-18T12:45:30+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Nothing Fails Like Success]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/zeldman/">Jeffrey Zeldman</a>					</author>

				<link>
					https://alistapart.com/article/nothing-fails-like-success/				</link>

				<guid>
					https://alistapart.com/article/nothing-fails-like-success/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>A family buys a house they can’t afford. They can’t make their monthly mortgage payments, so they borrow money from the Mob. Now they’re in debt to the bank and the Mob, live in fear of losing their home, and must do whatever their creditors tell them to do.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Welcome to the internet, 2019.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Buying something you can’t afford, and borrowing from organizations that don’t have your (or your customers’) best interest at heart, is the business plan of most internet startups. It’s why our digital services and social networks in 2019 are a <a href="https://en.wikipedia.org/wiki/Criticism_of_Facebook">garbage fire</a> of <a href="https://www.dailydot.com/layer8/fake-news-sites-list-facebook/">lies</a>, <a href="https://www.ajc.com/lifestyles/religion/teens-and-the-distorted-reality-social-media/XnWAduy5s1I3rUL1yH1ZZO/">distortions</a>, <a href="https://www.nytimes.com/2017/05/31/technology/twitter-facebook-google-europe-hate-speech.html">hate speech</a>, <a href="https://www.theguardian.com/media-network/media-network-blog/2014/may/13/internet-confirmation-bias">tribalism</a>, <a href="https://www.verywellhealth.com/social-medias-role-in-privacy-breaches-2317518">privacy violations</a>, <a href="https://en.wikipedia.org/wiki/Elizabeth_Holmes">snake oil</a>, <a href="https://www.businessinsider.com/doctors-warn-google-twitter-facebook-anti-vaxxers-2019-3">dangerous idiocy</a>, <a href="https://www.nytimes.com/2017/09/29/opinion/mark-zuckerberg-facebook.html">deflected responsibility</a>, and whole new categories of unpunished ethical breaches and crimes. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From optimistically conceived origins and message statements about making the world a better place, too many websites and startups have become <a href="https://alistapart.com/article/canary-in-a-coal-mine-how-tech-provides-platforms-for-hate">the leading edge of bias and trauma</a>, especially for marginalized and at-risk groups.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Why (almost) everything sucks</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Twitter, for instance, needs a lot of views for advertising to pay at the massive scale its investors demand. A lot of views means you can’t be too picky about what people share. If it’s misogynists or racists inspiring others who share their heinous beliefs to bring back the 1930s, hey, it’s measurable. If a powerful elected official’s out-of-control tweeting reduces churn and increases views, not only can you pay your investors, you can even take home a bonus. Maybe it can pay for that next meditation retreat.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can cloak this basic economic trade-off in fifty layers of bullshit—say you believe in freedom of speech, or that the antidote to bad speech is more speech—but the fact is, hate speech is profitable. It’s killing our society and our planet, but it’s profitable. And the remaining makers of Twitter—the ones whose consciences didn’t send them packing years ago—no longer have a choice. The guy from the Mob is on his way over, and the <a href="https://www.urbandictionary.com/define.php?term=vig">vig</a> is due.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Not to single out Twitter, but this is clearly the root cause of its seeming indifference to the destruction hate speech is doing to society…and will ultimately do to the platform. (But by then Jack will be able to afford to <a href="https://www.vanityfair.com/news/2018/12/jack-dorsey-vipassana-debacle-why-people-hate-twitter">meditate</a> full-time.)<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Other companies do other evil things to pay their vig. When you owe the Mob, you have no choice. Like sell our data. Or lie about medical research.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There <em>are</em> internet companies (like <a href="https://basecamp.com/">Basecamp</a>, or like <a href="https://automattic.com/">Automattic</a>, makers of <a href="https://wordpress.com/">WordPress.com</a>, where I work) that charge money for their products and services, and use that money to grow their business. I wish more internet companies could follow that model, but it’s hard to retrofit a legitimate business model to a product that started its life as free. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And there are even some high-end news publications, such as <em>The New York Times</em>, <em>The</em> <em>Washington Post</em>, and <em>The Guardian</em>, that survive on a combination of advertising and flexible paywalls. But these options are not available to most digital publications and businesses.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Return with me to those <a href="http://johnstyn.com/">Halcyon</a> days…</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Websites and internet startups used to be you and your friends making cool stuff for your other friends, and maybe building new friendships and even small communities in the process. (Even in 2019, that’s still how <em>some</em> websites and startups begin—as labors of love, fashioned by idealists in their spare time.) <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because they are labors of love; because we’ve spent 25 years training people to believe that <a href="https://en.wikipedia.org/wiki/Information_wants_to_be_free">websites, and news, and apps, and services should be free</a>; because, when we begin a project, we can scarcely believe anyone will ever notice or care about it—for these reasons and more, the things we make digitally, especially on the web, are offered free of charge. We labor on, excited by positive feedback, and delighted to discover that, if we keep at it, our little community will grow.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most such labors of love disappear after a year or two, as the creators drift out of touch with each other, get “real” jobs, fall in love, start families, or simply lose interest due to lack of attention from the public or the frustrations of spending weekends and holidays grinding away at an underappreciated site or app while their non-internet friends spend those same hours either having fun or earning money.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Along came money</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>But <em>some</em> of these startup projects catch on. And when they do, a certain class of investor smells ROI. And the naive cofounders, who never expected their product or service to really get anywhere, can suddenly envision themselves rich and Zuckerberg-famous. Or maybe they like the idea of quitting their day job, believing in themselves, and <em>really going for it</em>. After all, that is an empowering and righteous vision. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Maybe they believe that by taking the initial investment, they can do more good—that their product, if developed further, can actually help people. This is often the motivation behind agreeing to an initial investment deal, especially in categories like healthcare.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Or maybe the founders are problem solvers. Existing products or services in a given category have a big weakness. The problem solvers are sure that their idea is better. With enough capital, and a slightly bigger team, they can show the world how to do it right. Most inventions that have moved humankind forward followed exactly this path. It should lead to a better world (and it sometimes does). It shouldn’t produce privacy breaches and fake medicine and election-influencing bots and all the other plagues of our emerging digital civilization. So why does it?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Content wants to be paid</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Primarily it is because these businesses have no business model. They were made and given away free. Now investors come along who can pay the founders, buy them an office, give them the money to staff up, and even help with PR and advertising to help them grow faster.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now there are salaries and insurance and taxes and office space and travel and lecture tours and sales booths at SXSW, but there is still no charge for the product.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And the investor seeks a big return.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And when the initial investment is no longer enough to get the free-product company to scale to the big leagues, that’s when the really big investors come in with the really big bucks. And the company is suddenly famous overnight, and “everybody” is using the product, and it’s still free, and the investors are still expecting a giant payday.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Like I said—a house you can’t afford, so you go into debt to the bank and the Mob.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The money trap</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here it would be easy to blame capitalism, or at least untrammeled, under-regulated capitalism, which has often been a source of human suffering—not that capitalism, properly regulated, can’t also be a force for innovation which <em>ameliorates</em> suffering. That’s the dilemma for our society, and where you come down on free markets versus governmental regulation of businesses should be an intellectual decision, but these days it is a label, and we hate our neighbors for coming down a few degrees to the left or right of us. But I digress and oversimplify, and this isn’t a complaint about late stage capitalism per se, although it may smell like one.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>No, the reason small companies created by idealists too frequently turn into consumer-defrauding forces for evil has to do with the amount of profit each new phase of investor expects to receive, and how quickly they expect to receive it, and the fact that the products and services are still free. And<a href="https://www.quora.com/Who-originally-suggested-that-if-youre-not-paying-for-the-product-you-are-the-product"> you know what they say about free products</a>.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Nothing fails like success</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A friend who’s a serial entrepreneur has started maybe a dozen internet businesses over the span of his career. They’ve all met a need in the marketplace. As a consequence, they’ve all found customers, and they’ve all made a profit. Yet his investors are rarely happy. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>“Most of my startups have the decency to fail in the first year,” one investor told him. My friend’s business was taking in several million dollars a year and was slowly growing in staff and customers. It was profitable. Just not obscenely so. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And internet investors don’t want a modest return on their investment. They want an obscene profit right away, or a brutal loss, which they can write off their taxes. Making them a hundred million for the ten million they lent you is good. Losing their ten million is also good—they pay a lower tax bill that way, or they use the loss to fold a company, or they make a profit on the furniture while writing off the business as a loss…whatever rich people can legally do under our tax system, which is quite a lot. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What these folks don’t want is to lend you ten million dollars and get twelve million back.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You and I might go, “Wow! I just made two million dollars just for being privileged enough to have money to lend somebody else.” And that’s why you and I will never have ten million dollars to lend anybody. Because we would be grateful for it. And we would see a free two million dollars as a life-changing gift from God. But investors don’t think this way.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>We didn’t start the fire, but we roasted our weenies in it</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As much as we pretend to be a religious nation, our society worships these investors and their profits, worships companies that turn these profits, worships above all the myth of overnight success, which we use to motivate the hundreds of thousands of workers who will work nights and weekends for the owners in hopes of cashing in when the stock goes big. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most times, even if the stock does go big, the owner has found a way to devalue it by the time it does. Owners have brilliant advisers they pay to figure out how to do those things. You and I don’t.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>A Christmas memory</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I remember visiting San Francisco years ago and scoring an invitation to Twitter’s Christmas party through a friend who worked there at the time. Twitter was, at the time, an app that worked via SMS and also via a website. Period.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some third-party companies, starting with my friends at <a href="https://iconfactory.com/">Iconfactory</a>, had built iPhone apps for people who wanted to navigate Twitter via their newfangled iPhones instead of the web. Twitter itself hadn’t publicly addressed mobile and might not even have been thinking about it.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Although Twitter was transitioning from a fun cult thing—used by bloggers who attended <a href="https://www.sxsw.com/festivals/interactive/">SXSW Interactive</a> in 2007—to an emerging cultural phenomenon, it was still quite basic in its interface and limited in its abilities. Which was not a bad thing. There is art in constraint, value in doing one thing well. As an outsider, if I’d thought about it, I would have guessed that Twitter’s entire team consisted of no more than 10 or 12 wild-eyed, sleep-deprived true believers. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Imagine my surprise, then, when I showed up at the Christmas party and discovered I’d be sharing dinner with hundreds of designers, developers, salespeople, and executives instead of the handful I’d naively anticipated meeting. (By now, of course, Twitter employs many thousands. It’s still not clear to an outsider why so many workers are needed.)<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But one thing is clear: somebody has to pay for it all.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Freemium isn’t free</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Employees, let alone thousands of them, on inflated Silicon Valley engineer salaries, aren’t free. Health insurance and parking and meals and HR and travel and expense accounts and meetups and software and hardware and office space and amenities aren’t free. Paying for all that while striving to repay investors tenfold means making a buck any way you can. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since the product was born free and a paywall isn’t feasible, Twitter must rely on that old standby: advertising. Advertising may not generate enough revenue to keep your hometown newspaper (or most podcasts and content sites) in business, but at Twitter’s scale, it pays. <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It pays because Twitter has so many active users. And what keeps those users coming back? Too often, it’s the dopamine of relentless tribalism—folks whose political beliefs match and reinforce mine in a constant unwinnable war of words with folks whose beliefs differ.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, half the antagonists in a given brawl may be bots, paid for in secret by an organization that wants to make it appear that most citizens are against Net Neutrality, or that most Americans oppose even the most basic gun laws, or that our elected officials work for lizard people. The whole system is broken and dangerous, but it’s also addictive, and we can’t look away. From our naive belief that content wants to be free, and our inability to create businesses that pay for themselves, we are turning our era’s greatest inventions into engines of doom and despair.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Your turn</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>So here we are. Now what do we do about it? <br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s too late for current internet businesses (victims of their own success) that are mortgaged to the hilt in investor gelt. But could the next generation of internet startups learn from older, stable companies like Basecamp, and design products that pay for themselves via customer income—products that profit slowly and sustainably, allowing them to scale up in a similarly slow, sustainable fashion?<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The self-payment model may not work for apps and sites that are designed as modest amusements or communities, but maybe those kinds of startups don’t need to make a buck—maybe they can simply be labors of love, like the websites we loved in the 1990s and early 2000s.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Along those same lines, can the <a href="https://indieweb.org/">IndieWeb</a>, and products of IndieWeb thinking like <a href="https://micro.blog/">Micro.blog</a>, save us? Might they at least provide an alternative to the toxic aspects of our current social web, and restore the ownership of our data and content? And before you answer, <a href="https://indieweb.org/Getting_Started">RTFM</a>.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On an individual and small collective basis, the IndieWeb already works. But does an IndieWeb approach scale to the general public? If it doesn’t scale <em>yet</em>, can we, who envision and design and build, create a new generation of tools that will help give birth to a flourishing, independent web? One that is as accessible to ordinary internet users as Twitter and Facebook and Instagram? <a href="https://en.wikipedia.org/wiki/Tantek_%C3%87elik">Tantek Çelik</a> thinks so, and he’s been right about the web for nearly 30 years. (For more about what Tantek thinks, <a href="http://5by5.tv/bigwebshow/186">listen to our conversation</a> in Episode № 186 of The Big Web Show.)<br>Are these approaches mere whistling against a hurricane? Are most web and internet users content with how things are? What do <em>you</em> think? Share your thoughts on your personal website (dust yours off!) or (irony ahoy!) on your indie or mainstream social networks of choice using hashtag <strong>#LetsFixThis</strong>. I can’t wait to see what you have to say.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Community, Industry]]>				</dc:subject>

				<dc:date>
					2019-04-11T09:30:51+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Accessibility for Vestibular Disorders: How My Temporary Disability Changed My Perspective]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/facundo-corradini/">Facundo Corradini</a>					</author>

				<link>
					https://alistapart.com/article/accessibility-for-vestibular/				</link>

				<guid>
					https://alistapart.com/article/accessibility-for-vestibular/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>Accessibility can be tricky. There are plenty of conditions to take into consideration, and many technical limitations and weird exceptions that make it quite hard to master for most designers and developers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I never considered myself an accessibility&nbsp;<em>expert</em>, but I took great pride in making my projects Web Content Accessibility Guidelines (WCAG) compliant…ish. They would pass most automated tests, show perfectly in the accessibility tree, and work quite well with keyboard navigation. I would even try (and fail) to use a screen reader every now and then.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But life would give me a lesson I would probably never learn otherwise: last October, my&nbsp;<em>abled</em>&nbsp;life took a drastic change—I started to feel extremely dizzy, with a constant sensation of falling or spinning to the right. I was suffering from a bad case of vertigo caused by labyrinthitis that made it impossible to get&nbsp;<em>anything</em>&nbsp;done.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Vertigo can have a wide range of causes, the most common being a viral infection or tiny calcium crystal free floating in the inner ear, which is pretty much our body’s accelerometer. Any disruption in there sends the brain confusing signals about the body’s position, which causes really heavy nausea, dizziness, and headaches. If you’ve ever felt seasick, it’s quite a similar vibe. If not, think about that feeling when you just get off a rollercoaster…it’s like that, only&nbsp;<em>all day long</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For most people,&nbsp;<a href="https://vestibular.org/understanding-vestibular-disorders/types-vestibular-disorders/benign-paroxysmal-positional-vertigo">vertigo is something they’ll suffer just once in a lifetime</a>, and it normally goes away in a week or two. Incidence is really high, with some estimates claiming that up to 40% of the population suffers vertigo at least once in their lifetime. Some people live all their lives with it (or with similar symptoms caused by a range of diseases and syndromes grouped under the umbrella term of&nbsp;<em>vestibular disorders</em>), with 4% of US adults reporting chronic problems with balance, and an additional 1.1% reporting chronic dizziness,&nbsp;<a href="https://www.asha.org/PRPSpecificTopic.aspx?folderid=8589942134&amp;section=Incidence_and_Prevalence">according to the American Speech-Language-Hearing Association</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my case, it was a little over a month. Here’s what I learned while going through it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section1">Slants can trigger vestibular symptoms</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It all started as I was out for my daily jog. I felt slightly dizzy, then suddenly my vision got totally distorted. Everything appeared further away, like looking at a fun house’s distortion mirror. I stumbled back home and rested; at that moment I believed I might have over-exercised, and that hydration, food, and rest were all I needed. Time would prove me wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What I later learned was that experiencing vertigo is a constant war between one of your inner ears telling the brain “everything is fine, we’re level and still” and the other ear shouting “oh my God, we’re falling, we’re falling!!!” Visual stimuli can act as an intermediary, supporting one ear’s message or the other’s. Vertigo can also work in the opposite way, with the dizziness interfering with your vision.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I quickly found that when symptoms peaked, staring at a distant object would ease the falling sensation&nbsp;<em>somewhat</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the same fashion, some visual stimuli would worsen it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Vertical slants were a big offender in that sense. For instance, looking at a subtle vertical slant (the kind that you’d have to look at twice to make sure it’s not perfectly vertical) on a webpage would instantly trigger symptoms for me. Whether it was a page-long slant used to create some interest beside text or a tiny decoration to mark active tabs, looking at anything with slight slants would instantly send me into the rollercoaster.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Horizontal slants (whatever the degree) and harder vertical slants wouldn’t cause these issues.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My best guess is that slight vertical slants can look like forced perspective and therefore reinforce the falling-from-height sensation, so I would recommend avoiding vertical slants if you can, or make them super obvious. A slight slant looks like perspective, a harder one looks like a triangle.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section2">Target size matters (even on mouse-assisted devices)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After a magnetic resonance imaging (MRI) scan, some tests to discard neurological conditions, and other treatments that proved ineffective, I was prescribed Cinnarizine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cinnarizine is a calcium channel blocker—to put it simply, it prevents the malfunctioning inner ear “accelerometer” from sending incorrect info to the brain.&nbsp;<br>And it worked wonders. After ten days of being barely able to get out of bed, I was finally getting something closer to my normal life. I would still feel dizzy all the time, with some peaks throughout the day, but for the most part, it was much easier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this point, I was finally able to use the computer (but still unable to produce any code at all). To make the best of it, I set on a mission to self-experiment on accessibility for vestibular disorders. In testing, I found that one of the first things that struck me was that I would always miss targets (links and buttons).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’m from the generation that grew up with desktop computers, so using a mouse is second nature. The pointer is pretty much an extension of my mind, as it is for many who use it regularly. But while Cinnarizine helped with the dizziness, it has a common side effect of negatively impacting coordination and fine motor skills (it is recommended not to drive or operate machinery while under treatment). It was not a surprise when I realized it would be much harder to get the pointer to do what I intended.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The common behavior would be: moving the pointer past the link I intended to click, clicking before reaching it at all, or having to try multiple times to click on smaller targets.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.w3.org/WAI/WCAG21/Understanding/target-size.html">Success Criterion 2.5.5 Target Size (Level AAA)</a>&nbsp;of the World Wide Web Consortium (W3C)’s WCAG recommends bigger target sizes so users can activate them easily. The obvious reason for this is that it’s harder to pinpoint targets on smaller screens with coarser inputs (i.e., touchscreens of mobile devices). A fairly common practice for developers is to set bigger target sizes for smaller viewport widths (assuming that control challenges are only touch-related), while neglecting the issue on big screens expected to be used with mouse input. I know I’m guilty of that myself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead of targeting this behavior for just smaller screen sizes, there are plenty of reasons to create larger target sizes on&nbsp;<em>all</em>&nbsp;devices: it will benefit users with limited vision (when text is scaled up accordingly and colors are of sufficient contrast), users with mobility impairments such as hand tremors, and of course, users with difficulty with fine motor skills.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section3">Font size and spacing</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Even while “enjoying” the ease of symptoms provided by the treatment, reading&nbsp;<em>anything</em>&nbsp;still proved to be a challenge for the following three weeks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I was completely unable to use mobile devices while suffering vertigo due to the smaller font sizes and spacing, so I was forced to use my desktop computer for everything.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I can say I was experiencing something similar to users with mild forms of dyslexia or attention disorders: whenever I got to a website that didn’t follow good font styling, I would find myself reading the same line over and over again.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This proves once again that accessibility is intersectional: when we improve things for a particular purpose it usually benefits users with other challenges as well. I used to believe recommendations on font styles were mostly intended for the nearsighted and those who have dyslexia. Turns out they are also critical for those with vertigo, and even for those with some cognitive differences. At the end of the day, everybody benefits from better readability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some actions you can take to improve readability are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Keep line height to at least 1.5 times the font size (i.e.,&nbsp;<code>line-height: 1.5</code>).</li><li>Set the spacing between paragraphs to at least 2.0 times the font size. We can do this by adjusting the margins using relative units such as&nbsp;<code>em</code>.</li><li>Letter spacing should be at least 0.12 times the font size. We can adjust this by using the&nbsp;<code>letter-spacing</code>&nbsp;CSS property, perhaps setting it in a relative unit.</li><li>Make sure to have good contrast between text and its background.</li><li>Keep&nbsp;<code>font-weight</code>&nbsp;at a reasonable level for the given&nbsp;<code>font-family</code>. Some fonts have thin strokes that make them harder to read. When using thinner fonts, try to improve contrast and font size accordingly, even more than what WCAG would suggest.</li><li>Choose fonts that are easy to read. There has been a large and still inconclusive debate on which font styles are better for users, but one thing I can say for sure is that popular fonts (as in fonts that the user might be already familiar with) are generally the least challenging for users with reading issues.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><a href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html">WCAG recommendations on text are fairly clear</a>&nbsp;and fortunately are the most commonly implemented of recommendations, but even they can still fall short sometimes. So, better to follow&nbsp;<a href="http://adrianroselli.com/2015/03/typefaces-for-dyslexia.html#Tips">specific guides on accessible text</a>&nbsp;and your best judgement.&nbsp;<a href="https://www.smashingmagazine.com/2018/09/importance-manual-accessibility-testing/">Passing automated tests does not guarantee actual accessibility.</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another issue on which my experience with vertigo proved to be similar to that of people with dyslexia and attention disorders was how hard it was for me to keep my attention in just one place. In that sense…</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section4">Animations are bad (and parallax is pure evil)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Val Head has already covered&nbsp;<a href="https://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity">visually-triggered vestibular disorders</a>&nbsp;in an outstanding article, so I would recommend giving it a good read if you haven’t already.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To summarize, animations can trigger nausea, dizziness, and headaches in some users, so we should use them purposely and responsibly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While most animations did not trigger my symptoms, parallax scrolling did. I’d never been a fan of parallax to begin with, as I found it confusing. And when you’re experiencing vertigo, the issues introduced by parallax scrolling compound.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Really, there are no words to describe just how bad a simple parallax effect, scrolljacking, or even&nbsp;<code>background-attachment: fixed</code>&nbsp;would make me feel. I would rather jump on one of those 20-G centrifuges astronauts use than look at a website with parallax scrolling.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Every time I encountered it, I would put the bucket beside me to good use and be forced to lie in bed for&nbsp;<em>hours</em>&nbsp;as I felt the room spinning around me, and no meds could get me out of it. It was&nbsp;<em>THAT</em>&nbsp;bad.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Though normal animations did not trigger a reaction as severe, they still posed a big problem. The extreme, conscious, focused effort it took to read would make it such that anything moving on the screen would instantly break my focus, and force me to start the paragraph all over. And I mean&nbsp;<em>anything</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I would constantly find myself reading a website only to have the typical collapsing navigation bar on scroll distract me just enough that I’d totally lose count of where I was at. Autoplaying carousels were&nbsp;<em>so</em>&nbsp;annoying I would delete them using dev tools as soon as they showed up. Background videos would make me get out of the website desperately.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Over time I started using mouse selection as a pointer; a visual indication of what I’d already read so I could get back to it whenever something distracted me. Then I tried custom stylesheets to disable transforms and animations whenever possible, but that also meant many websites having critical elements not appear at all, as they were implemented to start off-screen or otherwise invisible, and show up on scroll.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, deleting stuff via dev tools or using custom stylesheets is not something we can expect 99.99% of our users to even know about.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So if anything, consider reducing animations to a minimum. Provide users with controls to turn off non-essential animations (<a href="https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html">WCAG 2.2.3 Animation from Interactions</a>) and to pause, stop, or hide them (<a href="https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html">WCAG 2.2.2 Pause, Stop, Hide</a>). Implement animations and transitions in such a way that if the user disables them, critical elements still display.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And be extra careful with parallax: my recommendation is to, at the very least, try limiting its use to the header (“hero”) only, and be mindful of getting a smooth, realistic parallax experience. My vertigo self would have said, “<em>just don’t freaking use parallax. Never. EVER.</em>” But I guess that might be a hard idea to sell to stakeholders and designers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also consider learning how to use the&nbsp;<code>prefers-reduced-motion</code>&nbsp;feature query. This is a newer addition to the specs (it’s part of the&nbsp;<a href="https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-reduced-motion">Media Queries Level 5 module</a>&nbsp;, which is at an early Editor’s Draft stage) that allows authors to apply selective styling depending on whether the user has requested the system to minimize the use of animations.&nbsp;<a href="https://caniuse.com/#search=prefers-reduced-motion">OS and browser support for it is still quite limited</a>, but the day will come when we will set any moving thing inside a query for when the user has&nbsp;<code>no-preference</code>, blocking animations from those who choose&nbsp;<code>reduce</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After about a week of wrestling websites to provide a static experience, I remembered something that would prove to be my biggest ally while the vertigo lasted:</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section5">Reader mode</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Some browsers include a “reader mode” that strips the content from any styling choices, isolates it from any distraction, and provides a perfect WCAG compliant layout for the text to maximize readability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is extremely helpful to provide a clear and consistent reading experience throughout multiple websites, especially for users with any kind of reading impairment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I have to confess: before experiencing my vestibular disorder, I had never used Reader Mode (the formal name varies in browsers) or even checked if my projects were compatible with it. I didn’t even think it was such a useful feature, as a quick search for “reader mode” actually returned quite a few threads by users asking how to disable it or how to take the button for it out of Firefox’s address bar. (It seems some people are unwittingly activating it…perhaps the icon is not clear enough.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Displaying the button to access Reader Mode is toggled by browser heuristics, which are based on the use (or not) of semantic tags in a page’s HTML. Unfortunately this meant not all websites provided such a “luxury.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I really wish I wouldn’t have to say this in 2019…but please,&nbsp;<em>please</em>&nbsp;use semantic tags. Correct&nbsp;<a href="https://alistapart.com/article/conversational-semantics">conversational semantics</a>&nbsp;allow your website to be displayed in Reader Mode, and provide a better experience for users of screen readers. Again, accessibility is intersectional.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Reader Mode proved to be extremely useful while my vertigo lasted. But there was something even better:</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section6">Dark color schemes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>By the fourth week, I started feeling mostly fine. I opened Visual Studio Code to&nbsp;<em>try</em>&nbsp;to get back to work. In doing so, it served me well to find one more revelation: a light-text-on-dark-background scheme was SO much easier for me to read. (Though I still was not able to return to work at this time.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I was quite surprised, as I had always preferred light mode with dark-text-on-light-background for reading, and dark mode, with light-text-on-dark for coding. I didn’t know at the time that I was suffering from&nbsp;<em>photophobia</em>&nbsp;(which is a sensitivity to light), which was one of the reasons I found it hard to read on my desktop and to use my mobile device at all.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As far as I know, photophobia is not a common symptom of&nbsp;<em>vestibular disorders</em>, but there are many conditions that will trigger it, so it’s worth looking into for our projects’ accessibility.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CSS is also planning a media query to switch color schemes. Known as&nbsp;<code>prefers-color-scheme</code>, it allows applying styles based on the user’s stated preference for dark or light theming. It’s also part of the Media Queries Level 5 spec, and at the time of writing this article&nbsp;<a href="https://caniuse.com/#search=prefers-color-scheme">it’s only available in Safari Technology Preview</a>, with Mozilla planning to ship it in the upcoming Firefox 67. Luckily there’s a&nbsp;<a href="https://github.com/csstools/css-prefers-color-scheme/blob/HEAD/README-POSTCSS.md">PostCSS plugin</a>&nbsp;that allows us to use it in most modern browsers by turning&nbsp;<code>prefers-color-scheme</code>queries into&nbsp;<code>color-index</code>&nbsp;queries, which have much better support.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If PostCSS is not your cup of tea, or for whatever reason you cannot use that approach to automate switching color schemes to a user’s preference, try at least to provide a theming option in your app’s configuration. Theming has become extremely simple since the release of CSS Custom Properties, so implementing this sort of switch is relatively easy and will greatly benefit anyone experiencing photophobia.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section7">Moving on</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After a month and some days, the vertigo disappeared completely, and I was able to return to work without needing any meds or further treatment. It should stay that way, as for most people it’s a once-in-a-lifetime occurrence.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I went back to my&nbsp;<em>abled</em>&nbsp;life, but the experience changed my mindset for good.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I said before, I always cared for making my projects compatible for people using keyboard navigation and screen readers. But I learned the hard way that there are plenty of “invisible conditions” that are just as important to take into consideration: vestibular disorders,&nbsp;<a href="https://alistapart.com/article/designing-for-cognitive-differences">cognitive differences</a>, dyslexia, and color blindness, just to name a few. I was totally neglecting those most of the time, barely addressing the issues in order to pass automated tests, which means I was unintentionally annoying some users by making websites inaccessible to them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After my experience with vertigo, I’ve turned to an&nbsp;<a href="https://www.24a11y.com/2017/accessibility-first/">accessibility-first approach to design and development</a>. Now I ask myself, “am I leaving anyone behind with this decision?,” before dropping a single line of code. Accessibility should never be an afterthought.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Making sure my projects work from the start for those with difficulties also improves the experience for everyone else. Think about how improving text styles for users with dyslexia, vertigo, or visual problems improves readability for all users, or how being able to control animations or choose a color scheme can be critical for users with attention disorders and photophobia, respectively, while also a nice feature for everybody.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also turned my workflow into a much smoother development experience, as addressing accessibility issues from the beginning can mean a slower start, but it’s also much easier and faster than trying to fix broken accessibility afterwards.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I hope that by sharing my personal experience with vertigo, I’ve illustrated how we can all design and develop a better web for everybody. Remember,&nbsp;<a href="https://uxmag.com/articles/we-re-just-temporarily-abled">we’re all just temporarily abled</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Accessibility, User Experience]]>				</dc:subject>

				<dc:date>
					2019-04-04T01:55:13+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Responsible JavaScript: Part I]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/jeremy-wagner/">Jeremy Wagner</a>					</author>

				<link>
					https://alistapart.com/article/responsible-javascript-part-1/				</link>

				<guid>
					https://alistapart.com/article/responsible-javascript-part-1/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>By the numbers,&nbsp;<a href="https://httparchive.org/reports/state-of-javascript#bytesJs">JavaScript is a performance liability</a>. If the trend persists, the median page will be shipping at least 400 KB of it before too long, and that’s merely what’s&nbsp;<em>transferred</em>. Like other text-based resources, JavaScript is almost always served compressed—but that might be the only thing we’re getting consistently right in its delivery.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unfortunately, while reducing resource transfer time is a big part of that whole performance thing, compression has no effect on how long browsers take to process a script once it arrives in its entirety. If a server sends 400 KB of compressed JavaScript, the actual amount browsers have to process after decompression is north of a megabyte. How well devices cope with these heavy workloads depends, well, on the&nbsp;<em>device</em>.&nbsp;<a href="https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4">Much has been written</a>&nbsp;about how adept various devices are at processing lots of JavaScript, but the truth is, the amount of time it takes to process even a trivial amount of it varies greatly between devices.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Take, for example, this&nbsp;<a href="https://devmode.jeremy.codes/">throwaway project of mine</a>, which serves around 23 KB of uncompressed JavaScript. On a mid-2017 MacBook Pro, Chrome chews through this comparably tiny payload in about 25 ms. On a&nbsp;<a href="https://www.gsmarena.com/nokia_2-8513.php">Nokia 2 Android phone</a>, however, that figure balloons to around 190 ms. That’s not an insignificant amount of time, but in either case, the page gets interactive reasonably fast.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now for the big question: how do you think that little Nokia 2 does on an average page? It chokes. Even on a fast connection, browsing the web on it is an exercise in patience as JavaScript-laden web pages brick it for considerable stretches of time.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6000652} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/04/fig-01-2x.png?w=960" alt="A performance timeline for a JavaScript-heavy website. Most of the timeline is JavaScript." class="wp-image-6000652" /><figcaption><em>Figure 1. A performance timeline overview of a Nokia 2 Android phone browsing on a page where excessive JavaScript monopolizes the main thread.</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>While devices and the networks they navigate the web on are largely improving, we’re eating those gains as trends suggest. We need to use JavaScript&nbsp;<em>responsibly</em>. That begins with understanding&nbsp;<em>what</em>&nbsp;we’re building as well as&nbsp;<em>how</em>&nbsp;we’re building it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section1">The mindset of “sites” versus “apps”</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Nomenclature can be strange in that we sometimes loosely identify things with terms that are inaccurate, yet their meanings are implicitly understood by everyone. Sometimes we overload the term “bee” to also mean “wasp”, even though the differences between bees and wasps are substantial. Those differences can motivate you to deal with each one differently. For instance, we’ll want to destroy a wasp nest, but because bees are highly beneficial and vulnerable insects, we may opt to relocate them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can be just as fast and loose in interchanging the terms “website” and “web app”. The differences between them are less clear than those between yellowjackets and honeybees, but conflating them can bring about painful outcomes. The pain comes in the affordances we allow ourselves when something is merely a “web<em>site</em>” versus a fully-featured “web app.” If you’re making an informational website for a business, you’re less likely to lean on a powerful framework to manage changes in the DOM or implement client-side routing—at least, I&nbsp;<em>hope</em>. Using tools so ill-suited for the task would not only be a detriment to the people who use that site but arguably less productive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When we build a web&nbsp;<em>app</em>, though,&nbsp;<em>look out</em>. We’re installing packages which usher in hundreds—if not&nbsp;<em>thousands</em>—of dependencies,&nbsp;<a href="https://snyk.io/blog/malicious-code-found-in-npm-package-event-stream/">some of which</a>&nbsp;we’re not sure are even safe. We’re also writing complicated configurations for module bundlers. In this frenzied, yet ubiquitous, sort of dev environment, it takes knowledge and vigilance to ensure what gets built is fast and accessible. If you doubt this, run&nbsp;<a href="https://docs.npmjs.com/cli/ls.html#prod--production"><code>npm ls --prod</code></a>&nbsp;in your project’s root directory and&nbsp;<a href="https://gist.github.com/malchata/dae0a011033846e2cb44d315b0496f0d">see if you recognize everything in that list</a>. Even if you do, that doesn’t account for third party scripts—of which I’m sure your site has at least a few.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What we tend to forget is that the environment websites and web apps occupy is one and the same. Both are subject to the&nbsp;<em>same environmental pressures</em>&nbsp;that the large gradient of networks and devices impose. Those constraints don’t suddenly vanish when we decide to call what we build “apps”, nor do our users’ phones gain magical new powers when we do so.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It’s our responsibility to evaluate who uses what we make, and accept that the conditions under which they access the internet can be different than what we’ve assumed. We need to know the purpose we’re trying to serve, and only&nbsp;<em>then</em>&nbsp;can we build something that admirably serves that purpose—<a href="https://css-tricks.com/simple-boring/">even if it isn’t exciting to build</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That means reassessing our reliance on JavaScript and how the use of it—particularly to the exclusion of HTML and CSS—can tempt us to adopt unsustainable patterns which harm performance and accessibility.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section2">Don’t let frameworks force you into unsustainable patterns</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I’ve been witness to some strange discoveries in codebases when working with teams that depend on frameworks to help them be highly productive. One characteristic common among many of them is that poor accessibility and performance patterns often result. Take the React component below, for example:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>import React, { Component } from "react";
import { validateEmail } from "helpers/validation";

class SignupForm extends Component {
  constructor (props) {
    super(props);

    this.handleSubmit = this.handleSubmit.bind(this);
    this.updateEmail = this.updateEmail.bind(this);
    this.state.email = "";
  }

  updateEmail (event) {
    this.setState({
      email: event.target.value
    });
  }

  handleSubmit () {
    // If the email checks out, submit
    if (validateEmail(this.state.email)) {
      // ...
    }
  }

  render () {
    return (
      <div>
        <span class="email-label">Enter your email:</span>
        
        <button>Sign Up</button>
      </div>
    );
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There are some notable accessibility issues here:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>A form that doesn’t use a&nbsp;<code>&lt;form&gt;</code>&nbsp;element is&nbsp;<em>not</em>&nbsp;a form. Indeed, you could paper over this by specifying&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Form_Role"><code>role="form"</code></a>&nbsp;in the parent&nbsp;<code>&lt;div&gt;</code>, but if you’re building a form—and this&nbsp;<em>sure looks like one</em>—use a&nbsp;<code>&lt;form&gt;</code>&nbsp;element with the proper&nbsp;<code>action</code>&nbsp;and&nbsp;<code>method</code>&nbsp;attributes. The&nbsp;<code>action</code>&nbsp;attribute is crucial, as it ensures the form will still do&nbsp;<em>something</em>&nbsp;in the absence of JavaScript—provided the component is server-rendered, of course.</li><li>A&nbsp;<code>&lt;span&gt;</code>&nbsp;is not a substitute for a&nbsp;<code>&lt;label&gt;</code>&nbsp;element, which provides accessibility benefits&nbsp;<code>&lt;span&gt;</code>s don’t.</li><li>If we intend to do something on the client side prior to submitting a form, then we should move the action bound to the <code>&lt;button&gt;</code> element's <code>onClick</code> handler to the <code>&lt;form&gt;</code>&nbsp;element’s&nbsp;<code>onSubmit</code> handler.</li><li>Incidentally, why use JavaScript to validate an email address when HTML5 offers form validation controls in almost every browser back to IE 10? There’s an opportunity here to rely on the browser and use an&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email">appropriate input type</a>, as well as the&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#The_required_attribute"><code>required</code></a>&nbsp;attribute—but be aware that getting this to work right with screen readers&nbsp;<a href="https://developer.paciellogroup.com/blog/2019/02/required-attribute-requirements/">takes a little know-how</a>.</li><li>While not an accessibility issue, this component doesn't rely on any state or lifecycle methods, which means it can be refactored into a stateless functional component, which uses considerably less JavaScript than a full-fledged React component.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Knowing these things, we can refactor this component:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>import React from "react";

const SignupForm = props =&gt; {
  const handleSubmit = event =&gt; {
    // Needed in case we're sending data to the server XHR-style
    // (but will still work if server-rendered with JS disabled).
    event.preventDefault();

    // Carry on...
  };
  
  return (
    &lt;form method="POST" action="/signup" onSubmit={handleSubmit}&gt;
      &lt;label for="email" class="email-label"&gt;Enter your email:&lt;/label&gt;
      &lt;input type="email" id="email" required /&gt;
      &lt;button&gt;Sign Up&lt;/button&gt;
    &lt;/form&gt;
  );
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Not only is this component now more accessible, but it also uses less JavaScript. In a world that’s drowning in JavaScript, deleting lines of it should feel downright therapeutic.&nbsp;<a href="https://alistapart.com/article/paint-the-picture-not-the-frame">The browser gives us so much for free</a>, and we should try to take advantage of that as often as possible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is not to say that inaccessible patterns occur&nbsp;<em>only</em>&nbsp;when frameworks are used, but rather that a sole preference for JavaScript&nbsp;<em>will</em>&nbsp;eventually surface gaps in our understanding of HTML and CSS. These knowledge gaps will often result in mistakes we may not even be aware of. Frameworks can be useful tools that increase our productivity, but continuing education in core web technologies is essential to creating&nbsp;<em>usable</em>&nbsp;experiences, no matter what tools we choose to use.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section3">Rely on the web platform and you’ll go far, fast</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While we’re on the subject of frameworks, it must be said that the web platform is a formidable framework of its own. As the previous section showed, we’re better off when we can rely on established markup patterns and browser features. The alternative is to reinvent them, and invite all the pain such endeavors all but guarantee us, or worse: merely&nbsp;<em>assume</em>&nbsp;that the author of every JavaScript package we install has solved the problem comprehensively and thoughtfully.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="section4">SINGLE PAGE APPLICATIONS</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One of the tradeoffs developers are quick to make is to adopt the single page application (SPA) model, even if it’s not a fit for the project. Yes, you&nbsp;<em>do</em>&nbsp;gain better perceived performance with the client-side routing of an SPA, but what do you&nbsp;<em>lose</em>? The browser’s own navigation functionality—albeit synchronous—provides a slew of benefits. For one, history is managed according to&nbsp;<a href="https://html.spec.whatwg.org/#the-history-interface">a complex specification</a>. Users without JavaScript—be it by&nbsp;<a href="https://kryogenix.org/code/browser/everyonehasjs.html">their own choice or not</a>—won’t lose access altogether. For SPAs to remain available when JavaScript is not, server-side rendering suddenly becomes a thing you have to consider.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6000653} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/04/fig2.png?w=960" alt="Two series of screenshots. On the left, we have a blank screen for several seconds until the app appears after 5.24s. On the right, the basic components appear at 4ms and the site is fully usable at 5.16s." class="wp-image-6000653" /><figcaption><em>Figure 2. A comparison of an example app loading on a slow connection. The app on the left depends entirely upon JavaScript to render a page. The app on the right renders a response on the server, but then uses&nbsp;</em><a href="https://reactjs.org/docs/react-dom.html#hydrate">client-side hydration</a><em>&nbsp;to attach components to the existing server-rendered markup.</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Accessibility is also harmed if a client-side router fails to let people know what content on the page has changed. This can leave those reliant on assistive technology to suss out what changes have occurred on the page, which can be an arduous task.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then there’s our old nemesis: overhead. Some client-side routers are very small, but when you&nbsp;<em>start</em>&nbsp;with&nbsp;<a href="https://bundlephobia.com/result?p=react-dom@16.8.2">React</a>,&nbsp;<a href="https://bundlephobia.com/result?p=react-router@4.3.1">a compatible router</a>, and possibly even&nbsp;<a href="https://bundlephobia.com/result?p=redux@4.0.1">a state management library</a>, you’re accepting that there’s a certain amount of code you can never optimize away—approximately 135 KB in this case. Carefully consider what you’re building and whether a client side router is worth the tradeoffs you’ll inevitably make. Typically, you’re better off without one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you’re concerned about the perceived navigation performance, you&nbsp;<em>could</em>&nbsp;lean on&nbsp;<a href="https://www.w3.org/TR/resource-hints/#prefetch-link-relation-type"><code>rel=prefetch</code></a>&nbsp;to speculatively fetch documents on the same origin. This has a dramatic effect on improving perceived loading performance of pages, as the document is immediately available in the cache. Because prefetches are done at a low priority, they’re also less likely to contend with critical resources for bandwidth.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7171594} -->
<figure class="wp-block-image"><img src="https://alistapart.com/wp-content/uploads/2019/04/fig3.png?w=960" alt="Screenshot showing a list of assets loaded on a webpage. 'writing/' is labeled as prefetched on initial navigation. This asset is then loaded in 2ms when actually requested by the user." class="wp-image-7171594" /><figcaption>Figure 3. The HTML for the writing/ URL is prefetched on the initial page. When the writing/ URL is requested by the user, the HTML for it is loaded instantaneously from the browser cache.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The primary drawback with link prefetching is that you need to be aware that it&nbsp;<em>can</em>&nbsp;be potentially wasteful.&nbsp;<a href="https://github.com/GoogleChromeLabs/quicklink">Quicklink</a>, a tiny link prefetching script from Google, mitigates this somewhat by checking if the current client is on a slow connection—or has&nbsp;<a href="https://support.google.com/chrome/answer/2392284?co=GENIE.Platform%3DAndroid&amp;hl=en">data saver mode</a>&nbsp;enabled—and avoids prefetching links on cross-origins by default.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://adactio.com/articles/13796">Service workers</a>&nbsp;are also hugely beneficial to perceived performance for returning users, whether we use client side routing or not—<a href="https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#for_best_performance_bypass_the_network_for_navigations">provided you know the ropes</a>.&nbsp;<a href="https://developers.google.com/web/ilt/pwa/caching-files-with-service-worker">When we precache routes with a service worker</a>, we get many of the same benefits as link prefetching, but with a much greater degree of control over requests and responses. Whether you think of your site as an “app” or not, adding a service worker to it is perhaps one of the most responsible uses of JavaScript that exists today.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="section5">JAVASCRIPT ISN’T THE SOLUTION TO YOUR LAYOUT WOES</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If we’re installing a package to solve a layout problem, proceed with caution and ask “what am I trying to accomplish?” CSS is&nbsp;<a href="https://twitter.com/rachelandrew/status/1088870059240505344"><em>designed to do this job</em></a>, and requires no abstractions to use effectively. Most layout issues JavaScript packages attempt to solve, like&nbsp;<a href="https://www.npmjs.com/package/flexibility">box placement, alignment, and sizing</a>,&nbsp;<a href="https://www.npmjs.com/package/shave">managing text overflow</a>, and even&nbsp;<a href="https://www.npmjs.com/package/lost">entire layout systems</a>, are solvable with CSS&nbsp;<em>today</em>. Modern layout engines like Flexbox and Grid are supported well enough that we shouldn’t need to start a project with any layout framework. CSS&nbsp;<em>is</em>&nbsp;the framework. When we have&nbsp;<a href="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/">feature queries</a>, progressively enhancing layouts to adopt new layout engines is suddenly&nbsp;<a href="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/">not so hard</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-css"} -->
<pre class="wp-block-code language-css"><code>/* Your mobile-first, non-CSS grid styles goes here */

/* The @supports rule below is ignored by browsers that don't
   support CSS grid, _or_ don't support @supports. */
@supports (display: grid) {
  /* Larger screen layout */
  @media (min-width: 40em) {
    /* Your progressively enhanced grid layout styles go here */
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Using JavaScript solutions for layout and presentations problems is not new. It was something we did when we lied to ourselves in 2009 that every website had to look in IE6 exactly as it did in the more capable browsers of that time. If we’re still developing websites to look the same in every browser in 2019, we should reassess our development goals. There will&nbsp;<em>always</em>&nbsp;be some browser we’ll have to support that can’t do everything those modern, evergreen browsers can. Total visual parity on all platforms is not only a pursuit made in vain, it’s the principal foe of&nbsp;<a href="https://alistapart.com/article/understandingprogressiveenhancement">progressive enhancement</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="section6">I’m not here to kill JavaScript</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Make no mistake, I have no ill will toward JavaScript. It’s given me a career and—if I’m being honest with myself—a source of enjoyment for over a decade. Like any long-term relationship, I learn more about it the more time I spend with it. It’s a mature, feature-rich language that only gets more capable and elegant with every passing year.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Yet, there are times when I feel like JavaScript and I are at odds. I&nbsp;<em>am</em>&nbsp;critical of JavaScript. Or maybe more accurately, I’m critical of how we’ve developed a tendency to view it as a first resort to building for the web. As I pick apart yet another bundle not unlike a tangled ball of Christmas tree lights, it’s become clear that the web is&nbsp;<em>drunk</em>&nbsp;on JavaScript. We reach for it for almost everything, even when the occasion doesn’t call for it. Sometimes I wonder how vicious the hangover will be.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a series of articles to follow, I’ll be giving more practical advice to follow to stem the encroaching tide of excessive JavaScript and how we can wrangle it so that&nbsp;<em>what</em>&nbsp;we build for the web is usable—or at least&nbsp;<em>more</em>&nbsp;so—for everyone everywhere. Some of the advice will be preventative. Some will be mitigating “hair of the dog” measures. In either case, the outcomes will hopefully be the same. I believe that we all love the web and want to do right by it, but I want us to think about how to make it more resilient and inclusive for all.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Application Development, JavaScript]]>				</dc:subject>

				<dc:date>
					2019-03-28T09:07:40+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Canary in a Coal Mine: How Tech Provides Platforms for Hate]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/tatianamac/">Tatiana Mac</a>					</author>

				<link>
					https://alistapart.com/article/canary-in-a-coal-mine-how-tech-provides-platforms-for-hate/				</link>

				<guid>
					https://alistapart.com/article/canary-in-a-coal-mine-how-tech-provides-platforms-for-hate/				</guid>

				<description>
					<![CDATA[<!-- wp:paragraph -->
<p>As I write this, the world is sending its thoughts and prayers to our Muslim cousins. The Christchurch act of terrorism has once again reminded the world that white supremacy’s rise is very real, that its perpetrators are no longer on the fringes of society, but centered in our holiest places of worship. People are begging us to not share videos of the mass murder or the hateful manifesto that the white supremacist terrorist wrote. That’s what he wants: for his proverbial message of hate to be spread to the ends of the earth.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We live in a time where you can stream a mass murder and hate crime from the <em>comfort of your home</em>. Children can access these videos, too.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I work through the pure pain, unsurprised, observing the toll on Muslim communities (as a non-Muslim, who matters least in this event), I think of the imperative role that our industry plays in this story.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At time of writing, YouTube has failed to ban and to remove this video. If you search for the video (which I strongly advise against), it still comes up with a mere content warning; the same content warning that appears for casually risqué content. You can bypass the warning and watch people get murdered. <a href="https://afrotech.com/tech-companies-are-scrambling-to-remove-video-of-the-christchurch-shooting">Even when the video gets flagged and taken down, new ones get uploaded.</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.theverge.com/2019/2/25/18229714/cognizant-facebook-content-moderator-interviews-trauma-working-conditions-arizona" rel="noopener">Human moderators have to relive watching this trauma over and over again</a> for unlivable wages. News outlets are <em>embedding the video</em> into their articles and publishing the hateful manifesto. Why? What does this accomplish?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I was taught in journalism class that media (photos, video, infographics, etc.) should be additive (a progressive enhancement, if you will) and provide something to the story for the reader that words cannot.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Is it necessary to show murder for our dear readers to understand the cruelty and finality of it? Do readers gain something more from watching fellow humans have their lives stolen from them? What psychological damage are we inflicting upon millions of people   and for what?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Who benefits?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The mass shooter(s) who had a message to accompany their mass murder. News outlets are thirsty for perverse clicks to garner more ad revenue. We, by way of our platforms, give agency and credence to these acts of violence, then pilfer profits from them. Tech is a money-making accomplice to these hate crimes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Christchurch is just one example in an endless array where the <a href="https://www.sarawb.com/technically-wrong/" rel="noopener">tools and products we create are used as a vehicle for harm and for hate</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.theatlantic.com/politics/archive/2018/04/white-supremacy-is-still-americas-biggest-security-threat/557591/" rel="noopener">Facebook and the Cambridge Analytica scandal played a critical role in the outcome of the 2016 presidential election</a>. The concept of “race realism,” which is essentially a term that white supremacists use to codify their false racist pseudo-science, was actively tested on Facebook’s platform to see how the term would sit with people who are ignorantly sitting on the fringes of white supremacy. Full-blown white supremacists don’t need this soft language. This is how radicalization works.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The strategies articulated in the above article are not new. Racist propaganda predates social media platforms. What we have to be mindful with is that we’re building smarter tools with power we don’t yet fully understand: you can now have an <a href="https://www.theverge.com/tldr/2019/2/15/18226005/ai-generated-fake-people-portraits-thispersondoesnotexist-stylegan" rel="noopener">AI-generated human face</a>. Our technology is accelerating at a frightening rate, a rate faster than our reflective understanding of its impact.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Combine the time-tested methods of spreading white supremacy, the power to manipulate perception through technology, and the magnitude and reach that has become democratized and anonymized.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We’re staring at our own reflection in the <em>Black Mirror</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The right to speak versus the right to survive</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Tech has proven time and time again that it voraciously protects first amendment rights above all else. (I will also take this opportunity to remind you that the first amendment of the United States offers protection to the people from the <em>government</em> abolishing free speech, not from <em>private money-making corporations</em>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Evelyn Beatrice Hall writes in <em>The Friends of Voltaire</em>, “I disapprove of what you say, but I will defend to the death your right to say it.” Fundamentally, Hall’s quote expresses that we must protect, possibly above all other freedoms, the freedom to say whatever we want to say. (Fun fact: The quote is often misattributed to Voltaire, but Hall actually wrote it to explain Voltaire’s ideologies.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And the logical anchor here is sound: We must grant everyone else the same rights that we would like for ourselves. Former <em>99u</em> editor Sean Blanda wrote a thoughtful piece on the “<a href="https://medium.com/@SeanBlanda/the-other-side-is-not-dumb-2670c1294063" rel="noopener">Other Side</a>,” where he posits that we lack tolerance for people who don’t think like us, but that we must because we might one day be on the other side. I agree in theory.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But, what happens when a portion of the rights we grant to one group (let’s say, free speech to white supremacists) means the active oppression another group’s right (let’s say, every person of color’s right to live)?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>James Baldwin expresses this idea with a clause, “We can disagree and still love each other unless your disagreement is rooted in my oppression and denial of my humanity and right to exist.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It would seem that we have a moral quandary where two sets of rights cannot coexist. Do we protect the privilege for all users to say what they want, or do we protect all users from hate? Because of this perceived moral quandary, tech has often opted out of this conversation altogether. Platforms like Twitter and Facebook, two of the biggest offenders, continue to allow hate speech to ensue with irregular to no regulation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.wired.com/story/jack-dorsey-twitters-role-free-speech-filter-bubbles/" rel="noopener">When explicitly asked about his platform</a> as a free-speech platform and its consequence to privacy and safety, Twitter CEO Jack Dorsey said,</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure id="figure1" class="quote">
<blockquote cite="https://www.wired.com/story/jack-dorsey-twitters-role-free-speech-filter-bubbles/"><p>“So we believe that we can only serve the public conversation, we can only stand for freedom of expression if people feel safe to express themselves in the first place. We can only do that if they feel that they are not being silenced.”</p></blockquote>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Dorsey and Twitter are most concerned about protecting <em>expression</em> and about not silencing people. In his mind, if he allows people to say whatever they want on his platform, he has succeeded. When asked about why he’s failed to implement AI to filter abuse like, say, Instagram had implemented, he said that he’s most concerned about being able to explain <em>why</em> the AI flagged something as abusive. Again, Dorsey protects the freedom of speech (and thus, the perpetrators of abuse) before the <em>victims</em> of abuse.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But he’s inconsistent about it. In a <a href="https://extremism.gwu.edu/sites/g/files/zaxdzs2191/f/downloads/Nazis%20v.%20ISIS.pdf" rel="noopener">study by George Washington University comparing white nationalists and ISIS social media usage</a>, Twitter’s freedom of speech was not granted to ISIS. Twitter suspended 1,100 accounts related to ISIS whereas it suspended only seven accounts related to Nazis, white nationalism, and white supremacy, despite the accounts having more than seven times the followers, and tweeting 25 times more than the ISIS accounts. Twitter here made a moral judgment that the fewer, less active, and less influential ISIS accounts were somehow not welcome on their platform, whereas the prolific and burgeoning Nazi and white supremacy accounts were.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, Twitter has shown that it won’t protect free speech at <em>all</em> costs or for <em>all</em> users. We can only conclude that Twitter is either intentionally protecting white supremacy or simply doesn’t think it’s very dangerous. Regardless of which it is (I think I know), the outcome does not change the fact that white supremacy is running rampant on its platforms and many others.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s brainwash ourselves for a moment and pretend like Twitter does want to support freedom of speech equitably and stays neutral and fair to complete this logical exercise: Going back to the dichotomy of rights example I provided earlier, where either the right to free speech or the right to safety and survival prevail, the rights and the power will fall into the hands of the dominant group or ideologue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In case you are somehow unaware, the dominating ideologue, whether you’re a flagrant white supremacist or not, is white supremacy. White supremacy was baked into <a href="https://www.theroot.com/to-be-clear-white-supremacy-is-the-foundation-of-our-c-1797990783" rel="noopener">founding principles of the United States</a>, the country where the majority of these platforms were founded and exist. (I am not suggesting that white supremacy doesn’t exist globally, as it does, evidenced most recently by the terrorist attack in Christchurch. I’m centering the conversation intentionally around the United States as it is my lived experience and where most of these companies operate.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Facebook attempted to educate its team on white supremacy in order to address how to regulate free speech. A laugh-cry excerpt:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure id="figure2" class="quote">
<blockquote><p>“White nationalism and calling for an exclusively white state is not a violation for our policy unless it explicitly excludes other PCs [protected characteristics].”</p></blockquote>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>White nationalism is a softened synonym for white supremacy so that racists-lite can feel more comfortable with their transition into hate. White nationalism (a.k.a. white supremacy) by definition explicitly seeks to eradicate all people of color. So, Facebook should see white nationalist speech as exclusionary, and therefore a violation of their policies.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Regardless of what tech leaders like Dorsey or Facebook CEO Zuckerberg say or what mediocre and uninspired condolences they might offer, inaction is an action.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Companies that use terms and conditions or acceptable use policies to defend their inaction around hate speech are enabling and perpetuating white supremacy. Policies are written by humans to protect that group of human’s ideals. The message they use might be that they are protecting free speech, but hate speech is a form of free speech. So effectively, they are protecting hate speech. Well, as long as it’s for white supremacy and not the Islamic State.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Whether the motivation is fear (losing loyal Nazi customers and their sympathizers) or hate (because their CEO is a white supremacist), it does not change the impact: Hate speech is tolerated, enabled, and amplified by way of their platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>“That wasn’t our intent”</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Product creators might be thinking, <em>Hey, look, I don’t intentionally create a platform for hate. The way these features were used was never our intent.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Intent does not erase impact.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We cannot absolve ourselves of culpability merely because we failed to conceive such evil use cases when we built it. While we very well might not have created these platforms with the explicit intent to help Nazis or imagined it would be used to spread their hate, the reality is that our platforms <em>are</em> being used in this way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As product creators, it is our responsibility to protect the safety of our users by stopping those that intend to or already cause them harm. Better yet, we ought to think of this <em>before</em> we build the platforms to prevent this in the first place.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The question to answer isn’t, “Have I made a place where people have the freedom to express themselves?” Instead we have to ask, “Have I made a place where everyone has the safety to exist?” If you have created a place where a dominant group can embroil and embolden hate against another group, you have failed to create a safe place. The foundations of hateful speech (beyond the psychological trauma of it) lead to events like Christchurch.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We must protect safety over speech.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Domino Effect</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This week, <a href="https://www.engadget.com/2019/03/14/slack-removed-28-accounts-with-ties-to-hate-groups/" rel="noopener">Slack banned 28 hate groups</a>. What is most notable, to me, is that the groups did not break any parts of their Acceptable Use Policy. Slack issued a statement:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<figure id="figure3" class="quote">
<blockquote cite="https://slackhq.com/slack-statement-hate-groups"><p>The use of Slack by hate groups runs counter to everything we believe in at Slack and is not welcome on our platform… Using Slack to encourage or incite hatred and violence against groups or individuals because of who they are is antithetical to our values and the very purpose of Slack.</p></blockquote>
</figure>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>That’s it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is not illegal for tech companies like Slack to ban groups from using their proprietary software because it is a private company that can regulate users if they do not align with their vision as a company. Think of it as the “no shoes, no socks, no service” model, but for tech.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Slack simply decided that supporting the workplace collaboration of Nazis around efficient ways to evangelize white supremacy was probably not in line with their company directives around inclusion. I imagine Slack also considered how their employees of color most ill-affected by white supremacy would feel working for a company that supported it, actively or not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What makes the Slack example so notable is that they acted swiftly and on their own accord. Slack chose the safety of all their users over the speech of some.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When caught with their enablement of white supremacy, some companies will only budge under pressure from activist groups, users, and employees.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.cbsnews.com/news/paypal-suspends-dozens-of-racist-groups-sites-altright-com/" rel="noopener">PayPal finally banned hate groups after Charlottesville</a> and after Southern Poverty Law Center (SPLC) explicitly called them out for enabling hate. SPLC had identified this fact for three years prior. PayPal had ignored them for all three years.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unfortunately, taking these “stances” against something as clearly and viscerally wrong as white supremacy is rare for companies to do. The tech industry tolerates this inaction through unspoken agreements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If Facebook doesn’t do anything about racist political propaganda, <a href="https://www.vox.com/2018/12/13/18136253/pewdiepie-vs-tseries-links-to-white-supremacist-alt-right-redpill" rel="noopener">YouTube doesn’t do anything about PewDiePie</a>, and Twitter doesn’t do <a href="https://tech.co/news/amnesty-study-misogyny-racism-twitter-2018-12" rel="noopener">anything about disproportionate abuse against Black women</a>, it says to the smaller players in the industry that they don’t have to either.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The tech industry reacts to its peers. When there is disruption, as was the case with Airbnb, who <a href="https://slate.janrainsso.com//static/server.html?origin=http%3A%2F%2Fwww.slate.com%2Farticles%2Ftechnology%2Ftechnology%2F2017%2F08%2Fairbnb_s_ban_of_nazis_in_charlottesville_sets_an_important_standard_for.html" rel="noopener">screened and rejected any guests who they believed to be partaking in the Unite the Right Charlottesville rally</a>, companies follow suit. <a href="https://www.npr.org/sections/thetwo-way/2017/08/14/543360434/white-supremacist-site-is-banned-by-go-daddy-after-virginia-rally" rel="noopener">GoDaddy cancelled Daily Stormer’s domain registration</a> and Google did the same when they attempted migration.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If one company, like Slack or Airbnb, decides to do something about the role it’s going to play, it creates a perverse kind of FOMO for the rest: Fear of missing out of doing the right thing and standing on the right side of history.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Don’t have FOMO, do something</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The type of activism at those companies all started with one individual. If you want to be part of the solution, I’ve gathered some places to start. The list is not exhaustive, and, as with all things, I recommend researching beyond this abridged summary.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Understand how white supremacy impacts you as an individual.</strong><br>Now, if you are a person of color, queer, disabled, or trans, it’s likely that you know this very intimately.
<p>&nbsp;</p>
<p>If you are not any of those things, then you, as a majority person, need to understand how white supremacy protects you and works in your favor. It’s not easy work, it is uncomfortable and unfamiliar, but you have the most powerful tools to fix tech. The resources are aplenty, but my favorite abridged list:</p>
<ol type="a">
<li><a href="https://www.sceneonradio.org/seeing-white/" rel="noopener">Seeing White</a> podcast</li>
<li>Ijeoma Oluo’s <em>So you want to talk about race</em></li>
<li>Reni Eddo-Lodge’s <em>Why I’m no longer talking to white people about race</em> (Very key read for UK folks)</li>
<li>Robin DiAngelo’s <em>White Fragility</em></li>
</ol>
</li><li><strong>See where your company stands: Read your company’s policies like accepted use and privacy policies and find your CEO’s stance on safety and free speech.</strong><br>While these policies are baseline (and in the Slack example, sort of irrelevant), it’s important to known your company's track record. As an employee, your actions and decisions either uphold the ideologies behind the company or they don’t. Ask yourself if the company’s ideologies are worth upholding and whether they align with your own. Education will help you to flag if something contradicts those policies, or if the policies themselves allow for unethical activity.</li><li><strong>Examine everything you do critically on an ongoing basis.</strong><br>You may feel your role is small or that your company is immune—maybe you are responsible for the maintenance of one small algorithm. But consider how that algorithm or similar ones can be exploited. Some key questions I ask myself:
<ol type="a">
<li>Who benefits from this? Who is harmed?</li>
<li>How could this be used for harm?</li>
<li>Who does this exclude? Who is missing?</li>
<li>What does this protect? For whom? Does it do so equitably?</li>
</ol>
</li><li><strong>See something? Say something.</strong><br>If you believe that your company is creating something that is or can be used for harm, it is your responsibility to say something. Now, I’m not naïve to the fact that there is inherent risk in this. You might fear ostracization or termination. You need to protect yourself first. But you also need to do something.
<ol type="a">
<li>Find someone who you trust who might be at less risk. Maybe if you’re a nonbinary person of color, find a white cis man who is willing to speak up. Maybe if you’re a white man who is new to the company, find a white man who has more seniority or tenure. But also, consider how you have so much more relative privilege compared to most other people and that you might be the safest option.</li>
<li>Unionize. Find peers who might feel the same way and write a collective statement.</li>
<li>Get someone influential outside of the company (if knowledge is public) to say something.</li>
</ol>
</li><li><strong>Listen to concerns, no matter how small, particularly if they’re coming from the most endangered groups.</strong><br>If your user or peer feels unsafe, you need to understand why. People often feel like small things can be overlooked, as their initial impact might be less, but it is in the smallest cracks that hate can grow. Allowing one insensitive comment about race is still allowing hate speech. If someone, particularly someone in a marginalized group, brings up a concern, you need to do your due diligence to listen to it and to understand its impact.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I cannot emphasize this last point enough.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What I say today is not new. Versions of this article have been written before. Women of color like me have voiced similar concerns not only in writing, but in design reviews, in closed door meetings to key stakeholders, in Slack DMs. We’ve blown our whistles.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But here is the power of white supremacy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>White supremacy is so ingrained in every single aspect of how this nation was built, how our corporations function, and who is in control. If you are not convinced of this, you are not paying attention or intentionally ignoring the truth.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Queer, Muslim, disabled, trans women and nonbinary folks of color — the marginalized groups most impacted by this — are the ones who are voicing these concerns most voraciously. Speaking up requires us to enter the spotlight and outside of safety—we take a risk and are not heard.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The silencing of our voices is one of many effective tools of white supremacy. Our silencing lives within every microaggression, each time we’re talked over, or not invited to partake in key decisions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In tech, I feel I am a canary in a coal mine. I have sung my song to warn the miners of the toxicity. My sensitivity to it is heightened, because of my existence.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But the miners look at me and tell me that my lived experience is false. It does not align with their narrative as humans. They don’t understand why I sing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the people at the highest echelons of the tech industry—the white, male CEOs in power—fail to listen to its most marginalized people—the queer, disabled, trans, people of color—the fate of the canaries will too become the fate of the miners.</p>
<!-- /wp:paragraph -->]]>				</description>

				<dc:subject>
					<![CDATA[Community, Industry]]>				</dc:subject>

				<dc:date>
					2019-03-19T09:22:00+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Semantics to Screen Readers]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/melanie-richards/">Melanie Richards</a>					</author>

				<link>
					https://alistapart.com/article/semantics-to-screen-readers/				</link>

				<guid>
					https://alistapart.com/article/semantics-to-screen-readers/				</guid>

				<description>
					<![CDATA[As a child of the ’90s, one of my favorite movie quotes is from <a href="https://www.imdb.com/title/tt0116493"><cite>Harriet the Spy</cite></a>: “there are as many ways to live as there are people in this world, and each one deserves a closer look.” Likewise, there are as many ways to browse the web as there are people online. We each bring unique context to our web experience based on our values, technologies, environments, minds, and bodies.

<i>Assistive technologies</i> (ATs), which are hardware and software that help us perceive and interact with digital content, come in diverse forms. ATs can use a whole host of user input, ranging from clicks and keystrokes to minor muscle movements. ATs may also present digital content in a variety of forms, such as Braille displays, color-shifted views, and decluttered <i>user interfaces</i> (UIs).

One more commonly known type of AT is the screen reader. Programs such as JAWS, Narrator, NVDA, and VoiceOver can take digital content and present it to users through voice output, may display this output visually on the user’s screen, and can have Braille display and/or screen magnification capabilities built in.

If you make websites, you may have tested your sites with a screen reader. But how do these and other assistive programs actually access your content? What information do they use? We’ll take a detailed step-by-step view of how the process works.

<i>(For simplicity we’ll continue to reference “browsers” and “screen readers” throughout this article. These are essentially shorthands for “browsers and other applications,” and “screen readers and other assistive technologies,” respectively.)</i>
<h2>The semantics-to-screen-readers pipeline</h2>
Accessibility <i>application programming interfaces</i> (APIs) create a useful link between user applications and the assistive technologies that wish to interact with them. Accessibility APIs facilitate communicating accessibility information about user interfaces (UIs) to the ATs. The API expects information to be structured in a certain way, so that whether a button is properly marked up in web content or is sitting inside a native app taskbar, a button is a button is a button as far as ATs are concerned. That said, screen readers and other ATs can do some app-specific handling if they wish.

On the web specifically, there are some browser and screen reader combinations where accessibility API information is supplemented by access to DOM structures. For this article, we’ll focus specifically on accessibility APIs as a link between web content and the screen reader.

Here’s the breakdown of how web content reaches screen readers via accessibility APIs:

The <b>web developer</b> uses host language markup (HTML, SVG, etc.), and potentially roles, states, and properties from the <a href="https://rawgit.com/w3c/aria/master/">ARIA suite</a> where needed to provide the semantics of their content. Semantic markup communicates what type an element is, what content it contains, what state it’s in, etc.

The <b>browser rendering engine</b> (alternatively referred to as a “user agent”) takes this information and maps it into an accessibility API. Different accessibility APIs are available on different operating systems, so a browser that is available on multiple platforms should support multiple accessibility APIs. Accessibility API mappings are maintained on a lower level than web platform APIs, so web developers don’t directly interact with accessibility APIs.

The <b>accessibility API</b> includes a collection of <a href="https://en.wikipedia.org/wiki/Interface_(computing)">interfaces</a> that browsers and other apps can plumb into, and generally acts as an intermediary between the browser and the screen reader. Accessibility APIs provide interfaces for representing the structure, relationships, semantics, and state of digital content, as well as means to surface dynamic changes to said content. Accessibility APIs also allow screen readers to retrieve and interact with content via the API.

Again, web developers don’t interact with these APIs directly; the rendering engine handles translating web content into information useful to accessibility APIs.
<h3>Examples of accessibility APIs</h3>
<ul>
 	<li><b>Windows:</b> <a href="https://docs.microsoft.com/en-us/windows/desktop/WinAuto/microsoft-active-accessibility">Microsoft Active Accessibility</a> (MSAA), extended with another API called <a href="https://wiki.linuxfoundation.org/accessibility/iaccessible2/start">IAccessible2</a> (IA2)</li>
 	<li><b>Windows:</b> <a href="https://docs.microsoft.com/en-us/windows/desktop/WinAuto/entry-uiauto-win32">UI Automation</a> (UIA), the Microsoft successor to MSAA. A browser on Windows can choose to support MSAA with IA2, UIA, or both.</li>
 	<li><b>MacOS:</b> <a href="https://developer.apple.com/documentation/appkit/nsaccessibility">NSAccessibility</a> (AXAPI)</li>
 	<li><b>Linux/Gnome:</b> <a href="https://developer.gnome.org/atk/stable/">Accessibility Toolkit</a> (ATK) and <a href="https://developer.gnome.org/libatspi/stable/">Assistive Technology Service Provider Interface</a> (AT-SPI). This case is a little different in that there are actually two separate APIs: one through which browsers and other applications pass information along to (ATK) and one that ATs then call from (AT-SPI).</li>
</ul>
The <b>screen reader</b> uses client-side methods from these accessibility APIs to retrieve and handle information exposed by the browser. In browsers where direct access to the Document Object Model (DOM) is permitted, some screen readers may also take additional information from the DOM tree. A screen reader can also interact with apps that use differing accessibility APIs.

No matter where they get their information, screen readers can dream up any interaction modes they want to provide to their users (I’ve provided links to screen reader commands at the end of this article). Testing by site creators can help identify content that feels awkward in a particular navigation mode, such as multiple links with the same text (“Learn more”), as one example.
<h3>Example of this pipeline: surfacing a button element to screen reader users</h3>
Let’s suppose for a moment that a screen reader wants to understand what object is next in the accessibility tree (which I’ll explain further in the next section), so it can surface that object to the user as they navigate to it. The flow will go a little something like this:
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig1.png" alt="Diagram showing the client (screen reader) making a call to the accessibility API, which passes along the request to the provider (browser), which checks the content in the web document, which sends the information back up the chain" />
<figcaption>Diagram illustrating the steps involved in presenting the next object in a document; detailed list follows</figcaption></figure>
<ol>
 	<li>The screen reader requests information from the API about the next accessible object, relative to the current object.</li>
 	<li>The API (as an intermediary) passes along this request to the browser.</li>
 	<li>At some point, the browser references DOM and style information, and discovers that the relevant element is a non-hidden button: <code>&lt;button&gt;Do a thing&lt;/button&gt;</code>.</li>
 	<li>The browser maps this HTML button into the format the API expects, such as an accessible object with various properties: <b>Name:</b> Do a thing, <b>Role:</b> Button.</li>
 	<li>The API returns this information from the browser to the screen reader.</li>
 	<li>The screen reader can then surface this object to the user, perhaps stating “Button, Do a thing.”</li>
</ol>
Suppose that the screen reader user would now like to “click” this button. Here’s how their action flows all the way back to web content:
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig2.png" alt="Diagram showing a user using a 'primary action' command to a client (screen reader), which passes the command to the accessibility API, which passes the command along to the provider (browser), which passes the command as a click event to the web document" />

<figcaption>Diagram illustrating the steps involved in routing a screen reader click to web content; detailed list follows</figcaption></figure>
<ol>
 	<li>The user provides a particular screen reader command, such as a keystroke or gesture.</li>
 	<li>The screen reader calls a method into the API to invoke the button.</li>
 	<li>The API forwards this interaction to the browser.</li>
 	<li>How a browser may respond to incoming interactions depends on the context, but in this case the browser can raise this as a “click” event through web APIs. The browser should give no indication that the click came from an assistive technology, as doing so would violate the user’s right to privacy.</li>
 	<li>The web developer has registered a JavaScript event listener for clicks; their callback function is now executed as if the user clicked with a mouse.</li>
</ol>
Now that we have a general sense of the pipeline, let’s go into a little more detail on the accessibility tree.
<h2>The accessibility tree</h2>
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig3.png" alt="Screenshot showing the accessibility tools in Microsoft Edge" />

<figcaption>Dev Tools in Microsoft Edge showing the DOM tree and accessibility tree side by side; there are more nodes in the DOM tree</figcaption></figure>
The <i>accessibility tree</i> is a hierarchical representation of elements in a UI or document, as computed for an accessibility API. In modern browsers, the accessibility tree for a given document is a separate, parallel structure to the DOM tree. “Parallel” does not necessarily mean there is a 1:1 match between the nodes of these two trees. Some elements may be excluded from the accessibility tree, for example if they are hidden or are not semantically useful (think non-focusable wrapper <code>div</code>s without any semantics added by a web developer).

This idea of a hierarchical structure is somewhat of an abstraction. The definition of what exactly an accessibility tree is in practice has been debated and partially defined in multiple places, so implementations may differ in various ways.

For example, it’s not actually necessary to generate accessible objects for every element in the DOM whenever the DOM tree is constructed. As a performance consideration, a browser could choose to deal with only a subset of objects and their relationships at a time—that is, however much is necessary to fulfill the requests coming from ATs. The rendering engine could make these computations during all user sessions, or only do so when assistive technologies are actively running.

Generally speaking, modern web browsers wait until after style computation to build up any accessible objects. Browsers wait in part because generated content (such as <code>::before</code> and <code>::after</code>) can contain text that can participate in calculation of the accessible object’s name. CSS styles can also impact accessible objects in other various ways: text styling can come through as attributes on accessible text ranges. Display property values can impact the computation of line text ranges. These are just a few ways in which style can impact accessibility semantics.

Browsers may also use different structures as the basis for accessible object computation. One rendering engine may walk the DOM tree and cross-reference style computations to build up parallel tree structures; another engine may use only the nodes that are available in a style tree in order to build up their accessibility tree.

User agent participants in the standards community are currently thinking through how we can better document our implementation details, and whether it might make sense to standardize more of these details further down the road.

Let’s now focus on the branches of this tree, and explore how individual accessibility objects are computed.
<h3>Building up accessible objects</h3>
From API to API, an accessible object will generally include a few things:
<ul>
 	<li><b>Role</b>, or the type of accessible object (for example, Button). The role tells a user how they can expect to interact with the control. It is typically presented when screen reader focus moves onto the accessible object, and it can be used to provide various other functionalities, such as skipping around content via one type of object.</li>
 	<li><b>Name</b>, if specified. The name is an (ideally short) identifier that better helps the user identify and understand the purpose of an accessible object. The name is often presented when screen focus moves to the object (more on this later), can be used as an identifier when presenting a list of available objects, and can be used as a hook for functionalities such as voice commands.</li>
 	<li><b>Description and/or help text</b>, if specified. We’ll use “Description” as a shorthand. The Description can be considered supplemental to the Name; it’s not the main identifier but can provide further information about the accessible object. Sometimes this is presented when moving focus to the accessible object, sometimes not; this variation depends on both the screen reader’s user experience design and the user’s chosen verbosity settings.</li>
 	<li><b>Properties and methods surfacing additional semantics.</b> For simplicity’s sake, we won’t go through all of these. For your awareness, properties can include details like layout information or available interactions (such as invoking the element or modifying its value).</li>
</ul>
Let’s walk through an example using markup for a simple mood tracker. We’ll use simplified property names and values, because these can differ between accessibility APIs.
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig4.png" alt="" /></figure>
<pre><code class="language-javascript">&lt;form&gt;
  &lt;label for="mood"&gt;On a scale of 1–10, what is your mood today?&lt;/label&gt;
  &lt;input id="mood" type="range"
       min="1" max="10" value="5"
       aria-describedby="helperText" /&gt;
  &lt;p id="helperText"&gt;Some helpful pointers about how to rate your mood.&lt;/p&gt;
  &lt;!-- Using a div with button role for the purposes of showing how the accessibility tree is created. Please use the button element! --&gt;
  &lt;div tabindex="0" role="button"&gt;Log Mood&lt;/div&gt;
&lt;/form&gt;</code></pre>
First up is our <code>form</code> element. This form doesn’t have any attributes that would give it an accessible Name, and a form landmark without a Name isn’t very useful when jumping between landmarks. Therefore, <a href="https://www.w3.org/TR/html-aam-1.0/#html-element-role-mappings">HTML mapping standards</a> specify that it should be mapped as a group.

Here’s the beginning of our tree:
<ul>
 	<li><b>Role:</b> Group</li>
</ul>
Next up is the <code>label</code>. This one doesn’t have an accessible Name either, so we’ll just nest it as an object of role “Label” underneath the form:
<ul>
 	<li><b>Role:</b> Group
<ul>
 	<li><b>Role:</b> Label</li>
</ul>
</li>
</ul>
Let’s add the range <code>input</code>, which will map into various APIs as a “Slider.” Due to the relationship created by the <code>for</code> attribute on the <code>label</code> and <code>id</code> attribute on the <code>input</code>, this slider will take its Name from the label contents. The <code>aria-describedby</code> attribute is another id reference and points to a paragraph with some text content, which will be used for the slider’s Description. The slider object’s properties will also store “labelledby” and “describedby” relationships pointing to these other elements. And it will specify the current, minimum, and maximum values of the slider. If one of these range values were not available, <a href="https://www.w3.org/TR/wai-aria-1.2/#slider">ARIA standards specify what should be the default value</a>. Our updated tree:
<ul>
 	<li><b>Role:</b> Group
<ul>
 	<li><b>Role:</b> Label</li>
 	<li><b>Role:</b> Slider
<b>Name:</b> On a scale of 1–10, what is your mood today?
<b>Description:</b> Some helpful pointers about how to rate your mood.
<b>LabelledBy:</b> [label object]
<b>DescribedBy:</b> helperText
<b>ValueNow:</b> 5
<b>ValueMin:</b> 1
<b>ValueMax:</b> 10</li>
</ul>
</li>
</ul>
The paragraph will be added as a simple paragraph object (“Text” or “Group” in some APIs):
<ul>
 	<li><b>Role:</b> Group
<ul>
 	<li><b>Role:</b> Label</li>
 	<li><b>Role:</b> Slider
<b>Name:</b> On a scale of 1–10, what is your mood today?
<b>Description:</b> Some helpful pointers about how to rate your mood.
<b>LabelledBy:</b> [label object]
<b>DescribedBy:</b> helperText
<b>ValueNow:</b> 5
<b>ValueMin:</b> 1
<b>ValueMax:</b> 10</li>
 	<li><b>Role:</b> Paragraph</li>
</ul>
</li>
</ul>
The final element is an example of when role semantics are added via the ARIA <code>role</code> attribute. This <code>div</code> will map as a Button with the name “Log Mood,” as buttons can take their name from their children. This button will also be surfaced as “invokable” to screen readers and other ATs; special types of buttons could provide expand/collapse functionality (buttons with the <code>aria-expanded</code> attribute), or toggle functionality (buttons with the <code>aria-pressed</code> attribute). Here’s our tree now:
<ul>
 	<li><b>Role:</b> Group
<ul>
 	<li><b>Role:</b> Label</li>
 	<li><b>Role:</b> Slider
<b>Name:</b> On a scale of 1–10, what is your mood today?
<b>Description:</b> Some helpful pointers about how to rate your mood.
<b>LabelledBy:</b> [label object]
<b>DescribedBy:</b> helperText
<b>ValueNow:</b> 5
<b>ValueMin:</b> 1
<b>ValueMax:</b> 10</li>
 	<li><b>Role:</b> Paragraph</li>
 	<li><b>Role:</b> Button
<b>Name:</b> Log Mood</li>
</ul>
</li>
</ul>
<h3>On choosing host language semantics</h3>
Our sample markup mentions that it is preferred to use the HTML-native <code>button</code> element rather than a <code>div</code> with a <code>role</code> of “button.” Our buttonified <code>div</code> can be operated as a button via accessibility APIs, as the ARIA attribute is doing what it should—conveying semantics. But there’s a lot you can get for free when you choose native elements. In the case of <code>button</code>, that includes focus handling, user input handling, form submission, and basic styling.

Aaron Gustafson has what he refers to as an <a href="https://www.smashingmagazine.com/2016/05/developing-dependency-awareness/">“exhaustive treatise” on buttons</a> in particular, but generally speaking it’s great to let the web platform do the heavy lifting of semantics and interaction for us when we can.

ARIA roles, states, and properties are still a great tool to have in your toolbelt. Some good use cases for these are
<ul>
 	<li>providing further semantics and relationships that are not naturally expressed in the host language;</li>
 	<li>supplementing semantics in markup we perhaps don’t have complete control over;</li>
 	<li>patching potential cross-browser inconsistencies;</li>
 	<li>and making custom elements perceivable and operable to users of assistive technologies.</li>
</ul>
<h3>Notes on inclusion or exclusion in the tree</h3>
Standards define some rules around when user agents should exclude elements from the accessibility tree. Excluded elements can include those hidden by CSS, or the <code>aria-hidden</code> or <code>hidden</code> attributes; their children would be excluded as well. Children of particular roles (like <code>checkbox</code>) can also be excluded from the tree, unless they meet special exceptions. The full rules can be found in the <a href="https://www.w3.org/TR/wai-aria-1.2/#accessibility_tree">“Accessibility Tree” section of the ARIA specification</a>. That being said, there are still some differences between implementers, some of which include more <code>div</code>s and <code>span</code>s in the tree than others do.
<h3>Notes on name and description computation</h3>
How names and descriptions are computed can be a bit confusing. Some elements have special rules, and some ARIA roles allow name computation from the element’s contents, whereas others do not. Name and description computation could probably be its own article, so we won’t get into all the details here (refer to “Further reading and resources” for some links). Some short pointers:
<ul>
 	<li><code>aria-label</code>, <code>aria-labelledby</code>, and <code>aria-describedby</code> take precedence over other means of calculating name and description.</li>
 	<li>If you expect a particular HTML attribute to be used for the name, check the <a href="https://w3c.github.io/html-aam/#accessible-name-and-description-computation">name computation rules for HTML elements</a>. In your scenario, it may be used for the full description instead.</li>
 	<li>Generated content (<code>::before</code> and <code>::after</code>) can participate in the accessible name when said name is taken from the element’s contents. That being said, <a href="https://www.w3.org/WAI/WCAG21/Techniques/failures/F87">web developers should not rely on pseudo-elements for non-decorative content</a>, as this content could be lost when a stylesheet fails to load or user styles are applied to the page.</li>
</ul>
When in doubt, reach out to the community! Tag questions on social media with “#accessibility.” “#a11y” is a common shorthand; the “11” stands for “11 middle letters in the word ‘accessibility.’” If you find an inconsistency in a particular browser, file a bug! Bug tracker links are provided in “Further reading and resources.”
<h2>Not just accessible objects</h2>
Besides a hierarchical structure of objects, accessibility APIs also offer interfaces that allow ATs to interact with text. ATs can retrieve content text ranges, text selections, and a variety of text attributes that they can build experiences on top of. For example, if someone writes an email and uses color alone to highlight their added comments, the person reading the email could increase the verbosity of speech output in their screen reader to know when they’re encountering phrases with that styling. However, it would be better for the email author to include very brief text labels in this scenario.

The big takeaway here for web developers is to keep in mind that the accessible name of an element may not always be surfaced in every <a href="https://tink.uk/understanding-screen-reader-interaction-modes/">navigation mode</a> in every screen reader. So if your <code>aria-label</code> text isn’t being read out in a particular mode, the screen reader may be primarily using text interfaces and only conditionally stopping on objects. It may be worth your while to consider using text content—even if <a href="https://a11yproject.com/posts/how-to-hide-content/">visually hidden</a>—instead of text via an ARIA attribute. <a href="https://developer.paciellogroup.com/blog/2017/07/short-note-on-aria-label-aria-labelledby-and-aria-describedby/">Read more thoughts on <code>aria-label</code> and <code>aria-labelledby</code>.</a>
<h2>Accessibility API events</h2>
It is the responsibility of browsers to surface changes to content, structure, and user input. Browsers do this by sending the accessibility API notifications about various events, which screen readers can subscribe to; again, for performance reasons, browsers could choose to send notifications only when ATs are active.

Let’s suppose that a screen reader wants to surface changes to a live region (an element with <code>role="alert"</code> or <code>aria-live</code>):
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig5.png" alt="Diagram showing a client (screen reader), which is already subscribed to live region events and can request more info about the live region, which receives a notification from the accessibility API, which gets a notification that a live region has changed from the provider (browser), which has a live region changed by the web document" />

<figcaption>Diagram illustrating the steps involved in announcing a live region via a screen reader; detailed list follows</figcaption></figure>
<ol>
 	<li>The screen reader subscribes to event notifications; it could subscribe to notifications of all types, or just certain types as categorized by the accessibility API. Let’s assume in our example that the screen reader is at least listening to live region change events.</li>
 	<li>In the web content, the web developer changes the text content of a live region.</li>
 	<li>The browser (provider) recognizes this as a live region change event, and sends the accessibility API a notification.</li>
 	<li>The API passes this notification along to the screen reader.</li>
 	<li>The screen reader can then use metadata from the notification to look up the relevant accessible objects via the accessibility API, and can surface the changes to the user.</li>
</ol>
ATs aren’t required to do anything with the information they retrieve. This can make it a bit trickier as a web developer to figure out why a screen reader isn’t announcing a change: it may be that notifications aren’t being raised (for example, because a browser is not sending notifications for a live region dynamically inserted into web content), or the AT is not subscribed or responding to that type of event.
<h2>Testing with screen readers and dev tools</h2>
While conformance checkers can help catch some basic accessibility issues, it’s ideal to walk through your content manually using a variety of contexts, such as
<ul>
 	<li>using a keyboard only;</li>
 	<li>with various OS accessibility settings turned on;</li>
 	<li>and at different zoom levels and text sizes, and so on.</li>
</ul>
As you do this, keep in mind the <a href="https://www.w3.org/TR/WCAG21/"><cite>Web Content Accessibility Guidelines (WCAG 2.1)</cite></a>, which give general guidelines around expectations for inclusive web content. If you can test with users after your own manual test passes, all the better!

Robust accessibility testing could probably be its own series of articles. In this one, we’ll go over some tips for testing with screen readers, and catching accessibility errors as they are mapped into the accessibility API in a more general sense.
<h3>Screen reader testing</h3>
Screen readers exist in many forms: some are pre-installed on the operating system and others are separate applications that in some cases are free to download. The <a href="https://webaim.org/projects/screenreadersurvey7/">WebAIM screen reader user survey</a> provides a list of commonly used screen reader and browser combinations among survey participants. The “Further reading and resources” section at the end of this article includes full screen reader user docs, and Deque University has a great set of <a href="https://dequeuniversity.com/resources/">screen reader command cheat sheets</a> that you can refer to. Some actions you might take to test your content:
<ul>
 	<li>Read the next/previous item.</li>
 	<li>Read the next/previous line.</li>
 	<li>Read continuously from a particular point.</li>
 	<li>Jump by headings, landmarks, and links.</li>
 	<li>Tab around focusable elements only.</li>
 	<li>Get a summary of all elements of a particular type within the page.</li>
 	<li>Search the page for specific content.</li>
 	<li>Use table-specific commands to interact with your tables.</li>
 	<li>Jump around by form field; are field instructions discoverable in this navigational mode?</li>
 	<li>Use keyboard commands to interact with all interactive elements. Are your JavaScript-driven interactions still operable with screen readers (which can intercept key input in certain modes)? <a href="https://www.w3.org/TR/wai-aria-practices/#aria_ex"><cite>WAI-ARIA Authoring Practices 1.1</cite></a> includes notes on expected keyboard interactions for various widgets.</li>
 	<li>Try out anything that creates a content change or results in navigating elsewhere. Would it be obvious, via screen reader output, that a change occurred?</li>
</ul>
<h3>Tracking down the source of unexpected behavior</h3>
If a screen reader does not announce something as you’d expect, here are a few different checks you can run:
<ul>
 	<li><b>Does this reproduce with the same screen reader in multiple browsers on this OS?</b> It may be an issue with the screen reader or your expectation may not match the screen reader’s user experience design. For example, a screen reader may choose to not expose the accessible name of a static, non-interactive element. Checking the user docs or filing a screen reader issue with a simple test case would be a great place to start.</li>
 	<li><b>Does this reproduce with multiple screen readers in the same browser, but not in other browsers on this OS?</b> The browser in question may have an issue, there may be compatibility differences between browsers (such as a browser doing extra helpful but non-standard computations), or a screen reader’s support for a specific accessibility API may vary. Filing a browser issue with a simple test case would be a great place to start; if it’s not a browser bug, the developer can route it to the right place or make a code suggestion.</li>
 	<li><b>Does this reproduce with multiple screen readers in multiple browsers?</b> There may be something you can adjust in your code, or your expectations may differ from standards and common practices.</li>
 	<li><b>How does this element’s accessibility properties and structure show up in browser dev tools?</b></li>
</ul>
<h3>Inspecting accessibility trees and properties in dev tools</h3>
Major modern browsers provide dev tools to help you observe the structure of the accessibility tree as well as a given element’s accessibility properties. By observing which accessible objects are generated for your elements and which properties are exposed on a given element, you may be able to pinpoint issues that are occurring either in front-end code or in how the browser is mapping your content into the accessibility API.

Let’s suppose that we are testing this piece of code in Microsoft Edge with a screen reader:
<pre><code class="language-markup">&lt;div class="form-row"&gt;
  &lt;label&gt;Favorite color&lt;/label&gt;
  &lt;input id="myTextInput" type="text" /&gt;
&lt;/div&gt;</code></pre>
We’re navigating the page by form field, and when we land on this text field, the screen reader just tells us this is an “edit” control—it doesn’t mention a name for this element. Let’s check the tools for the element’s accessible name.

<b>1. Inspect the element to bring up the dev tools.</b>
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig6.png" alt="Screenshot showing the Microsoft Edge dev tools inspecting an input element" />

<figcaption>The Microsoft Edge dev tools, with an input element highlighted in the DOM tree</figcaption></figure>
<b>2. Bring up the accessibility tree for this page by clicking the accessibility tree button (a circle with two arrows) or pressing Ctrl+Shift+A (Windows).</b>
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig7.png" alt="Screenshot showing the Microsoft Edge tools inspecting an input element with the Accessibility Tree panel open" />

<figcaption>The accessibility tree button activated in the Microsoft Edge dev tools</figcaption></figure>
Reviewing the accessibility tree is an extra step for this particular flow but can be helpful to do.

When the Accessibility Tree pane comes up, we notice there’s a tree node that just says “textbox:,” with nothing after the colon. That suggests there’s not a name for this element. (Also notice that the <code>div</code> around our form input didn’t make it into the accessibility tree; it was not semantically useful).

<b>3. Open the Accessibility Properties pane, which is a sibling of the Styles pane.</b> If we scroll down to the Name property—aha! It’s blank. No name is provided to the accessibility API. (Side note: some other accessibility properties are filtered out of this list by default; toggle the filter button—which looks like a funnel—in the pane to get the full list).
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig8.png" alt="Screenshot showing the Microsoft Edge tools inspecting an input element with the Accessibility Tree panel open" />

<figcaption>The Accessibility Properties pane open in Microsoft Edge dev tools, in the same area as the Styles pane</figcaption></figure>
<b>4. Check the code.</b> We realize that we didn’t associate the <code>label</code> with the text field; that is one strategy for providing an <a href="https://w3c.github.io/html-aam/#input-type-text-input-type-password-input-type-search-input-type-tel-input-type-url-and-textarea-element">accessible name for a text input</a>. We add <code>for="myTextInput"</code> to the label:
<pre><code class="language-markup">&lt;div class="form-row"&gt;
  &lt;label for="myTextInput"&gt;Favorite color&lt;/label&gt;
  &lt;input id="myTextInput" type="text" /&gt;
&lt;/div&gt;</code></pre>
And now the field has a name:
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig9.png" alt="Screenshot showing the Microsoft Edge tools inspecting an input element with the Accessibility Tree panel open, where the input's Name attribute now has a value" />

<figcaption>The accessible Name property set to the value of “Favorite color” inside Microsoft Edge dev tools</figcaption></figure>
In another use case, we have a breadcrumb component, where the current page link is marked with <code>aria-current="page"</code>:
<pre><code class="language-markup">&lt;nav class="breadcrumb" aria-label="Breadcrumb"&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href="/cat/"&gt;Category&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="/cat/sub/"&gt;Sub-Category&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a aria-current="page" href="/cat/sub/page/"&gt;Page&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/nav&gt;</code></pre>
When navigating onto the current page link, however, we don’t get any indication that this is the current page. We’re not exactly sure how this maps into accessibility properties, so we can reference a specification like <cite>Core Accessibility API Mappings 1.2</cite> (Core-AAM). Under the “<a href="https://w3c.github.io/core-aam/#mapping_state-property">State and Property Mapping</a>” table, we find mappings for “<code>aria-current</code> with non-<code>false</code> allowed value.” We can check for these listed properties in the Accessibility Properties pane. Microsoft Edge, at the time of writing, maps into UIA (UI Automation), so when we check AriaProperties, we find that yes, “current=page” is included within this property value.
<figure><img src="https://alistapart.com/wp-content/uploads/2019/02/fig10.png" alt="Screenshot showing the Microsoft Edge tools inspecting an input element with the Accessibility Tree panel open, where the input's AriaProperties attribute now has a value of current=page" />

<figcaption>The accessible Name property set to the value of “Favorite color” inside Microsoft Edge dev tools</figcaption></figure>
Now we know that the value is presented correctly to the accessibility API, but the particular screen reader is not using the information.

As a side note, Microsoft Edge’s current dev tools expose these accessibility API properties quite literally. Other browsers’ dev tools may simplify property names and values to make them easier to read, particularly if they support more than one accessibility API. The important bit is to find if there’s a property with roughly the name you expect and whether its value is what you expect. You can also use this method of checking through the property names and values if mapping specs, like Core-AAM, are a bit intimidating!
<h3>Advanced accessibility tools</h3>
While browser dev tools can tell us a lot about the accessibility semantics of our markup, they don’t generally include representations of text ranges or event notifications. On Windows, the <a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk">Windows SDK</a> includes advanced tools that can help debug these parts of MSAA or UIA mappings: <a href="https://docs.microsoft.com/en-us/windows/desktop/winauto/inspect-objects">Inspect</a> and <a href="https://docs.microsoft.com/en-us/windows/desktop/winauto/accessible-event-watcher">AccEvent</a> (Accessible Event Watcher). Using these tools presumes knowledge of the Windows accessibility APIs, so if this is too granular for you and you’re stuck on an issue, please reach out to the relevant browser team!

There is also an Accessibility Inspector in Xcode on MacOS, with which you can inspect web content in Safari. This tool can be accessed by going to <b>Xcode &gt; Open Developer Tool &gt; Accessibility Inspector</b>.
<h2>Diversity of experience</h2>
Equipped with an accessibility tree, detailed object information, event notifications, and methods for interacting with accessible objects, screen readers can craft a browsing experience tailored to their audiences. In this article, we’ve used the term “screen readers” as a proxy for a whole host of tools that may use accessibility APIs to provide the best user experience possible. Assistive technologies can use the APIs to augment presentation or support varying types of user input. Examples of other ATs include screen magnifiers, cognitive support tools, speech command programs, and some brilliant new app that hasn’t been dreamed up yet. Further, assistive technologies of the same “type” may differ in how they present information, and users who share the same tool may further adjust settings to their liking.

As web developers, we don’t necessarily need to make sure that each instance surfaces information identically, because each user’s preferences will not be exactly the same. Our aim is to ensure that no matter how a user chooses to explore our sites, content is <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/intro.html#introduction-fourprincs-head">perceivable, operable, understandable, and robust</a>. By testing with a variety of assistive technologies—including but not limited to screen readers—we can help create a better web for all the many people who use it.
<h2>Further reading and resources</h2>
<ul>
 	<li><a href="https://webaim.org/projects/lowvisionsurvey2/">WebAIM “Survey of Users with Low Vision”</a></li>
 	<li><a href="https://webaim.org/projects/screenreadersurvey7/">WebAIM “Screen Reader User Survey”</a></li>
 	<li>W3C developer guides
<ul>
 	<li><a href="https://www.w3.org/WAI/roles/">W3C Web Accessibility Initiative (WAI) resources</a></li>
 	<li><a href="https://www.w3.org/TR/WCAG21/"><cite>Web Content Accessibility Guidelines (WCAG) 2.1</cite></a></li>
 	<li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/"><cite>WAI-ARIA Authoring Practices 1.1</cite></a></li>
 	<li><a href="https://www.w3.org/TR/html-aria/"><cite>ARIA in HTML</cite></a></li>
 	<li><a href="https://www.w3.org/TR/using-aria/"><cite>Using ARIA</cite></a></li>
</ul>
</li>
 	<li>W3C specifications: The docs below are known as “AAMs.” They detail how content maps into various accessibility APIs and may be less relevant to web developers’ day-to-day work. However, some have notes on how specific elements’ names and descriptions are meant to be calculated:
<ul>
 	<li><a href="https://www.w3.org/TR/core-aam-1.1/"><cite>Core Accessibility API Mappings 1.1</cite></a></li>
 	<li><a href="https://www.w3.org/TR/graphics-aam-1.0/"><cite>Graphics Accessibility API Mappings</cite></a></li>
 	<li><a href="https://www.w3.org/TR/html-aam-1.0/"><cite>HTML Accessibility API Mappings 1.0</cite></a></li>
 	<li><a href="https://www.w3.org/TR/svg-aam-1.0/"><cite>SVG Accessibility API Mappings</cite></a></li>
</ul>
</li>
 	<li><a href="https://inclusive-components.design/"><cite>Inclusive Components</cite></a></li>
 	<li><a href="https://alistapart.com/topic/accessibility"><cite>A List Apart</cite> articles on accessibility</a>
<ul>
 	<li><a href="https://alistapart.com/article/conversational-semantics">“Conversational Semantics”</a></li>
 	<li><a href="https://alistapart.com/column/wai-finding-with-aria-landmark-roles">“WAI-finding with ARIA Landmark Roles”</a></li>
</ul>
</li>
 	<li><a href="https://www.smashingmagazine.com/2018/09/importance-manual-accessibility-testing/">“The Importance of Manual Accessibility Testing”</a></li>
 	<li><a href="https://dequeuniversity.com/resources/">Deque University screen reader shortcuts references</a></li>
 	<li>Screen reader user docs (commands)
<ul>
 	<li><a href="https://www.freedomscientific.com/products/blindness/jawsdocumentation">JAWS user docs</a></li>
 	<li><a href="https://support.microsoft.com/en-us/help/22798/windows-10-complete-guide-to-narrator">Narrator user docs</a></li>
 	<li><a href="https://www.nvaccess.org/files/nvda/documentation/userGuide.html">NVDA user docs</a></li>
 	<li><a href="https://help.apple.com/voiceover/mac/10.14/">VoiceOver user docs (VoiceOver command charts)</a></li>
 	<li><a href="https://help.apple.com/iphone/10/#/iph3e2e415f">iOS VoiceOver user docs</a></li>
</ul>
</li>
 	<li>Browser rendering engine bug trackers
<ul>
 	<li><a href="https://bugs.chromium.org/p/chromium/issues/list">Chrome</a></li>
 	<li><a href="https://bugzilla.mozilla.org/describecomponents.cgi?product=Core">Firefox</a></li>
 	<li><a href="http://issues.microsoftedge.com/">Microsoft Edge</a></li>
 	<li><a href="https://bugs.webkit.org/query.cgi?format=specific&amp;product=WebKit">Safari</a></li>
</ul>
</li>
</ul>]]>				</description>

				<dc:subject>
					<![CDATA[Accessibility, Browsers]]>				</dc:subject>

				<dc:date>
					2019-02-28T13:37:00+00:00				</dc:date>
			</item>

			
			<item>
				<title>
					<![CDATA[Designing for Conversions]]>				</title>

				<author>
				by <a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/brandongregory/">Brandon Gregory</a>					</author>

				<link>
					https://alistapart.com/article/designing-for-conversions/				</link>

				<guid>
					https://alistapart.com/article/designing-for-conversions/				</guid>

				<description>
					<![CDATA[What makes creative successful? Creative work often lives in the land of feeling—we can say we like something, point to how happy the client is, or talk about how delighted users will be, but can’t objectively measure feelings. Measuring the success of creative work doesn’t have to stop with feeling. In fact, we can assign it numbers, do math with it, and track improvement to show clients objectively how well our creative is working for them.

David Ogilvy once said, “If it doesn’t sell, it isn’t creative.” While success may not be a tangible metric for us, it is for our clients. They have hard numbers to meet, and as designers, we owe it to them to think about how our work can meet those goals. We can track sales, sure, but websites are ripe with other opportunities for measuring improvements. Designing for conversions will not only make you a more effective designer or copywriter, it will make you much more valuable to your clients, and that’s something we should all seek out.

<h2>Wait—what’s a conversion?</h2>

Before designing for conversions, let’s establish a baseline for what, exactly, we’re talking about. A <i>conversion</i> is an action taken by the user that accomplishes a business goal. If your site sells things, a conversion would be a sale. If you collect user information to achieve your business goals, like lead aggregation, it would be a form submission. Conversions can also be things like newsletter sign-ups or even hits on a page containing important information that you need users to read. You need some tangible action to measure the success of your site—that’s your conversion.

Through analytics, you know how many people are coming to your site. You can use this to measure what percentage of users are converting. This number is your <i>conversion rate</i>, and it’s the single greatest metric for measuring the success of a creative change. In your analytics, you can set up goals and conversion funnels to track this for you (more on conversion funnels shortly). It doesn’t matter how slick that new form looks or how clever that headline is—if the conversion rate drops, it’s not a success. In fact, once you start measuring success by conversion rate, you’ll be surprised to see how even the cleverest designs applied in the wrong places can fail to achieve your goals.

Conversions aren’t always a one-step process. Many of us have multi-step forms or long check-out processes where it can be very useful to track how far a user gets. It’s possible to set up multiple goals along the way so your analytics can give you this data. This is called a <i>conversion funnel</i>. Ideally, you’ll coordinate with the rest of your organization to get data beyond the website as well. For instance, changing button copy may lead to increased form submissions but a drop in conversions from lead to sale afterward. In this case, the button copy update probably confused users rather than selling them on the product. A good conversion funnel will safeguard against false positives like that.

It’s also important to track the <i>bounce rate</i>, which is the percentage of  users that hit a page and leave without converting or navigating to other pages. A higher bounce rate is an indication that there’s a mismatch between the user’s expectations when landing on your site and what they find once landing there. Bounce rate is really a part of the conversion funnel, and reducing bounce rate can be just as important as improving conversion rate.

<h2>Great. So how do we do that?</h2>

When I was first getting started in conversion-driven design, it honestly felt a little weird. It feels shady to focus obsessively on getting the user to complete an action. But this focus is in no way about tricking the user into doing something they don’t want to do—that’s a bad business model. As Gerry McGovern has commented, if business goals don’t align with customer goals, your business has no future. So if we’re not tricking users, what <em>are</em> we doing?

Users come to your site with a problem, and they’re looking for a solution. The goal is to find users whose problems will be solved by choosing your product. With that in mind, improving the conversion rate doesn’t mean tricking users into doing something—it means showing the <em>right</em> users how to solve their problem. That means making two things clear: that your product will solve the user’s problem, and what the user must do to proceed.

The first of these two points is the <i>value proposition</i>. This is how the user determines whether your product can solve his or her problem. It can be a simple description of the benefits, customer testimonials, or just a statement about what the product will do for the user. A page is not limited to one value proposition—it’s good to have several. (Hint: the page’s headline should almost always be a value proposition!) The user should be able to determine quickly why your product will be helpful in solving their problem. Once the value of your product has been made clear, you need to direct the user to convert with a call to action.

A <i>call to action</i> tells the user what they must do to solve their problem—which, in your case, means to convert. Most buttons and links should be calls to action, but a bit of copy directly following a value proposition is a good place too. Users should never have to look around to find out what the next step is—it should be easy to spot and clear in its intention. Also, ease of access is a big success factor here. My team’s testing found that replacing a Request Information button (that pointed to a form page) with an actual form on every page significantly boosted the conversion rate. If you’re also trying to get information from a user, consider a big form at the top of the page so users can’t miss it. When they scroll down the page and are ready to convert, they remember the form and have no question as to what they have to do.

So improving conversion rate (and, to some degree, decreasing bounce rate) is largely about adding clarity around the value proposition and call to action. There are other factors as well, like decreasing friction in the conversion process and improving performance, but these two things are where the magic happens, and conversion problems are usually problems with one of them.

<h2>So, value propositions…how do I do those?</h2>

The number one thing to remember when crafting a value proposition is that you’re not selling a product—you’re selling a solution. Value propositions begin with the user’s problem and focus on that. Users don’t care about the history of your company, how many awards you’ve won, or what clever puns you’ve come up with—they care about whether your product will solve their problem. If they don’t get the impression that it can do that, they will leave and go to a competitor.

In my work with landing pages for career schools, we initially included pictures of people in graduation gowns and caps. We assumed that the most exciting part of going back to school was graduating. Data showed us that we were wrong. Our testing showed that photos of people doing the jobs they would be training for performed much better. In short, our assumption was that showing the product (the school) was more important than showing the benefit (a new career). The problem users were trying to solve wasn’t a diploma—it was a career, and focusing on the user showed a significant improvement in conversion rate.

We had some clients that insisted on using their branding on the landing pages, including one school that wanted to use an eagle as their hero image because their main website had eagles everywhere. This absolutely bombed in conversions. No matter how strong or consistent your branding is, it will not outperform talking about users and their problems.

Websites that get paid for clicks have mastered writing headlines this way. Clickbait headlines get a groan from copywriters—especially since they often use their powers for evil and not good—but there are some important lessons we can learn from them. Take this headline, for instance:

<b>Get an Associate’s degree in nursing</b>

Just like in the example above with the college graduates, we’re selling the product—not the benefit. This doesn’t necessarily show that we understand the user’s problem, and it does nothing to get them excited about our program. Compare that headline to this one:

<b>Is your job stuck in a rut? Get trained for a new career in nursing in only 18 months!</b>

In this case, we lead with the user’s problem. That immediately gets users’ attention. We then skip to a benefit: a quick turnaround. No time is wasted talking about the product—we save that for the body copy. The headline focuses entirely on the user.

In your sign-up or check-out process, always lead with the information the user is most interested in. In our case, letting the user first select their school campus and area of study showed a significant improvement over leading with contact information. Similarly, put the less-exciting content last. In our testing, users were least excited about sharing their telephone number. Moving that field to be the last one in the form decreased form abandonment and improved conversions.

As designers, be cognizant of what your copywriters are doing. If the headline is the primary value proposition (as it should be), make sure the headline is the focal point of your design. Ensure the messaging behind your design is in line with the messaging in the content. If there’s a disagreement in what the user’s problem is or how your product will solve that problem, the conversion rate will suffer.

Once the value proposition has been clearly defined and stated, it’s time to focus on the call to action.

<h2>What about the call to action?</h2>

For conversion-driven sites, a good call to action is the most important component. If a user is ready to convert and has insufficient direction on how to do so, you lose a sale at 90 percent completion. It needs to be abundantly clear to the user how to proceed, and that’s where the call to action steps in.

When crafting a call to action, don’t be shy. Buttons should be large, forms should be hard to miss, and language should be imperative. A call to action should be one of the first things the user notices on the page, even if he or she won’t be thinking about it again until after doing some research on the page. Having the next step right in front of the user vastly increases the chance of conversion, so users need to know that it’s there waiting.

That said, a call to action should never get in the way of a value proposition. I see this all the time: a modal window shows as soon as I get to a site, asking me to subscribe to their mailing list before I have an inkling of the value the site can give me. I dismiss these without looking, and that call to action is completely missed. Make it clear <em>how</em> to convert, and make it easy, but don’t ask for a conversion before the user is ready. For situations like the one above, a better strategy might be asking me to subscribe as I exit the site; marketing to visitors who are leaving <a href="https://beeketing.com/blog/best-exit-intent-coupon-pop-ups/">has been shown to be effective</a>.

In my former team’s tests, there were some design choices that could improve calls to action. For instance, picking a bright color that stood out from the rest of the site for the submit button did show an improvement in conversions, and <a href="https://www.ironpaper.com/webintel/articles/content-analytics/">reducing clutter around the call to action improved conversion rates by 232%</a>. But most of the gains here were in either layout or copy; don’t get so caught up in minor design changes that you ignore more significant changes like these.

Ease of access is another huge factor to consider. As mentioned above, when my team was getting started, we had a Request Information link in the main navigation and a button somewhere on the page that would lead the user to the form. The single biggest positive change we saw involved putting a form at the top of every page. For longer forms, we would break this form up into two or three steps, but having that first step in sight was a huge improvement, even if one click doesn’t seem like a lot of effort.

Another important element is headings. Form headings should ask the user to do something. It’s one thing to label a form “Request Information”; it’s another to ask them to “Request Information Now.” Simply adding <a href="https://blog.wishpond.com/post/103290853633/the-25-best-words-to-use-in-your-call-to-action">action words</a>, like “now” or “today,” can change a description into an imperative action and improve conversion rates.

With submit buttons, always take the opportunity to communicate value. The worst thing you can put on a submit button is the word “Submit.” We found that switching this button copy out with “Request Information” showed a significant improvement. Think about the implied direction of the interaction. “Submit” implies the user is giving something to us; “Request Information” implies we’re giving something to the user. The user is already apprehensive about handing over their information—communicate to them that they’re getting something out of the deal.

Changing phrasing to be more personal to the user can also be very effective. One study showed that writing button copy in first person—for instance, “Create My Account” versus “Create Your Account”—<a href="https://unbounce.com/a-b-testing/failed-ab-test-results/">showed a significant boost in conversions</a>, boosting click-through rates by 90%.

Users today are fearful that their information will be used for nefarious purposes. Make it a point to reassure them that their data is safe. Our testing showed that the best way to do this is to add a link to the privacy policy (“Your information is secure!”) with a little lock icon right next to the submit button. Users will often skip right over a small text link, so that lock icon is essential—so essential, in fact, that it may be more important than the privacy policy itself. I’m somewhat ashamed to admit this, but I once forgot to create a page for the privacy policy linked to from a landing page, so that little lock icon linked out to a 404. I expected a small boost in conversions when I finally uploaded the privacy policy, but nope—nobody noticed. Reassurance is a powerful thing.

<h2>Measure, measure, measure</h2>

One of the worst things you can do is push out a creative change, assume it’s great, and move on to the next task. <a href="https://alistapart.com/article/a-primer-on-a-b-testing">A/B testing</a> is ideal and will allow you to test a creative change directly against the old creative, eliminating other variables like time, media coverage, and anything else you might not be thinking of. Creative changes should be applied methodically and scientifically—just because two or three changes together show an improvement in conversion rate doesn’t mean that one of them wouldn’t perform better alone.

Measuring tangible things like conversion rate not only helps your client or business, but can also give new purpose to your designs and creative decisions. It’s a lot easier to push for your creative decisions when you have hard data to back up why they’re the best choice for the client or project. Having this data on hand will give you more authority in dealing with clients or marketing folks, which is good for your creative and your career. If my time in the design world has taught me anything, it’s that, in the realm of creativity, certainty can be hard to come by. So, perhaps most importantly, objective measures of success give you, and your client, the reassurance that you’re doing the right thing.]]>				</description>

				<dc:subject>
					<![CDATA[Business, Design]]>				</dc:subject>

				<dc:date>
					2019-02-14T15:30:00+00:00				</dc:date>
			</item>

				</channel>
</rss>
