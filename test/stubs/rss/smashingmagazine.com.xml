<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Articles on Smashing Magazine — For Web Designers And Developers</title><link>https://www.smashingmagazine.com/articles/</link><description>Recent content in Articles on Smashing Magazine — For Web Designers And Developers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Apr 2020 09:35:42 +0000</lastBuildDate><item><author>Aleem Isiaka</author><title>Exploring Node.js Internals</title><link>https://www.smashingmagazine.com/2020/04/nodejs-internals/</link><pubDate>Thu, 23 Apr 2020 10:30:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/nodejs-internals/</guid><description>Since the introduction of Node.js by Ryan Dahl at the European JSConf on 8 November 2009, it has seen wide usage across the tech industry. Companies such as Netflix, Uber, and LinkedIn give credibility to the claim that Node.js can withstand a high amount of traffic and concurrency.
Armed with basic knowledge, beginner and intermediate developers of Node.js struggle with many things: “It’s just a runtime!” “It has event loops!</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/nodejs-internals/" />
              <title>Exploring Node.js Internals</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Exploring Node.js Internals</h1>
                  
                    
                    <address>Aleem Isiaka</address>
                  
                  <time datetime="2020-04-23T10:30:00&#43;00:00" class="op-published">2020-04-23T10:30:00+00:00</time>
                  <time datetime="2020-04-23T10:30:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>Since the introduction of Node.js by <a href="https://twitter.com/ryanmdahl">Ryan Dahl</a> at the European JSConf on 8 November 2009, it has seen wide usage across the tech industry. Companies such as Netflix, Uber, and LinkedIn give credibility to the claim that Node.js can withstand a high amount of traffic and concurrency.</p>

<p>Armed with basic knowledge, beginner and intermediate developers of Node.js struggle with many things: “It’s just a runtime!” “It has event loops!” “Node.js is single-threaded like JavaScript!”</p>

<p>While some of these claims are true, we will dig deeper into the Node.js runtime, understanding how it runs JavaScript, seeing whether it actually is single-threaded, and, finally, better understanding the interconnection between its core dependencies, V8 and libuv.</p>

<h4 id="prerequisites">Prerequisites</h4>

<ul>
<li>Basic knowledge of JavaScript</li>
<li>Familiarity with Node.js semantics (<code>require</code>, <code>fs</code>)</li>
</ul>

<h3 id="what-is-node-js">What Is Node.js?</h3>

<p>It might be tempting to assume what many people have believed about Node.js, the most common definition of it being that it’s a <strong>runtime for the JavaScript language</strong>. To consider this, we should understand what led to this conclusion.</p>

<p>Node.js is often described as a combination of C++ and JavaScript. The C++ part consists of bindings running low-level code that make it possible to access hardware connected to the computer. The JavaScript part takes JavaScript as its source code and runs it in a popular interpreter of the language, named the <a href="https://v8.dev/">V8</a> engine.</p>

<p>With this understanding, we could describe Node.js as a unique tool that combines JavaScript and C++ to run programs outside of the browser environment.</p>

<p>But could we actually call it a runtime? To determine that, let’s define what a runtime is.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">What is a runtime? <a href="https://t.co/eaF4CoWecX">https://t.co/eaF4CoWecX</a></p>&mdash; Christian Nwamba (@codebeast) <a href="https://twitter.com/codebeast/status/1235537012834185217?ref_src=twsrc%5Etfw">March 5, 2020</a></blockquote>

<p>In one of <a href="https://stackoverflow.com/a/3710234/7368018">his answers</a> on StackOverflow, <a href="https://stackoverflow.com/users/82511/djna">DJNA</a> defines a runtime environment as “everything you need to execute a program, but no tools to change it”. According to this definition, we can confidently say that everything that is happening while we run our code (in any language whatsoever) is running in a runtime environment.</p>

<p>Other languages have their own runtime environment. For Java, it is the Java Runtime Environment (JRE). For .NET, it is the Common Language Runtime (CLR). For Erlang, it is BEAM.</p>

<p>Nevertheless, some of these runtimes have other languages that depend on them. For example, Java has Kotlin, a programming language that compiles to code that a JRE can understand. Erlang has Elixir. And we know there are many variants for .NET development, which all run in the CLR, known as the .NET Framework.</p>

<p>Now we understand that a runtime is an environment provided for a program to be able to execute successfully, and we know that V8 and a host of C++ libraries make it possible for a Node.js application to execute. Node.js itself is the actual runtime that binds everything together to make those libraries an entity, and it understands just one language &mdash; JavaScript &mdash; regardless of what Node.js is built with.</p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="internal-structure-of-node-js">Internal Structure Of Node.js</h3>

<p>When we attempt to run a Node.js program (such as <code>index.js</code>) from our command line using the command <code>node index.js</code>, we are calling the Node.js runtime. This runtime, as mentioned, consists of two independent dependencies, V8 and libuv.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png"
			sizes="100vw"
			alt="Core Node.js dependencies"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Core Node.js Dependencies (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/285f5aff-35c8-4274-a571-b377a987bbc6/nodejs-internals-nodejs-dependencies.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>V8 is a project created and maintained by Google. It takes JavaScript source code and runs it outside of the browser environment. When we run a program through a <code>node</code> command, the source code is passed by the Node.js runtime to V8 for execution.</p>

<p>The libuv library contains C++ code that enables low-level access to the operating system. Functionality such as networking, writing to the file system, and concurrency are not shipped by default in V8, which is the part of Node.js that runs our JavaScript code. With its set of libraries, libuv provides these utilities and more in a Node.js environment.</p>

<p>Node.js is the glue that holds the two libraries together, thereby becoming a unique solution. Throughout the execution of a script, Node.js understands which project to pass control to and when.</p>

<div class="sponsors__lead-place"></div>




<h3 id="interesting-apis-for-server-side-programs">Interesting APIs For Server-Side Programs</h3>

<p>If we study a little history of JavaScript, we would know that it’s meant to add some functionality and interaction to a page in the browser. And in the browser, we would interact with the elements of the document object model (DOM) that make up the page. For this, a set of APIs exists, referred to collectively as the DOM API.</p>

<p>The DOM exists only in the browser; it is what is parsed to render a page, and it is basically written in the markup language known as HTML. Also, the browser exists in a window, hence the <code>window</code> object, which acts as a root for all of the objects on the page in a JavaScript context. This environment is called the browser environment, and it is a runtime environment for JavaScript.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png"
			sizes="100vw"
			alt="Node.js APIs call libuv for some functions"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Node.js APIs interact with libuv (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d6e2669-7782-4aef-b71b-0f62ff61d6d4/nodejs-internals-nodejs-apis.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>In a Node.js environment, we have nothing like a page, nor a browser &mdash; this nullifies our knowledge of the global <a href="https://developer.mozilla.org/en/docs/Web/API/Window">window object</a>. What we do have is a set of APIs that interact with the operating system to provide additional functionality to a JavaScript program. These APIs for Node.js (<code>fs</code>, <code>path</code>, <code>buffer</code>, <code>events</code>, <code>HTTP</code>, and so on), as we have them, exist only for Node.js, and they are provided by Node.js (itself a runtime) so that we can run programs written for Node.js.</p>

<h3 id="experiment-how-fs-writefile-creates-a-new-file">Experiment: How <code>fs.writeFile</code> Creates A New File</h3>

<p>If V8 was created to run JavaScript outside of the browser, and if a Node.js environment does not have the same context or environment as a browser, then how would we do something like access the file system or make an HTTP server?</p>

<p>As an example, let’s take a simple Node.js application that writes a file to the file system in the current directory:</p>

<pre><code class="language-javascript">const fs = require("fs")

fs.writeFile("./test.txt", "text");
</code></pre>

<p>As shown, we are trying to write a new file to the file system. This feature is not available in the JavaScript language; it is available only in a Node.js environment. How does this get executed?</p>

<p>To understand this, let’s take a tour of the Node.js code base.</p>

<p>Heading over to the GitHub <a href="https://github.com/nodejs/node">repository for Node.js</a>, we see two main folders, <code>src</code> and <code>lib</code>. The <code>lib</code> folder has the JavaScript code that provides the nice set of modules that are included by default with every Node.js installation. The <code>src</code> folder contains the C++ libraries for libuv.</p>

<p>If we look in the <code>src</code> folder and go through the <a href="https://github.com/nodejs/node/blob/master/lib/fs.js"><code>fs.js</code> file</a>, we will see that it is full of impressive JavaScript code. On <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L1880">line 1880</a>, we will notice an <code>exports</code> statement. This statement exports everything we can access by importing the <code>fs</code> module, and we can see that it exports a function named <code>writeFile</code>.</p>

<p>Searching for <code>function writeFile(</code> (where the function is defined) leads us to <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L1303">line 1303</a>, where we see that the function is defined with four parameters:</p>

<div class="break-out">
 <pre><code class="language-javascript">function writeFile(path, data, options, callback) {
  callback = maybeCallback(callback || options);
  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'w' });
  const flag = options.flag || 'w';

  if (!isArrayBufferView(data)) {
    validateStringAfterArrayBufferView(data, 'data');
    data = Buffer.from(data, options.encoding || 'utf8');
  }

  if (isFd(path)) {
    const isUserFd = true;
    writeAll(path, isUserFd, data, 0, data.byteLength, callback);
    return;
  }

  fs.open(path, flag, options.mode, (openErr, fd) => {
    if (openErr) {
      callback(openErr);
    } else {
      const isUserFd = false;
      writeAll(fd, isUserFd, data, 0, data.byteLength, callback);
    }
  });
}
</code></pre>
</div>

<p>On lines <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L1315">1315</a> and <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L1324">1324</a>, we see that a single function, <code>writeAll</code>, is called after some validation checks. We find this function on <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L1278">line 1278</a> in the same <a href="https://github.com/nodejs/node/blob/master/lib/fs.js"><code>fs.js</code> file</a>.</p>

<div class="break-out">
 <pre><code class="language-javascript">function writeAll(fd, isUserFd, buffer, offset, length, callback) {
  // write(fd, buffer, offset, length, position, callback)
  fs.write(fd, buffer, offset, length, null, (writeErr, written) => {
    if (writeErr) {
      if (isUserFd) {
        callback(writeErr);
      } else {
        fs.close(fd, function close() {
          callback(writeErr);
        });
      }
    } else if (written === length) {
      if (isUserFd) {
        callback(null);
      } else {
        fs.close(fd, callback);
      }
    } else {
      offset += written;
      length -= written;
      writeAll(fd, isUserFd, buffer, offset, length, callback);
    }
  });
}
</code></pre>
</div>

<p>It is also interesting to note that this module is attempting to call itself. We see this on <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L1280">line 1280</a>, where it is calling <code>fs.write</code>. Looking for the <code>write</code> function, we will discover a little information.</p>

<p>The <code>write</code> function starts on <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L571">line 571</a>, and it runs about <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L571-#L613">42 lines</a>. We see a recurring pattern in this function: the way it calls a function on the <code>binding</code> module, as seen on lines <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L594">594</a> and <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L612">612</a>. A function on the <code>binding</code> module is called not only in this function, but in virtually any function that is exported in the <a href="https://github.com/nodejs/node/blob/master/lib/fs.js"><code>fs.js</code> file</a> file. Something must be very special about it.</p>

<p>The <code>binding</code> variable is declared on <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/fs.js#L58">line 58</a>, at the very top of the file, and a click on that function call reveals some information, with the help of GitHub.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png"
			sizes="100vw"
			alt="Declaration of the binding variable"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Declaration of the binding variable (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66134679-e264-473a-9b22-d0d731411f2d/nodejs-internals-binding-variable-declaration.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>This <code>internalBinding</code> function is found in the module named <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/lib/internal/bootstrap/loaders.js">loaders</a>. The main function of the loaders module is to load all libuv libraries and connect them through the V8 project with Node.js. How it does this is rather magical, but to learn more we can look closely at the <code>writeBuffer</code> function that is called by the <code>fs</code> module.</p>

<p>We should look where this connects with libuv, and where V8 comes in. At the top of the loaders module, some good documentation there states this:</p>

<div class="break-out">
 <pre><code class="language-javascript">// This file is compiled and run by node.cc before bootstrap/node.js
// was called, therefore the loaders are bootstraped before we start to
// actually bootstrap Node.js. It creates the following objects:
//
// C++ binding loaders:
// - process.binding(): the legacy C++ binding loader, accessible from user land
//   because it is an object attached to the global process object.
//   These C++ bindings are created using NODE_BUILTIN_MODULE_CONTEXT_AWARE()
//   and have their nm_flags set to NM_F_BUILTIN. We do not make any guarantees
//   about the stability of these bindings, but still have to take care of
//   compatibility issues caused by them from time to time.
// - process._linkedBinding(): intended to be used by embedders to add
//   additional C++ bindings in their applications. These C++ bindings
//   can be created using NODE_MODULE_CONTEXT_AWARE_CPP() with the flag
//   NM_F_LINKED.
// - internalBinding(): the private internal C++ binding loader, inaccessible
//   from user land unless through `require('internal/test/binding')`.
//   These C++ bindings are created using NODE_MODULE_CONTEXT_AWARE_INTERNAL()
//   and have their nm_flags set to NM_F_INTERNAL.
//
// Internal JavaScript module loader:
// - NativeModule: a minimal module system used to load the JavaScript core
//   modules found in lib/**/*.js and deps/**/*.js. All core modules are
//   compiled into the node binary via node_javascript.cc generated by js2c.py,
//   so they can be loaded faster without the cost of I/O. This class makes the
//   lib/internal/*, deps/internal/* modules and internalBinding() available by
//   default to core modules, and lets the core modules require itself via
//   require('internal/bootstrap/loaders') even when this file is not written in
//   CommonJS style.
</code></pre>
</div>

<p>What we learn here is that for every module called from the <code>binding</code> object in the JavaScript section of the Node.js project, there is an equivalent of it in the C++ section, in the <code>src</code> folder.</p>

<p>From our <code>fs</code> tour, we see that the module that does this is located <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/src/node_file.cc">in <code>node_file.cc</code></a>. Every function that is accessible through the module is defined in the file; for example, we have the <code>writeBuffer</code> on <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/src/node_file.cc#L2258">line 2258</a>. The actual definition of that method in the C++ file is on <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/src/node_file.cc#L1785">line 1785</a>. Also, the call to the part of libuv that does the actual writing to the file can be found on lines <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/src/node_file.cc#L1809">1809</a> and <a href="https://github.com/nodejs/node/blob/cd1db2db48d28db805227e7f6ade79a106d85bc6/src/node_file.cc#L1815">1815</a>, where the libuv function <code>uv_fs_write</code> is called asynchronously.</p>

<h4 id="what-do-we-gain-from-this-understanding">What Do We Gain From This Understanding?</h4>

<p>Just like many other interpreted language runtimes, the runtime of Node.js can be hacked. With greater understanding, we could do things that are impossible with the standard distribution just by looking through the source. We could add libraries to make changes to the way some functions are called. But above all, this understanding is a foundation for further exploration.</p>

<h3 id="is-node-js-single-threaded">Is Node.js Single-Threaded?</h3>

<p>Sitting on libuv and V8, Node.js has access to some additional functionalities that a typical JavaScript engine running in the browser does not have.</p>

<p>Any JavaScript that runs in a browser will execute in a single thread. A thread in a program’s execution is just like a black box sitting on top of the CPU in which the program is being executed. In a Node.js context, some code could be executed in as many threads as our machines can carry.</p>

<p>To verify this particular claim, let’s explore a simple code snippet.</p>

<pre><code class="language-javascript">const fs = require("fs");
// A little benchmarking
const startTime = Date.now()
fs.writeFile("./test.txt", "test", (err) => {
    If (error) {
        console.log(err)
    }
    console.log("1 Done: ", Date.now() &mdash; startTime)
});
</code></pre>

<p>In the snippet above, we are trying to create a new file on the disk in the current directory. To see how long this could take, we’ve added a little benchmark to monitor the start time of the script, which gives us the duration in milliseconds of the script that is creating the file.</p>

<p>If we run the code above, we will get a result like this:</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png"
			sizes="100vw"
			alt="Result of the time it takes to create a single file in Node.js"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Time taken to create a single file in Node.js (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bf59bd-2b04-456c-8f00-0dd09cdc6d8f/nodejs-internals-single-file-creation.png'>Large preview</a>)
    </figcaption>
  
</figure>

<pre><code class="language-javascript">$ node ./test.js
    -> 1 Done: 0.003s
</code></pre>

<p>This is very impressive: just 0.003 seconds.</p>

<p>But let’s do something really interesting. First let’s duplicate the code that generates the new file, and update the number in the log statement to reflect their positions:</p>

<div class="break-out">
 <pre><code class="language-javascript">const fs = require("fs");
// A little benchmarking
const startTime = Date.now()
fs.writeFile("./test1.txt", "test", function (err) {
     if (err) {
        console.log(err)
    }
    console.log("1 Done: %ss", (Date.now() &mdash; startTime) / 1000)
});

fs.writeFile("./test2.txt", "test", function (err) {
     if (err) {
        console.log(err)
    }
    console.log("2 Done: %ss", (Date.now() &mdash; startTime) / 1000)
});


fs.writeFile("./test3.txt", "test", function (err) {
     if (err) {
        console.log(err)
    }
    console.log("3 Done: %ss", (Date.now() &mdash; startTime) / 1000)
});

fs.writeFile("./test4.txt", "test", function (err) {
     if (err) {
        console.log(err)
    }
    console.log("4 Done: %ss", (Date.now() &mdash; startTime) / 1000)
});
</code></pre>
</div>

<p>If we attempt to run this code, we will get something that blows our minds. Here is my result:</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png"
			sizes="100vw"
			alt="Result of the time it takes to create multiple files"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Creating many files at once (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1bb59-0e5c-492d-a093-ff78293c756b/nodejs-internals-multiple-file-creation.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>First, we will notice that the results are not consistent. Secondly, we see that the time has increased. What’s happening?</p>

<h3 id="low-level-tasks-get-delegated">Low-Level Tasks Get Delegated</h3>

<p>Node.js is single-threaded, as we know now. Parts of Node.js are written in JavaScript, and others in C++. Node.js uses the same concepts of the event loop and the call stack that we are familiar with from the browser environment, meaning that the JavaScript parts of Node.js are single-threaded. But the low-level task that requires speaking with an operating system is not single-threaded.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png"
			sizes="100vw"
			alt="Low-level tasks are delegated to the OS through libuv"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Node.js low-level task delegation (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9f250fb-7831-4c51-bace-1bc53d6ddb18/nodejs-internals-nodejs-delegation.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>When a call is recognized by Node.js as being intended for libuv, it delegates this task to libuv. In its operation, libuv requires threads for some of its libraries, hence the use of the thread pool in executing Node.js programs when they are needed.</p>

<p>By default, the Node.js thread pool provided by libuv has four threads in it. We could increase or reduce this thread pool by calling <code>process.env.UV_THREADPOOL_SIZE</code> at the top of our script.</p>

<pre><code class="language-javascript">// script.js
process.env.UV_THREADPOOL_SIZE = 6;

// …
// …
</code></pre>

<h3 id="what-happens-with-our-file-making-program">What Happens With Our File-Making Program</h3>

<p>It appears that once we invoke the code to create our file, Node.js hits the libuv part of its code, which dedicates a thread for this task. This section in libuv gets some statistical information about the disk before working on the file.</p>

<p>This statistical checking could take a while to complete; hence, the thread is released for some other tasks until the statistical check is completed. When the check is completed, the libuv section occupies any available thread or waits until a thread becomes available for it.</p>

<p>We have only four calls and four threads, so there are enough threads to go around. The only question is how fast each thread will process its task. We will notice that the first code to make it into the thread pool will return its result first, and it blocks all of the other threads while running its code.</p>

<h3 id="conclusion">Conclusion</h3>

<p>We now understand what Node.js is. We know it’s a runtime. We’ve defined what a runtime is. And we’ve dug deep into what makes up the runtime provided by Node.js.</p>

<p>We have come a long way. And from our little tour of the <a href="https://github.com/nodejs/node">Node.js repository on GitHub</a>, we can explore any API we might be interested in, following the same process we took here. Node.js is open source, so surely we can dive into the source, can’t we?</p>

<p>Even though we have touched on several of the low levels of what happens in the Node.js runtime, we mustn’t assume that we know it all. The resources below point to some information on which we can build our knowledge:</p>

<ul>
<li><a href="https://nodejs.dev/">Introduction to Node.js</a><br />
Being an official website, Node.dev explains what Node.js is, as well as its package managers, and lists web frameworks built on top of it.</li>
<li>“<a href="https://www.nodebeginner.org/#javascript-and-nodejs">JavaScript &amp; Node.js</a>”, <em>The Node Beginner Book</em><br />
This book by <a href="https://twitter.com/manuelkiessling">Manuel Kiessling</a> does a fantastic job of explaining Node.js, after warning that JavaScript in the browser is not the same as the one in Node.js, even though both are written in the same language.</li>
<li><em><a href="https://www.amazon.com/Beginning-Node-js-Basarat-Syed/">Beginning Node.js</a></em><br />
This beginner book goes beyond an explanation of the runtime. It teaches about packages and streams and creating a web server with the Express framework.</li>
<li><a href="http://docs.libuv.org/en/v1.x/">LibUV</a><br />
This is the official documentation of the supporting C++ code of the Node.js runtime.</li>
<li><a href="https://v8.dev/docs">V8</a><br />
This is the official documentation of the JavaScript engine that makes it possible to write Node.js with JavaScript.</li>
</ul>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ra, il, al)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Carmine Zaccagnino</author><title>Responsive Web And Desktop Development With Flutter</title><link>https://www.smashingmagazine.com/2020/04/responsive-web-desktop-development-flutter/</link><pubDate>Wed, 22 Apr 2020 10:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/responsive-web-desktop-development-flutter/</guid><description>This tutorial is not an introduction to Flutter itself. There are plenty of articles, videos and several books available online with simple introductions that will help you learn the basics of Flutter. Instead, we’ll be covering the following two objectives:
The current state of Flutter non-mobile development and how you can run Flutter code in the browser, on a desktop or laptop computer; How to create responsive apps using Flutter, so that you can see its power &amp;mdash; especially as a web framework &amp;mdash; on full display, ending with a note about routing based on URL.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/responsive-web-desktop-development-flutter/" />
              <title>Responsive Web And Desktop Development With Flutter</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Responsive Web And Desktop Development With Flutter</h1>
                  
                    
                    <address>Carmine Zaccagnino</address>
                  
                  <time datetime="2020-04-22T10:00:00&#43;00:00" class="op-published">2020-04-22T10:00:00+00:00</time>
                  <time datetime="2020-04-22T10:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>This tutorial is not an introduction to Flutter itself. There are plenty of articles, videos and several books available online with simple introductions that will help you learn the basics of Flutter. Instead, we’ll be covering the following two objectives:</p>

<ol>
<li>The current state of Flutter non-mobile development and how you can run Flutter code in the browser, on a desktop or laptop computer;</li>
<li>How to create responsive apps using Flutter, so that you can see its power &mdash; especially as a web framework &mdash; on full display, ending with a note about routing based on URL.</li>
</ol>

<p>Let’s get into it!</p>

<h3 id="what-is-flutter-why-it-s-important-what-it-has-evolved-into-where-it-s-going">What Is Flutter, Why It’s Important, What It Has Evolved Into, Where It’s Going</h3>

<p>Flutter is Google’s latest app development framework. Google envisions it to be all-encompassing: It will enable the same code to be executed on smartphones of all brands, on tablets, and on desktop and laptops computer as native apps or as web pages.</p>

<p>It’s a very ambitious project, but Google has been incredibly successful until now particularly in two aspects: in creating a truly platform-independent framework for Android and iOS native apps that works great and is fully ready for production use, and in creating an impressive front-end web framework that can share 100% of the code with a compatible Flutter app.</p>

<p>In the next section, we’re going to see what makes the app compatible and what’s the state of non-mobile Flutter development as of now.</p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="non-mobile-development-with-flutter">Non-Mobile Development With Flutter</h3>

<p>Non-mobile development with Flutter was first publicized in a significant way at Google I/O 2019. This section is about how to make it work and about when it works.</p>

<h4 id="how-to-enable-web-and-desktop-development">How To Enable Web And Desktop Development</h4>

<p>To enable web development, you must first be on Flutter’s beta channel. There are two ways to get to that point:</p>

<ul>
<li>Install Flutter directly on the beta channel by downloading the appropriate latest beta version from the <a href="https://flutter.dev/docs/development/tools/sdk/releases">SDK archive</a>.</li>
<li>If you already have Flutter installed, switch to the beta channel with <code>$ flutter channel beta</code>, and then perform the switch itself by updating your Flutter version (which is actually a <code>git pull</code> on the Flutter installation folder) with <code>$ flutter upgrade</code>.</li>
</ul>

<p>After that, you can run this:</p>

<pre><code class="language-bash">$ flutter config --enable-web</code></pre>

<p>Desktop support is much more experimental, especially due to a lack of tooling for Linux and Windows, making plugin development especially a major pain, and due to the fact that the APIs used for it are intended for proof-of-concept use and not for production. This is unlike web development, which is using the tried-and-tested dart2js compiler for release builds, which are not even supported for Windows and Linux native desktop apps.</p>

<p><strong>Note</strong>: <em>Support for macOS is slightly better than support for Windows and Linux, but it still isn’t as good as support for the web and not nearly as good as the full support for mobile platforms.</em></p>

<p>To enable support for desktop development, you need to switch to the <code>master</code> release channel by following the same steps outlined earlier for the <code>beta</code> channel. Then, run the following by replacing <code>&lt;OS_NAME&gt;</code> with either <code>linux</code>, <code>windows</code>, or <code>macos</code>:</p>

<pre><code class="language-bash">$ flutter config --enable-&lt;OS_NAME&gt;-desktop</code></pre>

<p>At this point, if you have issues with any of the following steps that I’ll be describing because the Flutter tool isn’t doing what I’m saying it should do, some common troubleshooting steps are these:</p>

<ul>
<li>Run <code>flutter doctor</code> to check for issues. A side effect of this Flutter command is that it should download any tools it needs that it doesn’t have.</li>
<li>Run <code>flutter upgrade</code>.</li>
<li>Turn it off and on again. The old tier-1 technical-support answer of restarting your computer might be just what is needed for you to be able to enjoy the full riches of Flutter.</li>
</ul>

<h4 id="running-and-building-flutter-web-apps">Running And Building Flutter Web Apps</h4>

<p>Flutter web support isn’t bad at all, and this is reflected in the ease of development for the web.</p>

<p>Running this…</p>

<pre><code class="language-bash">$ flutter devices</code></pre>

<p>… should show right away an entry for something like this:</p>

<pre><code class="language-bash">Web Server • web-server • web-javascript • Flutter Tools</code></pre>

<p>Additionally, running the Chrome browser should cause Flutter to show an entry for it as well. Running <code>flutter run</code> on a <strong>compatible</strong> Flutter project (more on that later) when the only “connected device” showing up is the web server will cause Flutter to start a web server on <code>localhost:&lt;RANDOM_PORT&gt;</code>, which will allow you to access your Flutter web app from any browser.</p>

<p>If you have installed Chrome but it’s not showing up, you need to set the <code>CHROME_EXECUTABLE</code> environment variable to the path to the Chrome executable file.</p>

<h4 id="running-and-building-flutter-desktop-apps">Running And Building Flutter Desktop Apps</h4>

<p>After you’ve enabled Flutter desktop support, you can run a Flutter app natively on your development workstation with <code>flutter run -d &lt;OS_NAME&gt;</code>, replacing <code>&lt;OS_NAME&gt;</code> with the same value you used when enabling desktop support. You can also build binaries in the <code>build</code> directory with <code>flutter build &lt;OS_NAME&gt;</code>.</p>

<p>Before you can do any of that, though, you need to have a directory containing what Flutter needs to build for your platform. This will be created automatically when you create a new project, but you’ll need to create it for an existing project with <code>flutter create .</code>. Also, the Linux and Windows APIs are unstable, so you might have to regenerate them for those platforms if the app stops working after a Flutter update.</p>

<h4 id="when-is-an-app-compatible">When Is An App Compatible?</h4>

<p>What have I meant all along when mentioning that a Flutter app has to be a “compatible project” in order for it to work on desktop or the web? Put simply, I mean that it mustn’t use any plugin that doesn’t have a platform-specific implementation for the platform on which you’re trying to build.</p>

<p>To make this point absolutely clear to everyone and avoid misunderstanding, please note that a <strong>Flutter plugin</strong> is a particular <strong>Flutter package</strong> that contains platform-specific code that is necessary for it to provide its features.</p>

<p>For example, you can use the <a href="https://pub.dev/packages/url_launcher">Google-developed <code>url_launcher</code> package</a> as much as you want (and you might want to, given that the web is built on hyperlinks).</p>

<p>An example of a Google-developed package the usage of which would preclude web development is <a href="https://pub.dev/packages/path_provider"><code>path_provider</code></a>, which is used to get the local storage path to save files to. This is an example of a package that, incidentally, isn’t of any use to a web app, so not being able to use it isn’t really a bummer, except for the fact that you need to change your code in order for it to work on the web if you’re using it.</p>

<p>For example, you can use the <a href="https://pub.dev/packages/shared_preferences">shared_preferences</a> package, which relies on HTML <code>localStorage</code> on the web.</p>

<p>Similar caveats are valid regarding desktop platforms: Very few plugins are compatible with desktop platforms, and, as this is a recurring theme, much more work on this needs to be done on the desktop side than is really necessary on Flutter for the web.</p>

<div class="sponsors__lead-place"></div>




<h3 id="creating-responsive-layouts-in-flutter">Creating Responsive Layouts In Flutter</h3>

<p>Because of what I’ve described above and for simplicity, I’m going to assume for the rest of this post that your target platform is the web, but the basic concepts apply to desktop development as well.</p>

<p>Supporting the web has benefits and responsibilities. Being pretty much forced to support different screen sizes might sound like a drawback, but consider that running the app in the web browsers enables you to see very easily how your app will look on screens of different sizes and aspect ratios, without having to run separate mobile device emulators.</p>

<p>Now, let’s talk code. How can you make your app responsive?</p>

<p>There are two perspectives from which this analysis is done:</p>

<ol>
<li>“What widgets am I using or can I use that can or should adapt to screens of different sizes?”</li>
<li>“How can I get information about the size of the screen, and how can I use it when writing UI code?”</li>
</ol>

<p>We’ll answer the first question later. Let’s first talk about the latter, because it can be dealt with very easily and is at the heart of the issue. There are two ways to do this:</p>

<ol>
<li>One way is to take the information from the <code>MediaQueryData</code> of the <code>MediaQuery</code> root <code>InheritedWidget</code>, which has to exist in the widget tree in order for a Flutter app to work (it’s part of <code>MaterialApp/WidgetsApp/CupertinoApp</code>), which you can get, just like any other <code>InheritedWidget</code>, with <code>MediaQuery.of(context)</code>, which has a <code>size</code> property, which is of type <code>Size</code>, and which therefore has two <code>width</code> and <code>height</code> properties of the type <code>double</code>.</li>
<li>The other way is to use a <a href="https://api.flutter.dev/flutter/widgets/LayoutBuilder-class.html"><code>LayoutBuilder</code></a>, which is a builder widget (just like a <code>StreamBuilder</code> or a <code>FutureBuilder</code>) that passes to the <code>builder</code> function (along with the <code>context</code>) a <code>BoxConstraints</code> object that has <code>minHeight</code>, <code>maxHeight</code>, <code>minWidth</code> and <code>maxWidth</code> properties.</li>
</ol>

<p>Here’s an <a href="https://dartpad.dev/62ddf21fb01a9c56b840323cff8df14e">example DartPad</a> using the <code>MediaQuery</code> to get constraints, the code for which is the following:</p>

<pre><code class="language-javascript">import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    MaterialApp(
      home: MyHomePage()
    );
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: [
            Text(
              "Width: ${MediaQuery.of(context).size.width}",
              style: Theme.of(context).textTheme.headline4
            ),
            Text(
              "Height: ${MediaQuery.of(context).size.height}",
              style: Theme.of(context).textTheme.headline4
            )
          ]
       )
     )
   );
}</code></pre>

<p>And <a href="https://dartpad.dev/63cbd8a313832e7e146198b032ce46d0">here’s one using the <code>LayoutBuilder</code></a> for the same thing:</p>

<pre><code class="language-javascript">import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    MaterialApp(
      home: MyHomePage()
    );
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    Scaffold(
      body: LayoutBuilder(
        builder: (context, constraints) =&gt; Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Text(
                "Width: ${constraints.maxWidth}",
                style: Theme.of(context).textTheme.headline4
              ),
              Text(
                "Height: ${constraints.maxHeight}",
                style: Theme.of(context).textTheme.headline4
              )
            ]
         )
       )
     )
  );
}</code></pre>

<p>Now, let’s think about what widgets can adapt to the constraints.</p>

<p>Fist of all, let’s think about the different ways of laying out multiple widgets according to the size of the screen.</p>

<p>The widget that most easily adapts is the <code>GridView</code>. In fact, a <code>GridView</code> built using the <code>GridView.extent</code> constructor doesn’t even need your involvement to be made responsive, as you can see in this <a href="https://dartpad.dev/e3ee859f99145166635e86387e6877dd">very simple example</a>:</p>

<div class="break-out">
<pre><code class="language-javascript">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    MaterialApp(
      home: MyHomePage()
    );
}

class MyHomePage extends StatelessWidget {
  final List<String> elements = [
    "Zero",
    "One",
    "Two",
    "Three",
    "Four",
    "Five",
    "Six",
    "Seven",
    "Eight",
    "A Million Billion Trillion",
    "A much, much longer text that will still fit"
  ];


  @override
  Widget build(context) =&gt;
    Scaffold(
      body: GridView.extent(
        maxCrossAxisExtent: 130.0,
        crossAxisSpacing: 20.0,
        mainAxisSpacing: 20.0,
        children: elements.map((el) =&gt; Card(child: Center(child: Padding(padding: EdgeInsets.all(8.0), child: Text(el))))).toList()
      )
   );
}</code></pre>
</div>

<p>You can accommodate content of different sizes by changing the <code>maxCrossAxisExtent</code>.</p>

<p>That example mostly served the purpose of showing the existence of the <code>GridView.extent</code> <code>GridView</code> constructor, but a much smarter way to do that would be to use a <code>GridView.builder</code> with a <code>SliverGridDelegateWithMaxCrossAxisExtent</code>, in this case where the widgets to be shown in the grid are dynamically created from another data structure, as you can see <a href="https://dartpad.dev/03e1556e28147a81b60277ad8e42e1b5">in this example</a>:</p>

<div class="break-out">
<pre><code class="language-javascript">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    MaterialApp(
      home: MyHomePage()
    );
}

class MyHomePage extends StatelessWidget {
  final List&lt;String&gt; elements = ["Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "A Million Billion Trillion", "A much, much longer text that will still fit"];


  @override
  Widget build(context) =&gt;
    Scaffold(
      body: GridView.builder(
        itemCount: elements.length,
        gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
          maxCrossAxisExtent: 130.0,
          crossAxisSpacing: 20.0,
          mainAxisSpacing: 20.0,
        ),
        itemBuilder: (context, i) =&gt; Card(
          child: Center(
            child: Padding(
              padding: EdgeInsets.all(8.0), child: Text(elements[i])
            )
          )
        )
      )
   );
}</code></pre>
</div>

<p>An example of GridView adapting to different screens is <a href="https://www.carminezacc.com">my personal landing page</a>, which is a very simple Flutter web app consisting of a <code>GridView</code> with a bunch of <code>Cards</code>, just like that previous example code, except that the <code>Cards</code> are a little more complex and larger.</p>

<p>A very simple change that could be made to apps designed for phones would be to replace a <code>Drawer</code> with a permanent menu on the left when there is space.</p>

<p>For example, we could have a <code>ListView</code> of widgets, like the following, which is used for navigation:</p>

<pre><code class="language-javascript">class Menu extends StatelessWidget {
  @override
  Widget build(context) =&gt; ListView(
    children: [
      FlatButton(
        onPressed: () {},
          child: ListTile(
          leading: Icon(Icons.looks_one),
          title: Text("First Link"),
        )
      ),
      FlatButton(
        onPressed: () {},
          child: ListTile(
          leading: Icon(Icons.looks_two),
          title: Text("Second Link"),
        )
      )
    ]
  );
}</code></pre>

<p>On a smartphone, a common place to use that would be inside a <code>Drawer</code> (also known as a hamburger menu).</p>

<p>Alternatives to that would be the <a href="https://api.flutter.dev/flutter/material/BottomNavigationBar-class.html"><code>BottomNavigationBar</code></a> or the <a href="https://api.flutter.dev/flutter/material/TabBar-class.html"><code>TabBar</code></a>, in combination with the <a href="https://api.flutter.dev/flutter/material/TabBarView-class.html"><code>TabBarView</code></a>, but with both we’d have to make more changes than are required with the drawer, so we’ll stick with the drawer.</p>

<p>To only show the <code>Drawer</code> containing the <code>Menu</code> that we saw earlier on smaller screens, you’d write code that looks like the following snippet, checking the width using the <code>MediaQuery.of(context)</code> and passing a <code>Drawer</code> object to the <code>Scaffold</code> only if it’s less than some width value that we believe to be appropriate for our app:</p>

<pre><code class="language-javascript">Scaffold(
    appBar: AppBar(/* ... \*/),
    drawer: MediaQuery.of(context).size.width &lt; 500 ?
    Drawer(
      child: Menu(),
    ) :
    null,
    body: /* ... \*/
)</code></pre>

<p>Now, let’s think about the <code>body</code> of the <code>Scaffold</code>. As the sample main content of our app, we’ll use the <code>GridView</code> that we built previously, which we keep in a separate widget named <code>Content</code> to avoid confusion:</p>

<div class="break-out">
<pre><code class="language-javascript">class Content extends StatelessWidget {
  final List<String> elements = ["Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "A Million Billion Trillion", "A much, much longer text that will still fit"];
  @override
  Widget build(context) =&gt; GridView.builder(
    itemCount: elements.length,
    gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
      maxCrossAxisExtent: 130.0,
      crossAxisSpacing: 20.0,
      mainAxisSpacing: 20.0,
    ),
    itemBuilder: (context, i) =&gt; Card(
      child: Center(
        child: Padding(
          padding: EdgeInsets.all(8.0), child: Text(elements[i])
        )
      )
    )
  );
}</code></pre>
</div>

<p>On bigger screens, the body itself may be a <code>Row</code> that shows two widgets: the <code>Menu</code>, which is restricted to a fixed width, and the <code>Content</code> filling the rest of the screen.</p>

<p>On smaller screens, the entire <code>body</code> would be the <code>Content</code>.</p>

<p>We’ll wrap everything in a <code>SafeArea</code> and a <code>Center</code> widget because sometimes Flutter web app widgets, especially when using <code>Row</code>s and <code>Column</code>s, end up outside of the visible screen area, and that is fixed with <code>SafeArea</code> and/or <code>Center</code>.</p>

<p>This means the <code>body</code> of the <code>Scaffold</code> will be the following:</p>

<pre><code class="language-javascript">SafeArea(
  child:Center(
    child: MediaQuery.of(context).size.width &lt; 500 ? Content() :
    Row(
      children: [
        Container(
          width: 200.0,
          child: Menu()
        ),
        Container(
          width: MediaQuery.of(context).size.width-200.0,
          child: Content()
        )
      ]
    )
  )
)</code></pre>

<p>Here is <a href="https://dartpad.dev/7b3e9dfaeb216a7caed74fe62fa6f1a4">all of that put together</a>:</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dbed574b-6aef-412e-9103-5e79e763f433/3-responsive-web-desktop-development-with-flutter.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd8fe14b-2d46-4886-8b1a-b4c63966bda5/03-responsive-web-desktop-development-with-flutter-opt.gif" width="800" height="490" alt="" /></a><figcaption>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dbed574b-6aef-412e-9103-5e79e763f433/3-responsive-web-desktop-development-with-flutter.gif">Large preview</a>)</figcaption></figure>

<div class="break-out">
<pre><code class="language-javascript">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(context) =&gt; MaterialApp(
    home: HomePage()
  );
}


class HomePage extends StatelessWidget {
  @override
  Widget build(context) =&gt; Scaffold(
    appBar: AppBar(title: Text("test")),
    drawer: MediaQuery.of(context).size.width &lt; 500 ? Drawer(
      child: Menu(),
    ) : null,
    body: SafeArea(
        child:Center(
          child: MediaQuery.of(context).size.width &lt; 500 ? Content() :
          Row(
            children: [
              Container(
                width: 200.0,
                child: Menu()
              ),
              Container(
                width: MediaQuery.of(context).size.width-200.0,
                child: Content()
              )
            ]
          )
        )
    )
  );
}

class Menu extends StatelessWidget {
  @override
  Widget build(context) =&gt; ListView(
    children: [
      FlatButton(
        onPressed: () {},
          child: ListTile(
          leading: Icon(Icons.looks_one),
          title: Text("First Link"),
        )
      ),
      FlatButton(
        onPressed: () {},
          child: ListTile(
          leading: Icon(Icons.looks_two),
          title: Text("Second Link"),
        )
      )
    ]
  );
}

class Content extends StatelessWidget {
  final List&lt;String&gt; elements = ["Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "A Million Billion Trillion", "A much, much longer text that will still fit"];
  @override
  Widget build(context) =&gt; GridView.builder(
    itemCount: elements.length,
    gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
      maxCrossAxisExtent: 130.0,
      crossAxisSpacing: 20.0,
      mainAxisSpacing: 20.0,
    ),
    itemBuilder: (context, i) =&gt; Card(
      child: Center(
        child: Padding(
          padding: EdgeInsets.all(8.0), child: Text(elements[i])
        )
      )
    )
  );
}</code></pre>
</div>

<p>This is most of the stuff you’ll need as a general introduction to responsive UI in Flutter. Much of its application will depend on your app’s specific UI, and it’s hard to pinpoint exactly what you can do to make your app responsive, and you can take many approaches depending on your preference. Now, though, let’s see how we can make a more complete example into a responsive app, thinking about common app elements and UI flows.</p>

<div class="sponsors__lead-place"></div>




<h3 id="putting-it-in-context-making-an-app-responsive">Putting It In Context: Making An App Responsive</h3>

<p>So far, we have just a screen. Let’s expand that into a two-screen app with working URL-based navigation!</p>

<h4 id="creating-a-responsive-login-page">Creating A Responsive Login Page</h4>

<p>Chances are that your app has a login page. How can we make that responsive?</p>

<p>Login screens on mobile devices are quite similar to each other usually. The space available isn’t much; it’s usually just a <code>Column</code> with some <code>Padding</code> around its widgets, and it contains <code>TextField</code>s for typing in a username and a password and a button to log in. So, a pretty standard (though not functioning, as that would require, among other things, a <code>TextEditingController</code> for each <code>TextField</code>) login page for a mobile app could be the following:</p>

<div class="break-out">
<pre><code class="language-javascript">Scaffold(
  body: Container(
    padding: const EdgeInsets.symmetric(
      vertical: 30.0, horizontal: 25.0
    ),
    child: Column(
      mainAxisAlignment: MainAxisAlignment.spaceAround,
      children: [
        Text("Welcome to the app, please log in"),
        TextField(
          decoration: InputDecoration(
            labelText: "username"
          )
        ),
        TextField(
          obscureText: true,
          decoration: InputDecoration(
            labelText: "password"
          )
        ),
        RaisedButton(
          color: Colors.blue,
          child: Text("Log in", style: TextStyle(color: Colors.white)),
          onPressed: () {}
        )
      ]
    ),
  ),
)</code></pre>
</div>

<p>It looks fine on a mobile device, but those very wide <code>TextField</code>s start to look jarring on a tablet, let alone a bigger screen. However, we can’t just decide on a fixed width because phones have different screen sizes, and we should maintain a degree of flexibility.</p>

<p>For example, through experimentation, we might find that the maximum width should be 500. Well, we would set the <code>Container</code>’s <code>constraints</code> to 500 (I used a <code>Container</code> instead of <code>Padding</code> in the previous example because I knew where I was going with this) and we’re good to go, right? Not really, because that would cause the login widgets to stick to the left side of the screen, which might be even worse than stretching everything. So, we wrap in a <code>Center</code> widget, like this:</p>

<pre><code class="language-javascript">Center(
  child: Container(
    constraints: BoxConstraints(maxWidth: 500),
    padding: const EdgeInsets.symmetric(
      vertical: 30.0, horizontal: 25.0
    ),
    child: Column(/* ... \*/)
  )
)</code></pre>

<p>That already looks fine, and we haven’t even had to use either a <code>LayoutBuilder</code> or the <code>MediaQuery.of(context).size</code>. Let’s go one step further to make this look very good, though. It would look better, in my view, if the foreground part was in some way separated from the background. We can achieve that by giving a background color to what’s behind the <code>Container</code> with the input widgets, and keeping the foreground <code>Container</code> white. To make it look a little better, let’s keep the <code>Container</code> from stretching to the top and bottom of the screen on large devices, give it rounded corners, and give it a nice animated transition between the two layouts.</p>

<p>All of that now requires a <code>LayoutBuilder</code> and an outer <code>Container</code> in order both to set a background color and to add padding all around the <code>Container</code> and not just on the sides only on larger screens. Also, to make the change in padding amount animated, we just need to turn that outer <code>Container</code> into an <code>AnimatedContainer</code>, which requires a <code>duration</code> for the animation, which we’ll set to half a second, which is <code>Duration(milliseconds: 500)</code> in code.</p>

<p>Here’s that <a href="https://dartpad.dev/035fae7a2d67003e38f0792c968feee9">example of a responsive login page</a>:</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e82654c5-5a40-4be7-bcaa-901c92ca5e27/4-responsive-web-desktop-development-with-flutter.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3bba75cc-a948-47c3-a68b-bbba9f03ceb5/4-responsive-web-desktop-development-with-flutter-opt.gif" width="800" height="490" alt="" /></a><figcaption>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e82654c5-5a40-4be7-bcaa-901c92ca5e27/4-responsive-web-desktop-development-with-flutter.gif">Large preview</a>)</figcaption></figure>

<div class="break-out">
<pre><code class="language-javascript">class LoginPage extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    Scaffold(
      body: LayoutBuilder(
        builder: (context, constraints) {
          return AnimatedContainer(
            duration: Duration(milliseconds: 500),
            color: Colors.lightGreen[200],
            padding: constraints.maxWidth &lt; 500 ? EdgeInsets.zero : EdgeInsets.all(30.0),
            child: Center(
              child: Container(
                padding: EdgeInsets.symmetric(
                  vertical: 30.0, horizontal: 25.0
                ),
                constraints: BoxConstraints(
                  maxWidth: 500,
                ),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(5.0),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    Text("Welcome to the app, please log in"),
                    TextField(
                      decoration: InputDecoration(
                        labelText: "username"
                      )
                    ),
                    TextField(
                      obscureText: true,
                      decoration: InputDecoration(
                        labelText: "password"
                      )
                    ),
                    RaisedButton(
                      color: Colors.blue,
                      child: Text("Log in", style: TextStyle(color: Colors.white)),
                      onPressed: () {
                        Navigator.pushReplacement(
                          context,
                          MaterialPageRoute(
                            builder: (context) =&gt; HomePage()
                          )
                        );
                      }  
                    )
                  ]
                ),
              ),
            )
          );
        }
      )
   );
}</code></pre>
</div>

<p>As you can see, I’ve also changed the <code>RaisedButton</code>’s <code>onPressed</code> to a callback that navigates us to a screen named <code>HomePage</code> (which could be, for example, the view we built previously with a <code>GridView</code> and a menu or a drawer). Now, though, that navigation part is what we’re going to focus on.</p>

<h4 id="named-routes-making-your-app-s-navigation-more-like-a-proper-web-app">Named Routes: Making Your App’s Navigation More Like A Proper Web App</h4>

<p>A common thing for web apps to have is the ability to change screens based on the URL. For example going to <code>https://appurl/login</code> should give you something different than <code>https://appurl/somethingelse</code>. Flutter, in fact, supports <strong>named routes</strong>, which have two purposes:</p>

<ol>
<li>In a web app, they have exactly that feature that I mentioned in the previous sentence.</li>
<li>In any app, they allow you to predefine routes for your app and give them names, and then be able to navigate to them just by specifying their name.</li>
</ol>

<p>To do that, we need to change the <code>MaterialApp</code> constructor to one that looks like the following:</p>

<pre><code class="language-javascript">MaterialApp(
  initialRoute: "/login",
  routes: {
    "/login": (context) => LoginPage(),
    "/home": (context) => HomePage()
  }
);</code></pre>

<p>And then we can switch to a different route by using <code>Navigator.pushNamed(context, routeName)</code> and <code>Navigator.pushReplacementNamed(context, routeName)</code>, instead of <code>Navigator.push(context, route)</code> and <code>Navigator.pushReplacement(context, route)</code>.</p>

<p>Here is that <a href="https://dartpad.dev/e8fe4c1bc03f8366f03de81c6835a23d">applied to the hypothetical app we built</a> in the rest of this article. You can’t really see named routes in action in DartPad, so you should try this out on your own machine with <code>flutter run</code>, or <a href="https://www.carminezacc.com/responsexample/index.html">check the example in action</a>:</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ac6436c-558b-4a62-ab21-f35482d4e110/1-responsive-web-desktop-development-with-flutter.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aef3b20-179c-4689-8b73-e919cfc1e1d4/1-responsive-web-desktop-development-with-flutter-opt.gif" width="800" height="490" alt="" /></a><figcaption>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ac6436c-558b-4a62-ab21-f35482d4e110/1-responsive-web-desktop-development-with-flutter.gif">Large preview</a>)</figcaption></figure>

<div class="break-out">
<pre><code class="language-javascript">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    MaterialApp(
      initialRoute: "/login",
      routes: {
        "/login": (context) =&gt; LoginPage(),
        "/home": (context) =&gt; HomePage()
      }
    );
}

class LoginPage extends StatelessWidget {
  @override
  Widget build(context) =&gt;
    Scaffold(
      body: LayoutBuilder(
        builder: (context, constraints) {
          return AnimatedContainer(
            duration: Duration(milliseconds: 500),
            color: Colors.lightGreen[200],
            padding: constraints.maxWidth &lt; 500 ? EdgeInsets.zero : const EdgeInsets.all(30.0),
            child: Center(
              child: Container(
                padding: const EdgeInsets.symmetric(
                  vertical: 30.0, horizontal: 25.0
                ),
                constraints: BoxConstraints(
                  maxWidth: 500,
                ),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(5.0),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    Text("Welcome to the app, please log in"),
                    TextField(
                      decoration: InputDecoration(
                        labelText: "username"
                      )
                    ),
                    TextField(
                      obscureText: true,
                      decoration: InputDecoration(
                        labelText: "password"
                      )
                    ),
                    RaisedButton(
                      color: Colors.blue,
                      child: Text("Log in", style: TextStyle(color: Colors.white)),
                      onPressed: () {
                        Navigator.pushReplacementNamed(
                          context,
                          "/home"
                        );
                      }
                    )
                  ]
                ),
              ),
            )
          );
        }
      )
   );
}


class HomePage extends StatelessWidget {
  @override
  Widget build(context) =&gt; Scaffold(
    appBar: AppBar(title: Text("test")),
    drawer: MediaQuery.of(context).size.width &lt; 500 ? Drawer(
      child: Menu(),
    ) : null,
    body: SafeArea(
        child:Center(
          child: MediaQuery.of(context).size.width &lt; 500 ? Content() :
          Row(
            children: [
              Container(
                width: 200.0,
                child: Menu()
              ),
              Container(
                width: MediaQuery.of(context).size.width-200.0,
                child: Content()
              )
            ]
          )
        )
    )
  );
}

class Menu extends StatelessWidget {
  @override
  Widget build(context) =&gt; ListView(
    children: [
      FlatButton(
        onPressed: () {},
          child: ListTile(
          leading: Icon(Icons.looks_one),
          title: Text("First Link"),
        )
      ),
      FlatButton(
        onPressed: () {},
          child: ListTile(
          leading: Icon(Icons.looks_two),
          title: Text("Second Link"),
        )
      ),
      FlatButton(
        onPressed: () {Navigator.pushReplacementNamed(
          context, "/login");},
          child: ListTile(
          leading: Icon(Icons.exit_to_app),
          title: Text("Log Out"),
        )
      )
    ]
  );
}

class Content extends StatelessWidget {
  final List&lt;String&gt; elements = ["Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "A Million Billion Trillion", "A much, much longer text that will still fit"];
  @override
  Widget build(context) =&gt; GridView.builder(
    itemCount: elements.length,
    gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
      maxCrossAxisExtent: 130.0,
      crossAxisSpacing: 20.0,
      mainAxisSpacing: 20.0,
    ),
    itemBuilder: (context, i) =&gt; Card(
      child: Center(
        child: Padding(
          padding: EdgeInsets.all(8.0), child: Text(elements[i])
        )
      )
    )
  );
}</code></pre>
</div>

<h3 id="onward-with-your-flutter-adventure">Onward With Your Flutter Adventure</h3>

<p>That should give you an idea of what you can do with Flutter on bigger screens, specifically on the web. It’s a lovely framework, very easy to use, and its extreme cross-platform support only makes it more essential to learn and start using. So, go ahead and start trusting Flutter for web apps, too!</p>

<h4 id="further-resources">Further Resources</h4>

<ul>
<li>“<a href="https://github.com/flutter/flutter/wiki/Desktop-shells">Desktop shells</a>”, GitHub<br />
The current, always up-to-date state of Flutter on desktop</li>
<li>“<a href="https://flutter.dev/desktop">Desktop support for Flutter</a>”, Flutter<br />
Information about the fully supported desktop platforms</li>
<li>“<a href="https://flutter.dev/web">Web support for Flutter</a>”, Flutter<br />
Information about Flutter for the web</li>
<li>“<a href="https://flutter.github.io/samples/">All Samples</a>”, Flutter<br />
A curated list of Flutter samples and apps</li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ra, yk, il, al)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Paul Boag</author><title>How To Create A Compelling Landing Page</title><link>https://www.smashingmagazine.com/2020/04/landing-page-design/</link><pubDate>Tue, 21 Apr 2020 10:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/landing-page-design/</guid><description>If you want more leads or increased sales, you need compelling landing pages. According to Hubspot, those companies with over 30 landing pages, will generate seven times more leads than those with fewer than 10.
A landing page is a standalone webpage created to support a specific marketing campaign or targeting a particular search term. They are where users &#34;land&#34; when they click a link in search results, email or an ad.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/landing-page-design/" />
              <title>How To Create A Compelling Landing Page</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>How To Create A Compelling Landing Page</h1>
                  
                    
                    <address>Paul Boag</address>
                  
                  <time datetime="2020-04-21T10:00:00&#43;00:00" class="op-published">2020-04-21T10:00:00+00:00</time>
                  <time datetime="2020-04-21T10:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                <p>If you want more leads or increased sales, you need compelling landing pages. <a href="https://blog.hubspot.com/blog/tabid/6307/bid/15424/the-key-to-more-leads-create-more-targeted-conversion-opportunities-data.aspx">According to Hubspot</a>, those companies with over 30 landing pages, will generate seven times more leads than those with fewer than 10.</p>

<p>A landing page is a standalone webpage created to support a specific marketing campaign or targeting a particular search term. They are where users "land" when they click a link in search results, email or an ad.</p>

<p>Typically they encourage users to complete a specific call to action such as making a purchase, <a href="https://boagworld.com/audio/improve-newsletter-signup/">subscribing to a newsletter</a> or getting in touch.</p>

<p>So how do we create landing pages that encourage users to act, without resorting to manipulative techniques or <a href="https://www.darkpatterns.org/">dark patterns</a>? The answer lies in a combination of a clear focus, compelling copy, considered design and relentless testing.</p>

<p>It is tempting to leap straight into creating your landing page. However, before we begin, we must have a clear focus, and that starts with defining our value proposition.</p>

<div data-audience="non-subscriber" data-remove="true" class="feature-panel-container"><div><aside class="feature-panel"><div class="feature-panel-left-col"><div class="feature-panel-description"><p>How do we <strong>encourage clicks without shady tricks</strong>? Meet <strong><a href="https://encouragingclicks.com/">Click</a></strong>, our new practical handbook on how to increase conversion and drive sales without alienating people along the way. By Paul Boag. May 2020.</p></div><a href="https://encouragingclicks.com/" class="btn btn--green btn--large">Jump to the details&nbsp;↬</a></div><div class="feature-panel-right-col"><a href="https://encouragingclicks.com/" class="feature-panel-image-link"><div class="feature-panel-image"><img class="feature-panel-image-img" src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d395974c-79bf-47d6-9a08-498742240cbc/click-cover-opt.png" alt="Feature Panel"></div></a></div></aside></div></div>

<h3>Define Your Value Proposition</h3>

<p>When a user arrives on your landing page, you have less than <a href="https://informatix.com.au/blog/3-ways-to-captivate-your-audience/">eight seconds</a> to grab their attention. That means the first step in creating any compelling landing page is to understand what it is that the page will offer and how you can express that compellingly and concisely. That is typically known as a value proposition.</p>

<p>Start by writing a single sentence that communicates what it is you are offering to the user. This sentence should consist of two parts; what problem you are solving or benefit you provide, and how you achieve that.</p>

<p>For example, Skype’s value proposition is:</p>

<blockquote>“Skype makes it easy to stay in touch. Talk. Chat. Collaborate.”</blockquote>

<p>The first part outlines what benefit it provides, while the second explains how it delivers.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Skype’s value proposition outlines both the benefit they offer and how they deliver that. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea6e7256-2e28-40c4-b2e8-db7d24a7870d/1-safari-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>However, be careful. It is easy for your value proposition to become meaningless. For example, talking about "best-in-class" or "friendly and approachable" is the kind of thing any company could, and does, say. </p>

<p>To avoid becoming too generic, ask yourself whether the opposite of what you have written would still be a valid option. For example, if your value statement reads:</p>

<blockquote>“We offer high-quality products at an affordable price.”</blockquote>

<p>The opposite would be ridiculous:</p>

<blockquote>“We offer terrible quality products at an astronomic markup.”</blockquote>

<p>So effectively, your value statement is stating the obvious!</p>

<p>However, by contrast, if you wrote:</p>

<blockquote>“We offer handcrafted products for a discerning buyer.”</blockquote>

<p>The opposite would be equally valid:</p>

<blockquote>“We offer factory-produced products for the mass market.”</blockquote>

<p>Not that your value proposition isn’t just limited to this one sentence. Make a list of all the benefits you provide to customers and then any features of your offering that allow you to deliver those benefits.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Pipedrive does a good job at backing up its benefits with a list of features. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19a4c49d-3c5c-4de4-9f29-adfd27e266c0/2-safari-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>With that done, you can turn your attention to your calls to action.</p>

<h3>Identify Your Calls To Action</h3>

<p>Every landing page needs obvious calls to action. That means you need to ask yourself, what is it you want users to do?</p>

<p>To keep your landing page focused and improve your chance of users acting, resist the urge to add too many calls to action. Asking people to follow you on social media, for example, is just going to distract them from completing your primary call to action.</p>

<p>That said, it is often wise to have a secondary call to action. If you have done your job right, your landing page will have convinced many users to take action. Nevertheless, others will not be ready.</p>

<p>Instead of just giving up on these users, it is often worth offering them a secondary call to action, that requires less of a commitment.</p>

<p>For example, if your primary call to action is to get in touch or make a purchase, your secondary call to action could ask people to signup for a newsletter. </p>

<p>To avoid this secondary call to action distracting, ensure it is not too prominent. That might mean showing it lower on the page or even as an exit-intent overlay. That said, be careful. Some audiences react extremely negatively to popups. They should, therefore, be used sparingly.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png"
			sizes="100vw"
			alt="Exit-Intent Overlay Example"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Although popups can be annoying, there is a case for showing a secondary call to action on exit-intent. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf638027-09fc-43ac-b45f-ca3c61c663c5/3-safari-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Finally, consider ways of incentivising people to complete the call to action. Perhaps you could offer a free ebook if people subscribe to your mailing list or a discount if they buy via your landing page. Sometimes, something this small can be a nudge that encourages people to take action now rather than put it off to another day.</p>

<p>Of course, a gift is not going to make any difference if other elements put people off. To address that you need to understand what the issues are and find a way to deal with them. That is known as objection handling.</p>

<h3>Understand User Objections</h3>

<p>What are the reasons that might stop somebody acting on your landing page? Is there a delivery charge or might they be worried about privacy? Do you seem expensive compared to the competition?</p>

<p>If you cannot easily write a list of objections that users might have then you need to do some <a href="https://boagworld.com/usability/user-research/">user research</a> to find out.</p>

<p>Don’t worry that it will be time consuming or expensive. A one-question survey on your landing page is all you need. If people go to leave your site without acting, you can ask them a single question:</p>

<blockquote>“If you decided not to act today, it would be useful to know why.”</blockquote>

<p>You can then show them a list of possible options for them to choose between or they can add their own.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png"
			sizes="100vw"
			alt="Example One Question Survey"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      A simple one question survey can uncover why users are not taking action. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fae5d721-d727-4cfc-a0b0-9261c326eb22/masterclass-exit-intent-survey-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Once you understand the reasons why people are not acting, you can then start to address them.</p>

<p>Ideally, that means eradicating the obstacle, such as offering free delivery or money-back guarantee. But failing that, you need to reassure people the best you can in your landing page copy. It is always better to address an objection than it is to ignore it.</p>

<p>For example, McDonald’s knows that many people claim their chicken comes from the less favorable parts of a bird. Instead of ignoring these concerns, they address them directly on their site.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png"
			sizes="100vw"
			alt="McDonald&#39;s FAQs"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      McDonald’s are not afraid to address users concerns directly. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2026fb6b-7104-441f-9d7e-bce864cc4e6a/mcdonalds-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>There is, however, one more consideration to take into account when dealing with user’s concerns. You need to make sure you address them at the right time and in the right way.</p>

<p>An excellent example of this is privacy and security. People don’t worry about these things when reading a privacy policy. They worry about it as they are about to submit their email address. That is why it is so important to address data protection and privacy while users are completing a form. Users are not going to search your site for the answers; they will simply assume the worst.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png"
			sizes="100vw"
			alt="Newsletter sign up form with with privacy statement"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Closely associating reassurances regarding privacy with a newsletter sign up form often increases conversion. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a719d02-04e5-4d35-819c-aeff113ff147/protectyourdata-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>With our offering laid out and objections addressed, we have done the hard work of appealing to people’s logical minds. Now it is time to give them that positive feeling.</p>

<h3>Shape Your Personality</h3>

<p>Much of our decision to act happens on a subconscious level. In fact, according to <a href="http://news.bbc.co.uk/1/hi/technology/4616700.stm">research published in the journal Behaviour and Information Technology</a>, people form an initial impression about a site in 50 milliseconds. They go on to say that due to the <a href="https://en.wikipedia.org/wiki/Halo_effect">halo effect</a> these initial impressions last.</p>

<p>In other words, the branding and aesthetics of a site shape our impressions of the actual offering, despite there being no causal relationship between the two.</p>

<p>So what does all of this mean in practical terms? For a start, it goes to show how much aesthetics matter. However, more importantly, it means we need a clear picture of what first impressions we wish to convey and then be confident that our design does precisely that.</p>

<h4>Decide On What You Want To Convey</h4>

<p>A good starting point is to create a shortlist of words that convey the impressions you want users to have upon seeing your site.</p>

<p>There will be some words that will be universal. For example, you will probably want your landing page to convey "trustworthiness". However, many of the terms will depend on your audience and offering.</p>

<p>Once you have your list of words and the designer has produced a design that they hope convey those words, the next step is to test.</p>

<h4>Testing Your Design Aesthetics </h4>

<p>If the designer has produced multiple approaches, then a simple preference test works well. For example, you can ask the user which of your designs do they consider to be more "approachable".</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg"
			sizes="100vw"
			alt="Example Preference Test"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      A simple preference test is often the best way to find the best design aesthetic. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2e75713-14ac-4273-98e4-b1eeab91c925/design-testing-04-landing-page-design.jpg'>Large preview</a>)
    </figcaption>
  
</figure>

<p>When there is only one design, you can run a <a href="https://www.surveygizmo.com/resources/blog/how-to-measure-attitudes-with-semantic-differential-questions/">semantic differential survey</a>, in which you ask users to rate a website against your keywords. For example, is a design more "approachable" or "unapproachable"?</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg"
			sizes="100vw"
			alt="Example Semantic Differential Survey"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      A survey can be used to ascertain whether a design is creating the right feeling in users. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd03339-43d8-4e13-a155-6a35a091c70b/design-testing-03-landing-page-design.jpg'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Of course, aesthetics is not the only consideration when it comes to design. You also need to make sure your visual hierarchy is right too.</p>

<h3>Create Your Visual Hierarchy</h3>

<p>Establishing a strong visual hierarchy for your landing page will ensure that users see the right information at the right time and won’t be distracted by irrelevant or secondary content.</p>

<h4>Answer The Right Questions At The Right Time</h4>

<p>The first step is to ensure you are presenting the right information to the user are the right point on the page. To do that you need to understand the thought process that goes through people’s minds as they view your landing page.</p>

<p>Of course, we cannot be sure of that, as everybody is different. Even usability testing can only give us an indication. However, we can make an educated generalization.</p>

<p>Typically, a user subconsciously asks a series of questions when viewing a landing page. These are, in order:</p>

<ul>
    <li>What is this page offering? (Value Proposition)</li>
    <li>How will that help me? (Benefits)</li>
    <li>How does the offering work? (Features)</li>
    <li>Why should I trust this page? (Social Proof)</li>
    <li>What should I do next? (Call to Action)</li>
</ul>

<p>It is, therefore, essential that any visual hierarchy for a page reflects the order a user asks these questions, at least to some degree.</p>

<p>For example, a typical landing page hierarchy might look something like this:</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg"
			sizes="100vw"
			alt="Wireframe of landing page structure"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      A landing page should combine your value proposition, benefits, features and social proof. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066192c4-8616-48d7-9f98-f9b95a96aad1/landing-page-wireframe-landing-page-design.svg'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Getting the flow of your content on the page right is only half of the battle when it comes to creating a strong visual hierarchy. The second challenge is ensuring that users see the most critical screen elements.</p>

<p>We can draw attention to essential screen elements in a variety of ways, including, but not limited to:</p>

<ul>
    <li>Positioning</li>
    <li>Colour</li>
    <li>Size</li>
    <li>Imagery</li>
    <li>Animation</li>
    <li>Negative space</li>
</ul>

<p>However, probably the most effective technique is to minimize other distractions on a page. </p>

<h4>Simplify Your Interface</h4>

<p>To achieve this, consider adopting a three-step approach, where you systematically review every element on your landing page from the logo to the privacy policy link.</p>

<p>For each element, you will ask three questions in turn.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg"
			sizes="100vw"
			alt="Illustration showing the three steps of simplification"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Have a robust process for simplifying your landing page. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5e0ed7c-e1ff-432d-a1af-9f93624543cf/simple-websites-01-landing-page-design.jpg'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Start by asking <strong>could I remove this element?</strong> If I removed it, what would the consequences be? Would those consequences be more damaging than the increase in <a href="https://en.wikipedia.org/wiki/Cognitive_load">cognitive load</a> that additional screen elements create? If not, you are better removing it.</p>

<p>If you feel that the content is too valuable to the user or aids in conversion, the next question you need to ask is <strong>could I hide this element?</strong> Could I put it on a sub-page, under a tab or in <a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">an accordion</a>?</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png"
			sizes="100vw"
			alt="Vibecast Homepage"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Vibecast hide secondary content under an accordion. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2dc10200-d7ec-4eca-90d8-7bcb609f5df5/4-safari-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>This approach works well for secondary content, that although useful to some users who want more detail, is not something the majority of people will be interested in.</p>

<p>Finally, if you cannot hide content, because all users must know it, ask <strong>can I shrink this element?</strong> For example, people may well want to know about your return policy, but that isn’t as important as the features or benefits your product offers. It, therefore, makes sense to visually deemphasis it, so it is less prominent.</p>

<p>That simple approach together with other design techniques should enable you to create a page with a strong visual hierarchy that draws the user’s attention to the most crucial screen elements, such as calls to action. However, to be sure you should test.</p>

<h4>Test Your Visual Hierarchy</h4>

<p>Fortunately, there is a quick and inexpensive way of testing whether users see the essential screen elements. It is called <a href="https://usabilityhub.com/guides/five-second-testing">a five-second test</a>.</p>

<p>As the name implies, this test involves showing the users your design for five-seconds before taking it away. You then ask the user to recall what elements they remember.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png"
			sizes="100vw"
			alt="Usability Hub Website"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Usability Hub makes running five-second tests easy. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa5659e-fdcc-4a49-8c90-8295ca71f88c/5-safari-landing-page-design.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>By paying attention to what the user remembers and the order in which they recall elements, you will gain a better understanding of how effective your page hierarchy is in drawing attention to items that matter the most.</p>

<p>Indeed, when it comes to designing a great landing page, testing will be crucial, even once you launch.</p>

<h3>Monitor, Iterate And Test</h3>

<p>No team will create the optimal landing page on their first attempt. There is always room for improvement, which is why post-launch testing is such an essential part of shaping the most effective landing page possible.</p>

<p>Once you launch your new landing page, you must monitor it carefully using a session recorder like <a href="https://www.hotjar.com/">Hotjar</a> or <a href="https://www.fullstory.com/">Fullstory</a>. These tools allow you to watch user behaviour on your page, that should suggest ideas for improvements.</p>

<p>You can test smaller improvements to copy, imagery and color using <a href="https://www.smashingmagazine.com/2014/07/roadmap-to-becoming-an-a-b-testing-expert/">A/B testing</a>, while more significant changes can be prototyped and tested through usability testing.</p>

<p>Whatever approach you adopt, ultimately it will be a cycle of monitoring, iterating and testing that will ensure the long-term success of any landing page.</p>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ra, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Drew McLellan</author><title>Smashing Podcast Episode 14 With Rachel Andrew: How Can I Run Online Workshops?</title><link>https://www.smashingmagazine.com/2020/04/smashing-podcast-episode-14/</link><pubDate>Tue, 21 Apr 2020 05:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/smashing-podcast-episode-14/</guid><description>In this episode of the Smashing Podcast, we’re talking about running online workshops. How can a traditional event adapt when participants can’t attend in person? Drew McLellan talks to Rachel Andrew to find out.
Show Notes This episode of the Smashing Podcast is dedicated to the memory of Christopher Schmitt, who sadly passed away last week. A familiar name to many of us over the years as an active contributor to both the Web Standards and Accessibility communities, Christopher, along with his partner Ari, was also a pioneer in conducting online workshops and conferences, which is the subject of this podcast.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/smashing-podcast-episode-14/" />
              <title>Smashing Podcast Episode 14 With Rachel Andrew: How Can I Run Online Workshops?</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Smashing Podcast Episode 14 With Rachel Andrew: How Can I Run Online Workshops?</h1>
                  
                    
                    <address>Drew McLellan</address>
                  
                  <time datetime="2020-04-21T05:00:00&#43;00:00" class="op-published">2020-04-21T05:00:00+00:00</time>
                  <time datetime="2020-04-21T05:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p><a href="https://twitter.com/rachelandrew"><img style="float: right; padding: 1em;border-radius: 110px;max-width: 50%;height:auto" src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/82c26edc-5500-42a6-87a9-62e84b998433/rachel-andrew-tw-profile.jpg" width="200" height="200" alt="Photo of Rachel Andrew" /></a>In this episode of the Smashing Podcast, we’re talking about running online workshops. How can a traditional event adapt when participants can’t attend in person? Drew McLellan talks to Rachel Andrew to find out.</p>

<iframe src="https://share.transistor.fm/e/3dda4440/dark" width="100%" height="180" frameborder="0" scrolling="no" seamless="true" style="width:100%; height:180px;"></iframe>

<h3 id="show-notes">Show Notes</h3>

<p>This episode of the Smashing Podcast is dedicated to the memory of Christopher Schmitt, who sadly passed away last week. A familiar name to many of us over the years as an active contributor to both the Web Standards and Accessibility communities, Christopher, along with his partner Ari, was also a pioneer in conducting online workshops and conferences, which is the subject of this podcast.</p>

<p>Christopher was a skilled web practitioner, a generous educator, and a wonderful person to spend time with. His contributions to our industry were numerous and valued, and he will be missed by us all.</p>

<p>If you have memories of Christopher you’d like to share publicly, you can do so <a href="https://thankyouchristoperschmitt.netlify.app">via this community site</a>.</p>

<ul>
<li><a href="https://smashingconf.com/online-workshops">Smashing Conf Online Workshops</a></li>
<li>Rachel Andrew on <a href="https://twitter.com/rachelandrew">Twitter</a> and her <a href="https://rachelandrew.co.uk">website</a></li>
</ul>

<h4 id="weekly-update">Weekly Update</h4>

<ul>
<li><a href="https://www.smashingmagazine.com/2020/04/structured-data-design-process/">Baking Structured Data Into The Design Process</a></li>
<li><a href="https://www.smashingmagazine.com/2020/04/inspired-design-decisions-herb-lubalin/">Inspired Design Decisions With Herb Lubalin: Typography Can Be As Exciting As Illustration And Photography</a></li>
<li><a href="https://www.smashingmagazine.com/2020/04/particle-trail-animation-javascript/">How To Create A Particle Trail Animation In JavaScript</a></li>
<li><a href="https://www.smashingmagazine.com/2020/04/react-hooks-best-practices/">Best Practices With React Hooks</a></li>
<li><a href="https://www.smashingmagazine.com/2020/04/django-highlights-models-admin-relational-database/">Django Highlights: Models, Admin, And Harnessing The Relational Database (Part 3)</a></li>
</ul>

<h3 id="transcript">Transcript</h3>

<p><span class="smashing-tv-host">Drew McLellan:</span> She is editor-in-chief of Smashing Magazine as well as being a web developer, writer and public speaker. She’s the founder of web development consultancy, edgeofmyseat.com, responsible for products such as Perch CMS and the slide sharing and public speaking portfolio platform, Notist. She’s a member of the CSS Working Group, and many will know her for her prolific writing and teaching on modern CSS layout techniques, such as CSS grid.</p>

<p><span class="smashing-tv-host">Drew:</span> So we know she’s an expert in CSS and in teaching, but did you know she’s a recognized authority on carving turnip lanterns? My Smashing friends, please welcome Rachel Andrew. Hi Rachel, how are you?</p>

<p><span class="smashing-tv-speaker">Rachel Andrew:</span> I’m smashing.</p>

<p><span class="smashing-tv-host">Drew:</span> So I could talk to you all day about any number of interesting CSS topics, but you write and you speak so much about these sort of subjects, that there’s a plentiful supply of resources that people can reference. And not least of which being things like your Grid By Example site or you CSS Layout Workshop video course. And of course, there’s plenty right here on Smashing Magazine. But what I wanted to talk to you today was something that was almost a byproduct of your expertise, isn’t it? That you have to end up getting up on stage and communicating what you know with other people. You do an awful lot of speaking at conferences and teaching in person workshops, don’t you?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yes. Yeah, I do. I have to done for about, I don’t know, the last six or seven years. And the last few years I’ve spent about half of the year on the road speaking and yeah, doing workshops. In particular for Smashing Magazine, did a bunch of workshops every year For Smashing. So that’s the something I’ve been doing quite a lot of.</p>

<p><span class="smashing-tv-host">Drew:</span> So what does the shape of your year usually look like with conferences and workshops?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Ah pretty much, I’m springing out in particularly. I’m generally just on the road quite often for three or four weeks at a time, go for one thing to the other. I try and link these things up, so I’m not sort of constantly flying back and forth over the Atlantic corridor for you. But yeah, so spending a lot of time either on stage talking to people about CSS or in workshops, and then going to see this working group meetings and sitting with a bunch of other people who really, really likes CSS and talking about CSS. So that’s mainly what I’ve been doing, and in between that actually trying to&hellip; Well, spending a lot of time writing these talks and workshops while I’m not giving them. And then then getting back on the road again. So that’s been life for, yeah, several years</p>

<p><span class="smashing-tv-host">Drew:</span> As we speak, we’re in the thick of the Coronavirus pandemic. So this year isn’t really shaping up like a typical year for you or for any of us. So what’s the situation with your conference season looking like at the moment?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah, empty. It’s really bizarre looking at my calendar and not having it full of flights and hotel bookings. I’ve spent quite a lot of time in the last few weeks getting flights refunded and getting vouchers to use because I had all of my spring travel booked. I’ve been organized. So it’s been really strange then remove all those things from the calendar and be looking at not going anywhere. It’s very, very unusual for me. So yeah, it’s been quite a shock because it’s not happened for so long. And every year after, I’m not going to do so much travel this year. And of course, the diary fills up and off you go. So for this to happen and to happen so dramatically, and in a way that I don’t actually know when it’s going to start again. I’m looking at things in, say two months time, and thinking, well, will I be able to do those?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I don’t personally have any health issues that&hellip; if it is okay to travel, I probably feel okay to travel. But I don’t know if it’s going to be okay to travel. I don’t know if it’s going to be sensible to travel because you might go somewhere and then them cause a lockdown and you get stuck there or get stuck in quarantine. So it’s very, very strange to not have this quite rigid plan, which is what I’ve had for the last few years where everything has been planned around me getting on a plane and going to speak somewhere.</p>

<p><span class="smashing-tv-host">Drew:</span> So lots of conferences, probably in conferences and workshops, have been either canceled or postponed. I’m including the rescheduling of our own Smashingconf events and the workshops that go alongside that. Now hopefully, we can look forward to rescheduled Smashingconfs later in the year, but the workshops are also going online, is that right?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> That’s right, yeah. We’ve very, very quickly&hellip; Once we realized we were going to have to postpone San Francisco, we have&hellip; See we have workshops, both myself and Vitaly run workshops at Smashingconf, and they were sold out in San Francisco, both of our workshops. And obviously, we have lots of other people who come and run workshops for us, people who we’ve worked with for a long time. And they were finding that all their workshops&hellip; And for those of us who do workshops they’re actually a key part of our income. Public speaking, you don’t earn a lot of money typically going and public speaking. Most people aren’t paid a lot, not when you consider the amount of time it takes to write talks and so on. Workshops tend to be quite a nice way for people who are good at teaching this stuff to earn some money.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> And so they represent people’s income. And so, not only did myself and Vitaly had lost our workshops early this year. We also realized that a lot of our Smashing speakers also, were reliance on those workshops. And so we thought, well, why not just take them online? And very, very quickly, really, within days of that happening, we decided that me and Vitaly would be the first to stick our heads over the parapet, given it’s us. And we could figure out how to do it. And we also have very different workshops. Vitaly is much more collaborative. He has group activities and things. I teach classroom style. So between us we thought, well we kind of covering all the bases. So that was really&hellip; We thought, let’s just do it, let’s see if it works. So we advertise them, we figured out how long did each take. And then we sat down and said, well what does an online workshop really look like? What is this?</p>

<p><span class="smashing-tv-host">Drew:</span> I think from a technical perspective, as web developers, we immediately think, how on earth are we going to deliver something like that? There must be lots of different platforms that you looked at. What were the different things you looked at and what Smashing eventually come with?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> So we’ve had a look at all sorts of things, and we’re still kind of in the process of doing that. We’re using Zoom at the moment, and the reason we’re using Zoom is accessibility. It was the most accessible of the platforms. Obviously, we don’t want to cut people out because of the platform we’ve chosen. And I think the platforms are getting better and people are&hellip; I think that a lot of platforms have had people come to them and say, yeah, you look great, but you know, we need you to be accessible. And so, so Zoom is the easiest for people to use at the moment. And so, that’s why we’ve ended up using them.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I don’t know whether we will do forever, but that’s what we’re using at the moment, and it’s worked pretty well as a way to do this stuff. And it gives us the flexibility we need. We’re able to do breakout sessions for Vitaly’s workshop and things. And yeah, so platform-wise, it seems to work. We didn’t really have any major issues across the days. And say we’ve run my workshop and Vitaly’s workshop now&hellip; Are the two that we’ve actually done, and then we didn’t really have any technical problems as it were. So that was really helpful. Yeah, because it’s always a bit of a worry thinking everyone’s silent in all these different locations, and this has got the work.</p>

<p><span class="smashing-tv-host">Drew:</span> As you say, you’ve run two workshops so far, and there’s an awful lot more scheduled to come up in the future.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah, we’ve got a whole bunch of them. So the upcoming stuff, I’m just having a look at the list, we’ve got Brad Frost doing his Design Systems. We’ve got Psychology for UX with Joe Leech, Advanced CSS and Sass with Miriam Suzanne. Vitaly’s doing his Smart Interface Design Patterns again. I’m doing my CSS Layouts Masterclass again in June, and we’ve got a Front-End Accessibility Masterclass with Marty Sutton. So those are the ones lined up until June now.</p>

<p><span class="smashing-tv-host">Drew:</span> That’s quite a big undertaking, isn’t it? All those different instructors as they were, with different styles of teaching and different requirements from the platform.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah, I think so. That’s why we started with Vitaly and I because we have this different way of teaching We thought that would be a good start. We could iron out some of the things, and then we’re going to then write up the stuff that we figured out. To hand that over to other instructors. Because we were very keen that they didn’t just become&hellip; we didn’t want it to be a second-rate experience. It wasn’t like, Oh well, you can’t come and see us in San Francisco, and so this’ll do. We actually wanted to see, how can we make an online workshop a really cool thing. Because actually, there’s a whole bunch of people who, even if we could all travel around the world&hellip; there’s a whole bunch of people who can&rsquo;t.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> There’s plenty of people who, they don’t have the budget to fly places, or they’ve got family, or they just don’t like doing that sort of travel, or they’re concerned about spending a lot of time on airplanes. And I think actually, this is something that, that can work very well as a thing, and we’ve been forced into it to some degree. And we’ve had to figure out how to do it, but it’s certainly not a lesser thing. It’s a different thing and we’re figuring out how to make that happen. But it doesn’t have to be a second best from an in person.</p>

<p><span class="smashing-tv-host">Drew:</span> So what does the experience of attending an online workshop feel like for a participant, where obviously it’s can be very different from the in-person experience?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I think we looked at what people really say they get from coming to an in-person workshop. And a lot of that isn’t really just the teaching because all of that stuff, you can get lots of ways. You can read things on Smashing Magazine, you can watch video tutorials. Here there’s lots of ways to get this information. Both Vitaly and I are incredibly prolific in all this output that we do in sharing. But actually, what people tend to put on their feedback forms and stuff, from in-person workshops is, they got their questions answered. They were able to spend time talking to the person leading the workshop or with each other as well, with the other attendees, and have questions answered. That kind of interactivity was important. And so that was the thing we wanted to bring.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> And so, during the workshop there’s a few ways we’re doing that. There is a chat in Zoom itself, so people can chat while the workshop’s going on. So they do that and they introduce each other over and talk about where they are and what time it is because we’ve got people from all over the world. So that’s going on. Both of us had Google Docs open, which anyone could edit. And we tend to do that actually at Smashingconf, anyway, have these collaborative docs that people&hellip; people do amazing things. They completely live blog the entire event and put all the resources and so on. So we had those, and it was really interesting to see the attendees, which they would put the questions in there.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> And they would so much help each other out. Someone would write a question that I hadn’t got to, and someone else would have answered it, and people were clarifying things, and putting links to code pins in. And so, that was really interesting, that there was this collaboration going on while I was teaching. This sort of with other people. And I inadvertently had the same experience, people were helping each other out in terms of making comments and so on. So I think that that was the thing that it did feel like an interaction. It didn’t feel&hellip; so I’ve done a lot of presenting online where you just feel like you shout at your computer for an hour and then go away, and you’ve got no idea if anyone enjoyed it. It’s like, all right, there we go. I’ll go and I’ll drink now. But this actually felt like I was with people as an instructor, and the feedback&hellip; people were saying, it felt very intimate and that they were talking to me rather than just having something presented at them. Yeah, so that was interesting.</p>

<p><span class="smashing-tv-host">Drew:</span> I guess as you say, the danger of running a workshop online is that it just becomes impersonal and the experience becomes more of a passive one for attendees. Is there anything that you can do in the way that you structure the content that you’re actually teaching?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yes.</p>

<p><span class="smashing-tv-host">Drew:</span> Or the way that you conduct it to encourage people to interact and to participate with the tools that have been provided?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah, and I think Vitaly does a lot more of that because he has more&hellip; some of our other instructors are going to have more group activities. I teach in person, very much classroom style. My courses are pretty much a brain dump of here’s the stuff I know about CSS, here it is with lots of examples. And I have people coding with me all day, when we do them, but I’m not so much a group activities thing. It’s hard to do a group activity on Here’s the Basics of Grid Layout. So I’ve just found that teaching classroom style works quite well. Whereas I know that Vitaly actually had people breaking off into groups and doing activities, and actually meeting up with some of these people from all over the world who are participating. And so, that’s really quite fun because I think people do get a lot from that, from just the meeting of the people who do their job. Particularly, if you were mostly on your own, to actually get chance to do an activity with other people is quite a nice thing too.</p>

<p><span class="smashing-tv-host">Drew:</span> Is there anything special that’s been done to give the online events something of the feel of the brand, in the same way that you would in an in-person event? I know attending a Smashing event, it always feels like a Smashing event. There’s something of the brand that’s communicated in the way that everything’s done. Is there anything that can be done online to help communicate that same feel?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I think it’s difficult, but I think part of it is the attitude that generally smashing has. We’re very friendly and try and be as approachable and sort of informal as it were. So people feel like they’re coming to something which is going to be fun and entertaining. Things like Vitaly was online before my workshop playing a load of music and so on, just because that’s the sort of thing we do at Smashing. We like to entertain people and have some fun. So I think, yeah&hellip; I think trying to bring some of that fun that we do have at the live events as much as you can with a virtual thing. I think that’s what we’re trying to do. We’re trying to make it feel like a Smashing thing as much as we can.</p>

<p><span class="smashing-tv-host">Drew:</span> Of course, you mentioned that there are many people who can’t or aren’t willing to travel to in-person events anyway. There must be a lot of advantages, even for those who would normally attend an in-person event. There’s got to be advantages to actually attending a workshop from the comfort of your own desk with your own set up around you.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I think definitely. I think that is something a few people mentioned, that it was just nice to be&hellip; have the whole set up. Because if you’re a developer working at home, you’ve probably got two screens, and you’ve got your comfortable keyboard and your chair. And certainly for my software workshop where people are coding the whole time, to actually be able to have the presentation on one screen and have your code in front of you. And not be working on a tiny laptop, squashed in with a load of other people, and on an uncomfortable chair for the day. There’s a lot of benefits to that. So I think there are some quite nice things. You obviously, don’t get all the sides. If you don’t get to go off with your new friends and have a drink and have a chat about it all. And there’s things that you do lose by doing this virtually, but there is an awful lot to be said for it as an experience.</p>

<p><span class="smashing-tv-host">Drew:</span> One thing that I’ve seen done quite a lot in the past with online events, is to try and create a bit of a sense of community by having local hubs, even though it’s a distributed global event. Obviously, that’s not something that we can even do at the moment because everybody’s confined to their own home, more or less. Is there anything else that can be done to create that sense of community, do you think? Is there anything that’s Smashing has thought about to try?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah. I think it’d be interesting to see where this plays out and whether this becomes a temporary thing, or whether that’s something that we can just carry on doing. I think that&hellip; and it would be interesting to see how we can link people up. We also have the Slack channels, so people chat in there. And I think really it’s just trying to&hellip; and we know a lot of friendships are made and also work relationships are made, people get new jobs and so on, from coming along to things like a Smashingconf. It’d be nice to try and encourage that sort of&hellip; that it’s not just where we do this and then go away afterwards, but that we can carry on the conversations and so on. That people are making and there’s something very nice to be said as well about&hellip; we have people from all over the world in my workshop. And that’s pretty cool that all those people were able to get together and spend some time learning.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> So yeah, I think that there’s all sorts of possibilities for this. We obviously, kicked it all off in a bit of a rush like, let’s just do it and see what happens. But I say, Vitaly and myself, we sold out. There was a lot of interest, and the other tickets are selling really well. So there’s obviously a need for this, and whether it is just now or whether it’s going to be something that we carry on doing, see what people think.</p>

<p><span class="smashing-tv-host">Drew:</span> Being delivered digitally, there’s the fact that a workshop can actually be recorded and then replayed by participants later to go back over everything they’ve missed. Is that something that Smashing is taking advantage of?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yep. Everyone gets copy of the recording, and also we’ve been asked to add to that. At the moment, we haven’t got live captions going during the workshops. That’s something we’re hoping to fix. We’re hoping to actually be able to get the captions in real time. At the moment we’re not doing that, but we are getting them transcribed after the event. So when they get the video, they also have a transcript of the stuff, which is great. It might help, particularly if people are struggling with accents, so what have you. So that’s quite good. And then say, we’d like to look at getting them captioned as well, actually as they go out, with a live captioner, which would then be something that we don’t do in person. Not saying that we can easily do, and with workshops that we’re running live, but actually we can do online. So that would be, I think, a really helpful thing, and hopefully it would open it up to more people.</p>

<p><span class="smashing-tv-host">Drew:</span> You mentioned as a presenter, things are quite different in the way that you actually present and you teach, where you’re just basically shouting it at a computer, hoping that there’s somebody there. I guess it’s quite different because you’re having to take care of all your own technology, your own setup, everything to make sure that you’re in a position ready to present online. How does that differ to how things would go normally if you were going to an event?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> In some ways it’s easier because I’m quite used to doing stuff online. I think it might be harder if you’re not well set up for recording stuff, I do quite a lot of video and things. So I’m reasonably well set up. But also, we’ve got our crew, we’ve got people online. I think that’s actually really important, is that if you’re presenting, the last thing you want to have to do is deal with someone who can’t get into Zoom or can’t hear the sound or can&rsquo;t&hellip; just having some problem. So we have other members of the team, just like we do in person, have members of the team to help out if someone’s having trouble getting on the wifi or whatever it is. With the online workshops, we have people online to keep an eye on the chat and make sure that people aren’t struggling. And also to alert the presenter, if suddenly they drop offline or something&hellip; their sound’s gone weird or whatever it is.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> We’ve actually had no real technical issues like that, but there’s always that thought when you’re presenting online like, can people hear me? Am I just like talking to my screen and nothing’s happening out there? So having the team online with&hellip; or their contact details to be able to get hold of me, if suddenly I dropped off that. It makes you feel a lot more safe and that it’s okay.</p>

<p><span class="smashing-tv-host">Drew:</span> Is there anything that you’ve changed about your setup in your home office to make online presenting easier? What does your set up look like there?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah, it’s getting ridiculous to be honest. It is just an excuse to buy things. So for the workshops, I’m coding, so I’m sitting down. When I’m doing more like presentations, I realized that it is just weird to present sitting down. And I don’t feel like I can actually do it very well. So I’ve got a standing desk, and so everything I have in&hellip; I’ve got some lighting and bits and pieces, but because I have things bolted to my desk. If I wanted to present standing up, I can just make the desk go up and everything goes with it and then I can present from my feet. And I did an online presentation for the BBC recently that was meant to be an offline in-person thing and got changed. And it felt so much better, being able to move around.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> And so, I’ve got my camera set up, so I can move about a bit, and I don’t feel like I’m just tied to the spot. And so, that sort of thing, I think, is really useful, being able to feel natural when you’re presenting and not just that you’re slumped in your chair and talking to a camera. And decent lighting I think is really important. I seem to spend an awful lot of time in Zoom calls now. And just people being well-lit is incredibly helpful. And I think, when you presenting or doing a workshop, people want to be able to see your face and your expressions and things, and having some decent lighting will help with that.</p>

<p><span class="smashing-tv-host">Drew:</span> I’ve seen photos from, I think it was Val Head who posted her setup where she had a great big screen, and I think a couple of different computers and maybe an iPad or something as well. What does your technology set up look like there?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> So I’ve got two too, I’ve got my laptop and then my screen and because&hellip; so there’s the chat and things going on, which I don’t tend to take Q&amp;A during, while I’m talking. I tend to deal with it at the end. But I can see the chat, and so I can see if&hellip; Sometimes I’ll pick up that someone’s got a very specific issue that I can just deal with at the time, and I might do that. So I’ve got that going on just in the peripheral vision. Because I’m coding, I’ve got the main stuff I’m doing and the screen it’s being output to the attendees is my main screen.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I turn all my notes in when I do in person workshops as well. I turn all my notes into an e-pub, so I can have that on my iPad, which is handy because I can jump back and forth with the indexing and so on. So I have all the notes and the stuff to help me remember what I want to do next. But pretty much, and mossy of it’s run as I do in-person workshops. I work with a bunch of examples, basically that we work through, and I explained different things. And then, the attendees can take those examples away to help them remember what they did. So I pretty much do the same thing online. I think what I do probably moves online the easiest because teaching classroom style is quite an easy thing to move online. So you see, I’ve not changed too much. It’s just really making&hellip; getting comfortable with the setup so I don’t have to worry about that while I’m working.</p>

<p><span class="smashing-tv-host">Drew:</span> Are there any bits of technology that you have in place that you think a really useful and really recommended for anyone who’s looking to do something similar?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I think the lighting and decent mics and decent headsets and mics, so you’re not leaking sound over your ears. That sort of stuff is, I think, important. I like the headset mic rather than a mic on a stand because I’m writing code. I find that if I have a mic on a stand, I move away from it, back and forth all the time because I’m doing things. So having the headset mic means I haven’t got to get around a microphone that’s in front of my face. So that’s what I tend to use and that works quite well for me. So that was my main thing. I think, yeah, having a decent&hellip; You don’t have to spend a fortune, but having a good mic and headphones and some lighting, I think makes all the difference.</p>

<p><span class="smashing-tv-host">Drew:</span> They often say, don’t they, that audio quality is more important than video quality when it comes to these things.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah. It’s just painful to listen to if you’ve got bad crackly audio.</p>

<p><span class="smashing-tv-host">Drew:</span> So what have you learned so far in this journey? You say that you and Vitaly were the Guinea pigs for the approach. Is there anything key that you weren’t expecting that you’ve learned along the way?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I think I’m surprised how intimate it felt and how connected it felt with the people who were attending. I hadn’t expected that at all. I’d expected it to be quite impersonal, and that we’d try very hard to make it feel personal but it would still be that kind of, Oh I’m presenting online now, I’m going away. I think having a good set amount of time for questions&hellip; I had half an hour for questions at the end of both of my days, and we used them. And I then went back to the Google doc and answered some stuff in there afterwards. So I think that really helped because people were able to ask their specific questions. I think the approach was splitting them up into multiple days. When we do these things in person, they are full day workshops. And we just figured that a full day for people to sit with a very long time to concentrate.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> And also it meant that we could put them into a time zone that worked for more people. Because if you’re not going to find a full day, if you’re saying well actually, it’s two or three hours, then more people in different time zones can attend that. So this workshop was my evening. So then it was like 9:00 AM on the West coast of the States, which meant the people on the East coast, the States and also people in the UK and stuff could attend. The next one I’m doing is going to be UK morning, which means that people in Asia and so on and in Australia, it’s not too far out of their day to be able to attend. So that kind of thing works quite well, spacing them up over multiple days. And I think it is easier for people because it’s a long time, a full day listening to someone on a screen. I think you’re probably going to start to zone out no matter how interesting they are.</p>

<p><span class="smashing-tv-host">Drew:</span> And people have other responsibilities in their jobs, don’t they? The number of times that you see people at a in-person conference and they have to leave at the lunch break because they’re needed in the office, because there’s things that have to be done. Life doesn’t stop just because you’ve got a day’s worth of training planned.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Yeah, and I think here, and in the current situation as well. A lot of people are working from home and are having to do childcare or home educate their kids. So particularly in the current environment, I think asking both presenters and attendees to be able to block out two and a half, three hours is probably a lot easier for people than be able to block out a full day. Because if you’ve got young children at home, even if you’ve got a partner there, you’re basically saying, you’ve got to be all locked out of this room for nine hours today. That’s a lot. So I think actually, having those shorter sessions is, for a lot of reasons, is probably a good thing.</p>

<p><span class="smashing-tv-host">Drew:</span> If other event organizers are thinking about doing the same with their events, they’re looking at their schedule ahead, seeing all their in person events being canceled, and thinking they’d really need to do something to keep everything ticking over. What should they be taking into consideration before embarking on moving their events online?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I think to realize that it’s doable and that people are interested and will pay for this sort of thing. I think getting the tech in place and testing it is important. Having a team to back people up is really important, even if they don’t need to do very much, they’re just sitting there watching the output. It makes you feel a lot more confident as a presenter, knowing that that’s happening. So that I would say is, is important. And really just thinking about the ways in which you can make this seem not like a second class way of learning. It’s a different way of learning, but it doesn’t need to be a lesser way. And rather than being apologetic and saying, Oh, we’re really sorry we can’t do an event, but we’re going to do this. Say, No, hey, this is going to be a really great way for us all to get together and learn something and spend some time with other people, not just in our own four walls.</p>

<p><span class="smashing-tv-speaker">Rachel:</span> And it’s just a different thing. And I think this is quite an exciting thing that we’re learning how to do. And it’s made us all at Smashing feel so much happier because it could have been quite depressing, losing the conferences. It’s when we were all&hellip; we were a little team and we love spending time together as well. We were all so excited to be going to San Francisco and seeing each other and doing the conference. But instead of feeling like we’ve lost that, we actually feel like we’re doing a really great thing and sharing knowledge with our Smashing community. And it’s been really nice. I think it feels like we’re moving forward.</p>

<p><span class="smashing-tv-host">Drew:</span> So the Smashing online workshops are running throughout April, May, and June. And you mentioned some of the great speakers who are lined up for those. And listeners can find out about those and the rescheduled Smashingconfs that are coming to a city near you. Again, smashingmagazine.com/events. So I’ve been learning about online workshops. What have you been learning about lately?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> I’ve actually been learning the mandolin. I keep meaning to learn the mandolin, and it’s been like, well I’m stuck in the house, so might as well. So I’ve been doing that. That’s been good. I’m terrible. Absolute terrible. But it’s something nice to be doing. I’ve always been learning about gardening because I had a mud pit outside and I thought I might try and turn it into some sort of garden. So that’s what I’ve been doing to get away from the computer a little bit, so I’m not just sat here staring at this all day.</p>

<p><span class="smashing-tv-host">Drew:</span> If you, the listener, would like to hear more from Rachel, you can follow her on Twitter, where she’s at Rachel Andrew. And find all of her writing, speaking, online training, and excellent CSS layout news email newsletter linked from my site at RachelAndrew.coderUK.</p>

<p><span class="smashing-tv-host">Drew:</span> Thanks for joining us today, Rachel. Do you have any parting words?</p>

<p><span class="smashing-tv-speaker">Rachel:</span> Just to say that, keep on enjoying learning stuff while we’re in this weird situation, but also don’t stress if you’re feeling like you really can’t do anything today because it is weird. Well, none of us were expecting this sort of thing to be happening, and it’s okay to feel not great and not want to learn and not be productive for a while too.</p>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Blessing Krofegha</author><title>Implementing Skeleton Screens In React</title><link>https://www.smashingmagazine.com/2020/04/skeleton-screens-react/</link><pubDate>Mon, 20 Apr 2020 10:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/skeleton-screens-react/</guid><description>Spinners and loaders have traditionally been the way to tell users that content is going to take a while to load. While this approach is great, it’s quickly becoming obsolete in modern development. Skeleton screens are becoming the perfect replacement for traditional loaders because they focus on progress rather than wait times, hence reducing loading-time frustration.
In this article, we won’t be going through the basics of CSS React or JavaScript syntax, so you don’t have to be an expert in either of these languages to follow along.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/skeleton-screens-react/" />
              <title>Implementing Skeleton Screens In React</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Implementing Skeleton Screens In React</h1>
                  
                    
                    <address>Blessing Krofegha</address>
                  
                  <time datetime="2020-04-20T10:00:00&#43;00:00" class="op-published">2020-04-20T10:00:00+00:00</time>
                  <time datetime="2020-04-20T10:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>Spinners and loaders have traditionally been the way to tell users that content is going to take a while to load. While this approach is great, it’s quickly becoming obsolete in modern development. Skeleton screens are becoming the perfect replacement for traditional loaders because they focus on progress rather than wait times, hence reducing loading-time frustration.</p>

<p>In this article, we won’t be going through the basics of CSS React or JavaScript syntax, so you don’t have to be an expert in either of these languages to follow along.</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f973477d-7dcc-47a8-9ab9-510a97875c49/01-skeleton-screens-react.gif"><img class="breakout" src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f973477d-7dcc-47a8-9ab9-510a97875c49/01-skeleton-screens-react.gif" width="609" height="313" alt="The difference between a loader and a skeleton screen UI" /></a><figcaption>The difference between a loader and a skeleton screen UI (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f973477d-7dcc-47a8-9ab9-510a97875c49/01-skeleton-screens-react.gif">Large preview</a>)</figcaption></figure>

<p>UI and UX experts teach us that, while users wait for content to load on a page, we should keep them engaged.</p>

<p>The idea behind using spinners to engage users before content loads is great; however, the result can be less than ideal because most users will get bored staring at a dummy animated spinner like it’s a clock. <a href="https://www.lukew.com/ff/entry.asp?1797">Luke Wroblewski elaborates</a> on this.</p>

<p>Skeleton screens offer a better user experience by reducing loading-time frustration. By focusing on progress instead of wait times, it create the illusion for users that information will be incrementally displayed on the screen. Bill Chung in his <a href="https://uxdesign.cc/what-you-should-know-about-skeleton-screens-a820c45a571a">research confirms</a> this.</p>

<h3 id="what-is-a-skeleton-screen">What Is a Skeleton Screen?</h3>

<p>A skeleton screen is a version of the UI that doesn’t contain actual content; instead, it mimics the page’s layout by showing its elements in a shape similar to the actual content as it is loading and becoming available (i.e. when network latency allows).</p>

<p>A skeleton screen is essentially a wireframe of the page, with placeholder boxes for text and images.</p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="what-s-unique-about-a-skeleton-screen">What’s Unique About a Skeleton Screen?</h3>

<p>A skeleton UI resembles the page’s actual UI, so users will understand how quickly the web or mobile app will load even before the content has shown up. Here are a couple of reasons why you might want to consider using skeleton screens in your next project:</p>

<ul>
<li>mimicking a page’s layout is easier with a skeleton screen,</li>
<li>contents loads progressively (not all at once).</li>
</ul>

<p>Skeleton screens are also referred to as:</p>

<ul>
<li>ghost elements,</li>
<li>content placeholders,</li>
<li>content loaders.</li>
</ul>

<p>Blockchain.com, YouTube, Facebook, Medium, and other big tech companies display skeleton screens while their content loads to boost the UX.</p>

<h4 id="blockchain-com">Blockchain.com</h4>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png"
			sizes="100vw"
			alt="Blockchain.com skeleton screen UI"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Blockchain.com’s partially loaded state (notice how a skeleton is used in the graph analytics) (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca566f0d-f177-46ea-a3dd-345ade848c8b/02-skeleton-screens-react.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h4 id="medium">Medium</h4>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png"
			sizes="100vw"
			alt="Medium skeleton screen UI"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Medium’s skeleton UI (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87bf4ac8-84b6-4851-893c-ba2cbdd02eaa/03-skeleton-screens-react.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h4 id="linkedin">LinkedIn</h4>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png"
			sizes="100vw"
			alt="LinkedIn skeleton screen UI"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      LinkedIn’s home feed loading state in 2018 (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15a70140-841d-4290-a06d-909d5fc35aa0/04-skeleton-screens-react.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h3 id="types-of-skeleton-screens">Types of Skeleton Screens</h3>

<p>There are <a href="https://alligator.io/react/skeleton-screens-react-and-react-native/">different kinds of skeleton screens</a>. The major ones are text placeholders and image (or color) placeholders.</p>

<p>Most developers prefer to use text placeholders as the skeleton UI on their pages because they’re easy to build, and the developer doesn’t require any details about the substance of the actual content; instead the skeleton mimics the UI.</p>

<p>Color placeholders are harder to build because they require details about the content.</p>

<p>Some popular packages make implementing skeleton screens in web apps easier. Let’s take a closer look at both of them:</p>

<ul>
<li><a href="https://github.com/buildo/react-placeholder">React Placeholder</a></li>
<li><a href="https://github.com/dvtng/react-loading-skeleton">React Loading Skeleton</a></li>
</ul>

<p>We’ll look at the pros and cons of each package, before considering which to use for our application.</p>

<h3 id="react-placeholder">React Placeholder</h3>

<h4 id="pros">Pros</h4>

<ul>
<li>Placeholder components are used to create a custom skeleton UI.</li>
<li>Pulse animation (i.e. motion effect on an element) is supported.</li>
<li>It comes with a component-based API.</li>
</ul>

<h4 id="cons">Cons</h4>

<ul>
<li>Skeleton components are maintained separately, so updating styles of a component possibly requires updating the skeleton component as well.</li>
<li>The learning curve is not linear because there are multiple components for different needs.</li>
</ul>

<p>The following is an example of a skeleton component using the <code>react-placeholder</code> package:</p>

<div class="break-out">
 <pre><code class="language-javascript">import { TextBlock, RectShape } from 'react-placeholder/lib/placeholders';
import ReactPlaceholder from 'react-placeholder';

const GhostPlaceholder = () =&gt; (
  &lt;div className='my-placeholder'&gt;
    &lt;RectShape color='gray' style={{width: 25, height: 70}} /&gt;
    &lt;TextBlock rows={6} color='blue'/&gt;
  &lt;/div&gt;
);
&lt;ReactPlaceholder ready={ready} customPlaceholder={&lt;GhostPlaceholder /&gt;}&gt;
  &lt;MyComponent /&gt;
&lt;/ReactPlaceholder&gt;
</code></pre>
</div>

<p>Importing <code>TextBlock</code> and <code>RectShape</code> from <code>react-placeholder/lib/placeholder</code> and <code>ReactPlaceholder</code> from <code>react-placeholder</code>, we’ve created a functional component named <code>GhostPlaceholder</code>. <code>GhostPlaceholder</code> has a div, and inside the div we’ve used the RectShape component, which describes the dimensions of a rectangle, passes the value of any color, and defines the rectangle’s styles.</p>

<p>Next, we used the <code>TextBlock</code> component to set the values for the rows and color. The <code>TextBlock</code> component defines the number of rows and color of text.</p>

<p>We pass <code>MyComponent</code> as a child of the <code>ReactPlaceholder</code> component, which receives <code>ready</code> and the <code>GhostPlaceholder</code> component as values for its <code>ready</code> and <code>customPlaceholder</code> props.</p>

<p>The <code>MyComponent</code> will load when the skeleton screen UI is shown.</p>

<p>To learn more, <a href="https://github.com/buildo/react-placeholder">check the documentation</a>.</p>

<div class="sponsors__lead-place"></div>




<h3 id="react-loading-skeleton">React Loading Skeleton</h3>

<h4 id="pros-1">Pros</h4>

<ul>
<li>It is API-based, and it has one component with props for all customization.</li>
<li>It can be used as a separate skeleton component and also inside any component directly, so it’s flexible.</li>
<li>It supports theming and Pulse animation.</li>
</ul>

<h4 id="cons-1">Cons</h4>

<ul>
<li>It’s easy to implement for a simple skeleton UI, but complicated for more complex skeletons.</li>
<li>Having a separate skeleton component will make it harder to maintain when the UI and styles change.</li>
</ul>

<p>The following is an example of React Loading Skeleton:</p>

<div class="break-out">
 <pre><code class="language-javascript">import Skeleton, { SkeletonTheme } from "react-loading-skeleton";

const SkeletonComponent = () =&gt; (
  &lt;SkeletonTheme color="#202020" highlightColor="#444"&gt;
    &lt;section&gt;
      &lt;Skeleton height={50} width={50} /&gt;
    &lt;/section&gt;
  &lt;/SkeletonTheme&gt;
);
</code></pre>
</div>

<p>We’ve imported <code>Skeleton</code> and <code>SkeletonTheme</code> from the <code>react-loading-skeleton</code> library, then created a functional component that renders the <code>SkeletonTheme</code> component, with <code>color</code> and <code>hightlightColor</code> as properties.</p>

<p>The <code>SkeletonTheme</code> component is used for theming (for example, adding color effects to the skeleton UI).</p>

<p>Finally, inside the section, we define the <code>Skeleton</code> component, with height and width properties and their appropriate values passed in.</p>

<h3 id="building-a-youtube-like-skeleton-screen-ui">Building a YouTube-Like Skeleton Screen UI</h3>

<p>Let’s create a YouTube-like skeleton screen, using React Loading Skeleton, to show how a skeleton UI works.</p>

<h4 id="set-up-react">Set Up React</h4>

<p>The easiest way to set up React is to use <a href="https://create-react-app.dev/docs/getting-started/">Create React App</a>, which is “an officially supported way to create single-page React applications. It offers a modern build setup with no configuration.”</p>

<p>We’ll use it to bootstrap the application that we’ll be building. From your terminal, run the command below:</p>

<div class="break-out">
 <pre><code class="language-bash">npx create-react-app skeleton-screens && cd skeleton-screens
</code></pre>
</div>

<p>Once the installation has completed, start the React server by running <code>npm start</code>:</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png"
			sizes="100vw"
			alt="React app - Scaffold React app"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      React welcome page (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2920640-c8cc-4cd3-8fb4-d7660a3c0085/05-skeleton-screens-react.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h4 id="create-the-youtube-ui-without-a-skeleton-screen">Create the YouTube UI Without a Skeleton Screen</h4>

<p>First, let’s input YouTube dummy data. Real endpoints would normally be used instead of dummy data, but in this tutorial we will use dummy data.</p>

<p>Create a file in your <code>src/</code> folder, and name it <code>data.js</code>, add the following code to it.</p>

<div class="break-out">
 <pre><code class="language-javascript">const dummyData= [
  {
    section: "Recommended",
    channel: "CNN",
    items: [
      {
        id: "fDObf2AeAP4",
        image: "https://img.youtube.com/vi/fDObf2AeAP4/maxresdefault.jpg",
        title: "75 million Americans ordered to stay home",
        views: "1.9M views",
        published: "3 days agos"
      },
      {
        id: "3AzIgAa0Cm8",
        image: "https://img.youtube.com/vi/3AzIgAa0Cm8/maxresdefault.jpg",
        title: "Gupta: The truth about using chloroquine to fight coronavirus pandemic",
        views: "128K views",
        published: "4 hours ago"
      },
      {
        id: "92B37aXykYw",
        image: "https://img.youtube.com/vi/92B37aXykYw/maxresdefault.jpg",
        title: "Willie Jones STUNS Simon Cowell In Pitch Perfect Performance of 'Your Man'!",
        views: "2.47 million views",
        published: "1 month ago"
      },
      {
        id: "J6rVaFzOEP8",
        image: "https://img.youtube.com/vi/J6rVaFzOEP8/maxresdefault.jpg",
        title: "Guide To Becoming A Self-Taught Software Developer",
        views: "104K views",
        published: "17 days ago"
      },
      {
        id: "Wbk8ZrfU3EM",
        image: "https://img.youtube.com/vi/Wbk8ZrfU3EM/maxresdefault.jpg",
        title: "Tom Hanks and Rita Wilson test positive for coronavirus",
        views: "600k views",
        published: "1 week ago"
      },
      {
        id: "ikHpFgKJax8",
        image: "https://img.youtube.com/vi/ikHpFgKJax8/maxresdefault.jpg",
        title: "Faces Of Africa- The Jerry Rawlings story",
        views: "2.3 million views",
        published: "2014"
      }
    ]
  },
  {
    section: "Breaking News",
    channel: "CGTN America",
    items: [
      {
        id: "tRLDPy1A8pI",
        image: "https://img.youtube.com/vi/tRLDPy1A8pI/maxresdefault.jpg",
        title: "Is Trump blaming China for COVID-19? You decide.",
        views: "876k views",
        published: "9 days ago"
      },
      {
        id: "2ulH1R9hlG8",
        image: "https://img.youtube.com/vi/2ulH1R9hlG8/maxresdefault.jpg",
        title: "Journalist still goes to office during pandemic, see her daily routine",
        views: "873 views",
        published: "3 hours ago"
      },
      {
        id: "\_TkfQ9MaIgU",
        image: "https://img.youtube.com/vi/_TkfQ9MaIgU/maxresdefault.jpg",
        title: "How are small businesses going to survive the economic downturn of the COVID-19 era?",
        views: "283 views",
        published: "4 day ago"
      }
    ]
  }
];
export default dummyData;
</code></pre>
</div>

<p>To replicate YouTube’s format, we’ve created dummy data that has an array of objects, with properties such as ID, image, title, number of views, and publication date.</p>

<p>Next, let’s create our YouTube UI. We will have three components:</p>

<table class="tablesaw table--no-stripe table-saw" data-tablesaw-mode="stack" data-tablesaw-minimap>
  <tbody>
    <tr>
      <td><code>Card</code></td>
      <td>Holds the details of the video’s thumbnail, title, number of views, publication date, and channel.</td>
    </tr>
    <tr>
      <td><code>CardList</code></td>
      <td>Returns all cards in a row.</td>
    </tr>
    <tr>
      <td><code>App</code></td>
      <td>Mounts our <code>dummyData</code> object, loads the skeleton UI for two seconds, and returns the <code>CardList</code> component.</td>
    </tr>
  </tbody>
</table>

<p>Inside your <code>src</code> folder, create a folder and name it <code>components</code>. Inside the <code>components</code> folder, create a <code>Card.js</code> file, add the following code to it:</p>

<div class="break-out">
 <pre><code class="language-javascript">import React from "react";
const Card = ({ item, channel }) =&gt; {
    return (
      &lt;li className="card"&gt;
        &lt;a
          href={`https://www.youtube.com/watch?v=${item.id}`}
          target="\_blank"
          rel="noopener noreferrer"
          className="card-link"
        &gt;
          &lt;img src={item.image} alt={item.title} className="card-image" /&gt;
          &lt;img src={item.image} alt={item.title} className="channel-image" /&gt;
          &lt;h4 className="card-title"&gt;{item.title}&lt;/h4&gt;
          &lt;p className="card-channel"&gt;
            &lt;i&gt;{channel}&lt;/i&gt;
          &lt;/p&gt;
          &lt;div className="card-metrics"&gt;
            {item.views} &bull; {item.published}
          &lt;/div&gt;
        &lt;/a&gt;
      &lt;/li&gt;
    );
  };
  export default Card;
</code></pre>
</div>

<p>We created a <code>Card</code> component. Inside it, we imported <code>React</code> from <code>react</code>, and we deconstructed the <code>item</code> and <code>channel</code> props so that they can be used across the <code>Card</code> component. Each <code>Card</code> item component that displays one video will show the thumbnail, number of views, publication date, and title.</p>

<h4 id="cardlist-component">CardList Component</h4>

<p>Inside the <code>components</code> folder, create a <em>CardList.js</em> file and add the following code to it:</p>

<div class="break-out">
 <pre><code class="language-javascript">import React from "react";
import Card from "./Card";
const CardList = ({ list }) =&gt; {
    return (
      &lt;ul className="list"&gt;
        {list.items.map((item, index) =&gt; {
          return &lt;Card key={index} item={item} channel={list.channel} /&gt;;
        })}
      &lt;/ul&gt;
    );
  };
  export default CardList;
</code></pre>
</div>

<p>In this component, we’ve imported the <code>Card</code> component that we created. The card accepts the <code>item</code> and <code>channel</code> props, which we get by mapping through the <code>list.items</code>. We then export this component as <code>CardList</code>, because we’ll be making use of it in our <code>App</code> component.</p>

<p><strong>Note</strong>: <em>The items array that is mapped in this component is the array of objects in our <code>dummyData</code>.</em></p>

<h4 id="app-component">App Component</h4>

<p>Inside the <em>app.js</em> file in the <code>src/</code> directory, delete the code that is there and add the following to it.</p>

<div class="break-out">
 <pre><code class="language-javascript">import React, { useState, useEffect } from "react";
import "./App.css";
import dummyData from "./data";
import CardList from "./components/CardList";

const App = () =&gt; {
  const [videos, setVideos] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() =&gt; {
    setLoading(true);
    const timer = setTimeout(() =&gt; {
      setVideos(dummyData);
      setLoading(false);
    }, 5000);
    return () =&gt; clearTimeout(timer);
  }, []);
  return (
    &lt;div className="App"&gt;
      {
        videos.map((list, index) =&gt; {
          return (
            &lt;section key={index}&gt;
              &lt;h2 className="section-title"&gt;{list.section}&lt;/h2&gt;
              &lt;CardList list={list} /&gt;
              &lt;hr /&gt;
            &lt;/section&gt;
          );
        })}
    &lt;/div&gt;
  );
};
export default App;
</code></pre>
</div>

<p>In this component, we’ve imported the <code>useState</code> and <code>useEffect</code> hooks alongside <code>React</code> and the other files that we’ve created and that will be needed in the <code>App</code> component.</p>

<p>Because our data is dummy data, we need to mock it up like the API data by loading the content after a two-second timeout, using the <a href="https://electrictoolbox.com/using-settimeout-javascript/">JavaScript <code>setTimeout</code> method</a>.</p>

<p>Next, in the <code>App</code> component, we create a video state, and set the state to an empty array using <code>useState</code>.</p>

<p>To load our dummy data, we’ll use the <code>useEffect</code> hook. In our hook, we create a variable timer that holds the <code>setTimeout</code><code>()</code> function. Inside the function, we set our video state to our <code>dummyData</code> object, and we ensure that the data loads after two seconds, and, lastly, we cancel the timer while unmounting.</p>

<p>Finally, we map through our video state and return the section element that contains the <code>list-section</code> and the <code>CardList</code> component with its list props.</p>

<div class="sponsors__lead-place"></div>




<h3 id="adding-css">Adding CSS</h3>

<p>Until now, we’ve used a lot of classes without actual CSS. Inside the <code>src</code> folder, delete everything in <code>App.css</code> and replace it with the following code;</p>

<pre><code class="language-css">.App {
  max-width: 960px;
  margin: 0 auto;
  font-size: 16px;
}
.list {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  list-style: none;
  padding: 0;
}
.section-title {
  margin-top: 30px;
}
.card {
  width: calc(33% - 10px);
  margin: 20px 0;
}
.card-link {
  color: inherit;
  text-decoration: none;
}
.card-image {
  width: 100%;
}
.channel-image {
  border-radius: 100%;
  padding: 0, 10px, 0, 0;
  width: 40px;
  height: 40px;  
}
.card-title {
  margin-top: 10px;
  margin-bottom: 0;
}
.card-channel {
  margin-top: 5px;
  margin-bottom: 5px;
  font-size: 14px;
}
/* Tablets */
@media (max-width: 1000px) {
  .App {
    max-width: 600px;
  }
  .card {
    width: calc(50% - 22px);
  }
}
/* Mobiles \*/
@media (max-width: 640px) {
  .App {
    max-width: 100%;
    padding: 0 15px;
  }
  .card {
    width: 100%;
  }
}
</code></pre>

<p>Let’s see what our YouTube UI looks like without the skeleton screen. You can see that when the page loads, a white screen appears for two seconds, and then the data loads promptly.</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/49f62be7-6150-4166-9067-29a1d1536d77/07-skeleton-screens-react.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/49f62be7-6150-4166-9067-29a1d1536d77/07-skeleton-screens-react.gif" width="600" height="306" alt="YouTube-like UI without skeleton screen" /></a><figcaption>YouTube-Like UI without skeleton screen (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/49f62be7-6150-4166-9067-29a1d1536d77/07-skeleton-screens-react.gif">Large preview</a>)</figcaption></figure>

<h3 id="using-react-loading-skeleton">Using React Loading Skeleton</h3>

<p>Unlike other libraries in which you would meticulously craft a skeleton screen to match the font sizes, line heights and margins of your content, the <code>Skeleton</code> component is designed to be used directly in your components, in place of the content that is loading.</p>

<p>Let’s go over a few reasons why we’ve chosen React Loading Skeleton over others.</p>

<h4 id="theming">Theming</h4>

<p>React Loading Skeleton supports theming. Thus, you can easily change the colors of all skeleton components by using <code>SkeletonTheme</code> and pass values to the color <code>props</code>.</p>

<p>Below is an example showing how it works:</p>

<div class="break-out">
 <pre><code class="language-javascript">import Skeleton, { SkeletonTheme } from "react-loading-skeleton";

&lt;SkeletonTheme color="grey" highlightColor="#444"&gt;
  &lt;p&gt;
    &lt;Skeleton height={250} width={300} count={1} /&gt;
  &lt;/p&gt;

&lt;/SkeletonTheme&gt;
&lt;SkeletonTheme color="#990" highlightColor="#550"&gt;
  &lt;p&gt;
    &lt;Skeleton height={250} width={300} count={1} /&gt;
  &lt;/p&gt;

&lt;/SkeletonTheme&gt;
</code></pre>
</div>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/abb735b0-25f9-4966-9e6c-4a6a2a33d220/06-skeleton-screens-react.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/abb735b0-25f9-4966-9e6c-4a6a2a33d220/06-skeleton-screens-react.gif" width="473" height="256" alt="Theming effect in action" /></a><figcaption>Theming effect in action (<a href="">Large preview</a>)</figcaption></figure>

<h4 id="duration">Duration</h4>

<p>In addition to the <code>height</code>, <code>width</code>, and <code>color</code> props, we can also specify a <code>duration</code> prop.</p>

<pre><code class="language-javascript">&lt;Skeleton duration={2} /&gt;
</code></pre>

<p>The duration defaults to <code>1.2</code>. This determines how long it takes to do one cycle of the skeleton animation.</p>

<p>To learn more, check out <a href="https://github.com/dvtng/react-loading-skeleton">the documentation</a>.</p>

<h3 id="implementing-skeleton-screen-ui">Implementing Skeleton Screen UI</h3>

<p>Now, we’ll install <code>react-loading-skeleton</code>. Run the following command in your terminal to install the package:</p>

<pre><code class="language-bash">npm install react-loading-skeleton
</code></pre>

<h4 id="skeleton-component">Skeleton Component</h4>

<p>Let’s create a skeleton component for our video data. Inside our <code>components</code> folder, create a  <code>SkeletonCard.js</code> file, and add the following code:</p>

<div class="break-out">
 <pre><code class="language-javascript">import React from "react";
import Skeleton from "react-loading-skeleton";
const SkeletonCard = () =&gt; {
    return (
      &lt;section&gt;
        &lt;h2 className="section-title"&gt;
          &lt;Skeleton height={30} width={300} /&gt;
        &lt;/h2&gt;

        &lt;ul className="list"&gt;
          {Array(9)
            .fill()
            .map((item, index) =&gt; (
              &lt;li className="card" key={index}&gt;
                &lt;Skeleton height={180} /&gt;
                &lt;h4 className="card-title"&gt;
                &lt;Skeleton circle={true} height={50} width={50} /&gt; &nbsp;
                  &lt;Skeleton height={36} width={`80%`} /&gt;
                &lt;/h4&gt;
                &lt;p className="card-channel"&gt;
                  &lt;Skeleton width={`60%`} /&gt;
                &lt;/p&gt;
                &lt;div className="card-metrics"&gt;
                  &lt;Skeleton width={`90%`} /&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            ))}
        &lt;/ul&gt;
      &lt;/section&gt;
    );
  };
  export default SkeletonCard;
</code></pre>
</div>

<p>We’ve created an unordered list. Inside it, we’ve used the <code>Array.fill()</code> method. Because we have nine items of dummy data, we’ve used the <code>Array.fill()</code> method to loop through the length of our <code>items</code> object and filled it with no index value, hence making our array <strong>empty</strong>. See the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">Array.fill documentation</a> to learn how it works.</p>

<p>Next, we mapped through our empty array to return a list containing the skeleton properties, and we specified the value of each of the skeleton properties.</p>

<p>Here, <code>height</code> connotes the length of a skeleton rectangle, and <code>width</code> refers to the breadth, while <code>circle</code> creates the rounded part of the skeleton UI.</p>

<p>React Loading Skeleton comes with default Pulse animation, which makes it handy. You could create Pulse animation to suit your project, but if you ask me, I would stick with the default.</p>

<p>Finally, the complete <a href="https://github.com/krofax/React-Skeleton-Screen-UI">source code is available</a>.</p>

<p>We now have a fully functional skeleton screen UI. Our example shows the skeleton for five seconds before showing the content.</p>

<p>Let’s see our result thus far:</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/326ff1db-d7a5-4495-951d-07181c96f22d/08-skeleton-screens-react.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/326ff1db-d7a5-4495-951d-07181c96f22d/08-skeleton-screens-react.gif" width="600" height="305" alt="YouTube-like UI plus skeleton screen UI" /></a><figcaption>Our YouTube-like skeleton UI (<a href="">Large preview</a>)</figcaption></figure>

<h3 id="conclusion">Conclusion</h3>

<p>Skeleton screens tremendously improve the user experience by avoiding the frustration of facing an entirely blank screen and giving the user an impression of what content will look like before it loads.</p>

<p>If you aren’t comfortable with any of the packages we’ve looked at, you can create your own skeleton UI by making rectangles and circles that mimic the page’s layout.</p>

<p>Please do share your feedback and experience with in the comments section below. I’d love to see what you come up with!</p>

<p>The supporting repo for this article is <a href="https://github.com/krofax/React-Skeleton-Screen-UI">available on Github</a>.</p>

<h4 id="references">References</h4>

<ul>
<li>“<a href="https://uxdesign.cc/what-you-should-know-about-skeleton-screens-a820c45a571a">Everything You Need to Know About Skeleton Screens</a>”, Bill Chung, UX Collective</li>
<li>“<a href="https://medium.com/octopus-wealth/skeleton-loading-pages-with-react-5a931f12677b">Skeleton Loading Pages With React</a>”, Anthony Panagi, Octopus Wealth</li>
<li>“<a href="https://alligator.io/react/skeleton-screens-react-and-react-native/">Skeleton Screens With React And React Native</a>”, Chris Dolphin, Alligator.io</li>
<li>“<a href="https://dev.to/prototyp/implementing-skeleton-loading-in-react-kia">Implementing Skeleton Loading In React </a>”, Adrian Bece, DEV</li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ks, il, al)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Iris Lješnjanin</author><title>Staying Connected And Learning From Each Other</title><link>https://www.smashingmagazine.com/2020/04/monthly-roundup-04-2020/</link><pubDate>Fri, 17 Apr 2020 11:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/monthly-roundup-04-2020/</guid><description>Digital space obviously has its challenges, but it also provides incredible opportunities for us to connect and learn in ways we just wouldn’t be able to do otherwise. The situation with COVID-19 has challenged us to consider ways in which we could offer a similar SmashingConf experience and access to experts just as in an in-person workshop &amp;mdash; without needing to leave your desk.
With insightful takeaways, exercises, access to slides, recordings and friendly Q&amp;amp;As, it has been such an incredible experience already!</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/monthly-roundup-04-2020/" />
              <title>Staying Connected And Learning From Each Other</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Staying Connected And Learning From Each Other</h1>
                  
                    
                    <address>Iris Lješnjanin</address>
                  
                  <time datetime="2020-04-17T11:00:00&#43;00:00" class="op-published">2020-04-17T11:00:00+00:00</time>
                  <time datetime="2020-04-17T11:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>Digital space obviously has its challenges, but it also provides incredible opportunities for us to connect and learn in ways we just wouldn’t be able to do otherwise. The situation with COVID-19 has challenged us to consider ways in which we could offer a similar <a href="https://smashingconf.com/">SmashingConf experience</a> and access to experts just as in an in-person workshop &mdash; without needing to leave your desk.</p>

<p>With insightful takeaways, exercises, access to slides, recordings and friendly Q&amp;As, it has been such an incredible experience already! We’ve had literally people from all over the world collaborating together on group exercises &mdash; something we’d never be able to achieve with an in-person event.</p>











<figure class="
  
  
  ">
  
    <a href="https://smashingconf.com/online-workshops/">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3c12ad5-b0ad-4c41-aa9d-8fae3c11a76d/topple-streaming-live-online-smashing-workshops.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3c12ad5-b0ad-4c41-aa9d-8fae3c11a76d/topple-streaming-live-online-smashing-workshops.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3c12ad5-b0ad-4c41-aa9d-8fae3c11a76d/topple-streaming-live-online-smashing-workshops.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3c12ad5-b0ad-4c41-aa9d-8fae3c11a76d/topple-streaming-live-online-smashing-workshops.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3c12ad5-b0ad-4c41-aa9d-8fae3c11a76d/topple-streaming-live-online-smashing-workshops.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3c12ad5-b0ad-4c41-aa9d-8fae3c11a76d/topple-streaming-live-online-smashing-workshops.png"
			sizes="100vw"
			alt="Topple the Cat running an online workshop with six other cool cats"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      We’re looking forward to connecting with Brad Frost, Joe Leech, Miriam Suzanne and many others. Try spotting them, but don’t get too distratced by the Mouse!
    </figcaption>
  
</figure>

<p>And we’re just getting started! We already have <a href="https://smashingconf.com/online-workshops/">a schedule of online workshops ready for you</a> so you can start marking your calendars and join us anytime you like. What better way is there to boost your skills online and learn practical, actionable insights from experts in the industry &mdash; live!</p>

<p><br /></p>

<table class="tablesaw table--no-stripe break-out table-saw" data-tablesaw-mode="stack" data-tablesaw-minimap>
    <tbody>
        <thead>
        <tr>
            <th data-tablesaw-priority="persist">Name</th>
            <th>Topic</th>
            <th>Date</th>
            <th>Time</th>
        </tr>
    </thead>
        <tr>
            <td>Brad Frost</td>
            <td><a href="https://smashingconf.com/online-workshops/workshops/brad-frost">Creating and Maintaining Successful Design Systems</a></td>
            <td>April 22&ndash;May 6</td>
            <td>09:00&ndash;11:30 AM PDT</td>
        </tr>
        <tr>
            <td>Joe Leech</td>
            <td><a href="https://smashingconf.com/online-workshops/workshops/joe-leech">Psychology For UX and Product Design</a></td>
            <td>April 27&ndash;May 5</td>
            <td>09:00&ndash;11:30 AM PDT</td>
        </tr>
        <tr>
            <td>Miriam Suzanne</td>
            <td><a href="https://smashingconf.com/online-workshops/workshops/miriam-suzanne">Resilient Web Systems with CSS & Sass</a></td>
            <td>May 7&ndash;22</td>
            <td>09:00&ndash;11:30 AM PDT</td>
        </tr>
        <tr>
            <td>Vitaly Friedman</td>
            <td><a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman">Smart Interface Design Patterns, 2020 Edition</a></td>
            <td>May 12&ndash;26</td>
            <td>09:00&ndash;11:30 AM PDT</td>
        </tr>
        <tr>
            <td>Rachel Andrew</td>
            <td><a href="https://smashingconf.com/online-workshops/workshops/rachel-andrew-june">The CSS Layout Masterclass</a></td>
            <td>June 11&ndash;12</td>
            <td>01:00&ndash;03:30 AM PDT</td>
        </tr>
        <tr>
            <td>Marcy Sutton</td>
            <td><a href="https://smashingconf.com/online-workshops/workshops/marcy-sutton">Front-End Accessibility Masterclass</a></td>
            <td>June 16&ndash;30</td>
            <td>09:00&ndash;11:30 AM PDT</td>
        </tr>
    </tbody>
</table>

<p><em>Do you like what you see, but are worried about getting some time off from work? Well, you surely didn’t think we would leave your hanging? We know how difficult it can sometimes be, and so we’ve prepared a neat lil’ <a href="https://smashingconf.com/online-workshops/convince-your-boss">Convince-Your-Boss template</a> to help you out. Good luck!</em></p>

<ul>
<li>Follow <a href="https://twitter.com/smashingconf">@smashingconf</a> on Twitter</li>
<li>Subscribe to the <a href="https://smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=dd3c645e21">SmashingConf Newsletter</a></li>
<li>Watch previous <a href="https://vimeo.com/search?q=smashingconf">SmashingConf videos</a></li>
</ul>

<h3 id="ready-for-the-next-smashing-book">Ready For The Next Smashing Book?</h3>

<p><a href="click"><img style="float:right;margin-top:1em;margin-left:1.5em;margin-bottom:1em;border-radius:11px;max-width:50%" src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/290b2f4c-1213-449f-9e2d-6b279b10967f/topple-click-cutout-hand-blue-background.png" width="200" alt="Topple the Cat presenting the book cover of the upcoming Click! book" /></a>That’s right! Paul Boag’s <em><a href="click">Click! Encourage Clicks Without Shady Tricks</a></em> is currently in its final production stage and the <strong>pre-release starts on May 5</strong>. This practical guide has 11 chapters full of advice that can help you start improving your conversion rate in just a matter of simple steps. You can <a href="https://encouragingclicks.com/#call-to-action">subscribe for a pre-order discount</a> and be one of the first to get your hands on the book. Stay tuned!</p>

<div class="c-felix-the-cat">
<h4>Live UX Review With The Author</h4>
<p>Next week, we’ll be hosting a Smashing TV webinar with Paul Boag who’ll be reviewing your websites and sharing some techniques you can use to improve conversion rates &mdash; without having to resort to any shady tricks. <a href="https://www.smashingmagazine.com/smashing-tv/live-ux-review-with-paul-boag-april-session/" class="btn btn--small btn--white btn--white--bordered">Tell me more&nbsp;&rarr;</a></p>
</div>

<p><a href="https://www.smashingmagazine.com/2020/03/ethical-design-handbook-release/"><img style="float:right;margin-top:1em;margin-left:1.5em;margin-bottom:1em;border-radius:11px;max-width:50%" src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34ede09a-120c-4ad2-a221-9b362ba66e47/topple-waving-behind-ethical-design-handbook.png" width="200" alt="Topple the Cat presenting The Ethical Design Handbook book cover" /></a>As for the previous book, printed copies of <em><a href="https://www.smashingmagazine.com/printed-books/ethical-design-handbook/">The Ethical Design Handbook</a></em> have made their way around the world, and we got to see some <a href="https://www.smashingmagazine.com/2020/04/ethical-design-handbook-followup/">happy responses and thoughtful reviews</a>. If you’d also like a copy, you can <a href="http://provide.smashingmagazine.com/eBooks/ethical-design-handbook-sample-chapter.pdf">download a free PDF excerpt</a> (5 MB) to get a first impression of the book &mdash; we’re sure you won’t be disappointed!</p>

<p>Also, in case you missed it, there is a <strong>Smashing Podcast</strong> episode featuring two of the authors of the book: <a href="https://www.smashingmagazine.com/2020/02/smashing-podcast-episode-10/">Trine Falbe and Martin Michael Frederiksen</a>. They discuss what it means for a design to be ethical, and how we can make improvements in our own projects.</p>

<p>Drew has also interviewed <a href="https://www.smashingmagazine.com/2020/04/smashing-podcast-episode-13/">Laura Kalbag</a>, <a href="https://www.smashingmagazine.com/2020/03/smashing-podcast-episode-11/">Eduardo Bouças</a>, <a href="https://www.smashingmagazine.com/2020/02/smashing-podcast-episode-9/">Stéphanie Walter</a>, and many more. You can <a href="https://podcast.smashingmagazine.com/?_ga=2.239131587.1111589761.1586771947-685203915.1586513843">subscribe and tune in anytime</a> with any of your favorite apps!</p>

<ul>
<li><a href="https://www.smashingmagazine.com/category/smashing-podcast">Previous Smashing Podcast episodes</a> (including transcripts)</li>
<li>Follow <a href="https://twitter.com/SmashingPod">@SmashingPod</a> on Twitter</li>
</ul>

<h3 id="trending-topics-on-smashingmag">Trending Topics On SmashingMag</h3>

<p>We publish a new article every day on various topics that are current in the web industry. Here are some that our readers seemed to enjoy the most and have recommended further:</p>

<ul>
    <li>“<a href="https://www.smashingmagazine.com/2020/04/react-hooks-best-practices/">Best Practices With React Hooks</a>”<br />by <strong>Adeneye David Abiodun</strong><br /><em>This article covers the rules of React Hooks and how to effectively start using them in your projects. Please note that in order to follow this article in detail, you will need to know how to use React Hooks.</em></li>
    <li>“<a href="https://www.smashingmagazine.com/2020/04/inspired-design-decisions-herb-lubalin/">Inspired Design Decisions With Herb Lubalin</a>”<br />by <strong>Andy Clarke</strong><br /><em>How can we combine elements to develop powerful headers and calls to action? How do we use pre-formatted HTML text, and the text element in SVG for precise control over type? How can we optimise SVGs and make SVG text accessible? In this article, we’ll explore just that.</em></li>
    <li>“<a href="https://www.smashingmagazine.com/2020/04/structured-data-design-process/">Baking Structured Data Into The Design Process</a>”<br />by <strong>Frederick O’Brien</strong><br /><em>Retrofitting search engine optimization only gets you so far. As metadata gets smarter, it’s more important than ever to build it into the design process from the start.</em></li>
    <li>“<a href="https://www.smashingmagazine.com/make-life-easier-when-using-git/">How To Make Life Easier When Using Git</a>”<br />by <strong>Shane Hudson</strong><br /><em>You don’t need to know your trees from your dangling blobs. If you use Git every day and feel like it’s a juggling act, then here are some tricks and tips to help make your life a bit easier.</em></li>
</ul>

<h3 id="best-picks-from-our-newsletter">Best Picks From Our Newsletter</h3>

<p class="c-pre-sidenote--left">We’ll be honest: Every second week, we struggle with keeping the <a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Smashing Newsletter</a> issues at a moderate length &mdash; there are just <em>so</em> many talented folks out there working on brilliant projects! Kudos to everyone involved!</p><p class="c-sidenote c-sidenote--right">Interested in sponsoring? Feel free to check out our <a href="http://provide.smashingmagazine.com/SmashingMag_SmashingConf_Partnership_2020.pdf">partnership options</a> and <a href="mailto:&#97;&#100;&#118;&#101;&#114;&#116;&#105;&#115;&#105;&#110;&#103;&#64;&#115;&#109;&#97;&#115;&#104;&#105;&#110;&#103;&#109;&#97;&#103;&#97;&#122;&#105;&#110;&#101;&#46;&#99;&#111;&#109;">get in touch</a> with the team anytime &mdash; they’ll be sure to get back to you right away.</p>

<h4 id="tips-for-leading-a-remote-team">Tips For Leading A Remote Team</h4>

<p>Leading a remote design team can feel a bit daunting, especially if it’s your first time. Luckily, other people out there have found themselves in the same situation before and developed strategies to keep the team productive and effective, no matter where everyone might be located. Mark Boulton is one of them.</p>

<figure><a title="You’ve found yourself leading a remote design team" href="https://markboulton.co.uk/journal/found-yourself-leading-a-remote-design-team/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/b95d119b-9fb6-4b9e-8c5a-6d7bacd1f398.jpg" width="450" alt="Screenshot from the article" border="0"></a></figure>

<p>In light of recent events when many teams need to switch to remote work, Mark summarized some simple but useful <a href="https://markboulton.co.uk/journal/found-yourself-leading-a-remote-design-team/">approaches that have helped him leading remote teams</a> for years. From continuing your team’s rituals to dealing with expectations on availability and coaching people through the ups and downs that working remotely brings along, Mark’s tips aren’t hard to adopt but they can make a real difference. <em>(cm)</em></p>

<h4 id="getting-to-grips-with-css-viewport-units">Getting To Grips With CSS Viewport Units</h4>

<p>CSS Viewport units provide us with a way to size things in a fluid and dynamic way, without the need for JavaScript. If you haven’t gotten around to dive deeper into the topic yet, Ahmad Shadeed wrote a <a href="https://ishadeed.com/article/viewport-units/">useful guide to CSS Viewport units</a>.</p>

<figure><a title="CSS Viewport Units" href="https://ishadeed.com/article/viewport-units/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/b76db711-b7cd-4df3-842a-6b95a752b33f.png" width="450" alt="CSS Viewport Units" border="0"></a></figure>

<p>Starting with a general overview of the viewport units <code>vw</code>, <code>vh</code>, <code>vmin</code>, and <code>vmax</code>, the guide covers how viewport units differ from percentages and explores practical use cases for viewport units and how to implement them in your projects. Just the push you might have needed to make the switch. <em>(cm)</em></p>

<h4 id="a-better-file-uploader-for-the-web">A Better File Uploader For The Web</h4>

<p>Building a better file uploader for the web. That was the idea behind the JavaScript image uploader <a href="https://uppload.js.org/">Uppload</a>. Created by Anand Chowdhary, the image uploader is open-source and can be used with any file uploading backend. And with more than 30 plugins, it’s highly customizable, too.</p>

<figure><a title="Uppload"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/2c064072-6577-448f-b9e9-beedc777b8f4.png" width="450" alt="Uppload" border="0"></a></figure>

<p>Users can drag and drop their files to upload them or import from a camera, URL, or social media and a several other services (there’s even an option to take and upload a screenshot just by entering a URL). During the uploading process, users can apply effects to the images and adjust filters like brightness, contrast, and saturation. If that’s overkill for your project, you can select only what you need and treeshake the rest, of course. Uppload supports browsers down to IE10. Handy! <em>(cm)</em></p>

<h4 id="open-source-flip-counter-plugin">Open-Source Flip Counter Plugin</h4>

<p>Do you want to count down to an event, visualize a fundraising campaign, or show a clock or sales counter? Then Rik Schennink’s <a href="https://pqina.nl/flip/">Flip Counter</a> might be for you. The plugin is open-source, mobile-friendly, easy to set up, and it gets by without any dependencies.</p>

<figure><a title="Flip Counter" href="https://pqina.nl/flip/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/c6094354-dfde-4d00-bad5-a26f1ae0c4c4.png" width="450" alt="Flip Counter" border="0"></a></figure>

<p>Apart from its ease of use and flexibility, Flip shines with the beautifully smooth animation that is used to flip the numbers on the cards. Depending on your use case, there are several presets that you can use as a starting point to build your flip counter. The visual style can be customized with CSS. A lovely little detail. <em>(cm)</em></p>

<h4 id="how-to-write-good-email-code">How To Write Good Email Code</h4>

<p>Maybe you’ve been in that situation before where you had to code an HTML email but struggled with email code best practices. To help you master the challenge, Mark Robbins set up a <a href="https://www.goodemailcode.com/">library for good email code</a>. You can simply copy and paste the code and use it in your emails or you can learn more about the theory behind it.</p>

<figure><a title="Good Email Code" href="https://www.goodemailcode.com/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/41312e7a-fcb3-4f09-b8af-3209e3667830.png" width="450" alt="Good Email Code" border="0"></a></figure>

<p>Priority lies in making sure the code is semantic, functional, accessible, and meeting user expectations, as Mark points out. Consistency between email clients and pixel perfect design are important, too, but always secondary. One for the bookmarks. <em>(cm)</em></p>

<h4 id="a-complete-solution-for-tooltips-popovers-and-dropdowns">A Complete Solution For Tooltips, Popovers, And Dropdowns</h4>

<p>If you’re looking for a quick and easy solution for tooltips, popovers, dropdowns, and menus, you might want to take a look at <a href="https://atomiks.github.io/tippyjs/">Tippy.js</a>. The library provides the logic and styling involved in all types of elements that pop out from the flow of your document and get overlaid on top of the UI.</p>

<figure><a title="Tippy.js" href="https://atomiks.github.io/tippyjs/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/0414157a-5bdc-4f71-992c-c579e134e9da.png" width="450" alt="Tippy.js" border="0"></a></figure>

<p>Tippy.js is optimized to prevent flipping and overflow, it’s WAI-Aria compliant, works in all modern browsers, and, so the promise, it even delivers high performance on low-end devices. You can style the elements with custom CSS and TypeScript is supported out of the box, too. Handy! <em>(cm)</em></p>

<h4 id="open-source-tool-to-make-animated-product-mockups">Open-Source Tool To Make Animated Product Mockups</h4>

<p>What do you do when you’re missing a tool for a specific purpose? You build it yourself. That’s what Alyssa X did when she was looking for a tool to make animated GIFs and videos to showcase a product. Her take on the subject: <a href="https://animockup.com/">Animockup</a>.</p>

<figure><a title="Animockup" href="https://animockup.com/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/f1ddab81-9e2d-4bdd-b033-5440901d9121.png" width="450" alt="Animockup" border="0"></a></figure>

<p>With Animockup, you can showcase your product in action within a device mockup. Just drag some screen footage into the browser-based tool, and Animockup automatically places it into your desired mockup. You can add text, images, and adjust the styling, and choose from a selection of presets to optimize your mockup for sharing on Twitter, Dribble, Instagram and the like. A useful little helper. <em>(cm)</em></p>

<h4 id="create-css-color-gradients-with-ease">Create CSS Color Gradients With Ease</h4>

<p>Hand-picking colors to make a color gradient requires design experience and a good understanding of color harmony. If you need a gradient for a background or for UI elements but don’t feel confident enough to tackle the task yourself (or if you’re in a hurry), the <a href="https://mybrandnewlogo.com/color-gradient-generator">color gradient generator</a> which the folks at My Brand New Logo have created has got your back.</p>

<figure><a title="Color gradient generator" href="https://mybrandnewlogo.com/color-gradient-generator"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/80035ae5-9566-486d-bea3-d315c47d1e5e.png" width="450" alt="Color gradient generator" border="0"></a></figure>

<p>Powered by color gradient algorithms, the generator creates well-balanced gradients based on a color you select. There are four different styles of gradients that go from subtle to a mother-of-pearl effect and an intense, deep color gradient. You can adjust the gradient with sliders and, once you’re happy with the result, copy-paste the generated CSS code to use it in your project. Nice! <em>(cm)</em></p>

<h4 id="collaborative-diagrams">Collaborative Diagrams</h4>

<p>Pen and paper are often hard to beat when you want to visualize an idea with a quick diagram. If you’re looking for a digital alternative that is just as straightforward and easy to use as your analog tools, you might want to check out <a href="https://excalidraw.com/">Excalidraw</a>.</p>

<figure><a title="Excalidraw" href="https://excalidraw.com/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/daee7371-5190-49f8-8879-f30040ca5bbd.png" width="450" alt="Excalidraw" border="0"></a></figure>

<p>Excalidraw is a virtual whiteboard that you can draw on. You can choose from a set of shapes, connect them with arrows or lines, add text, and color. There are some other styling options, too, but the tool is kept rather simple so that you can focus on what’s really important: visualizing your idea. A great feature that comes in especially handy now that a lot of teams work remotely: You can share a live-collaboration session with your team members or your clients. Export and save options are included, too, of course. <em>(cm)</em></p>

<h4 id="mastering-bem-naming-conventions">Mastering BEM Naming Conventions</h4>

<p>BEM makes your code scalable and reusable, prevents it from becoming messy, and facilitates teamwork. However, even experienced CSS developers struggle with the naming conventions sometimes. To prevent you from getting lost in the BEM cosmos, the folks at <em>9elements</em> put together the <a href="https://9elements.com/bem-cheat-sheet/">BEM Cheat Sheet</a> with naming suggestions for some of the most common web components: breadcrumb navigation, buttons, cards, lists, tabs, form checkboxes, sidebars, and more.</p>

<figure><a title="BEM Cheatsheet" href="https://9elements.com/bem-cheat-sheet/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/30ac0404-9537-4213-91bb-5bd1f6ae73e1.png" alt="BEM Cheatsheet" border="0"></a></figure>

<p>If you want to dive in even deeper into the BEM methodology, Luke Whitehouse shares <a href="https://assortment.io/posts/grandchild-elements-bem-css">tips to tackle an ever-present issue in BEM: grandchildren</a>, i.e. elements that are tied to another element, rather than to the block itself. Luke explores three different approaches to master the challenge: flattening the grandchildren and treating them as if they have no relation with their parent element, by creating new blocks, and by extending the BEM naming convention. A good read. <em>(cm)</em></p>

<h4 id="a-preserve-for-classic-games">A Preserve For Classic Games</h4>

<p>Do you feel nostalgic when you think of the video games you played back in the 80s and 90s? Well, why not take a little trip back to those days when games were just as much fun without the fancy effects they shine with today?</p>

<figure><a title="ClassicReload" href="https://classicreload.com/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/1f915d7f-eeb6-43b3-abcc-f3879389c8c6.png" alt="ClassicReload" border="0"></a></figure>

<p><a href="https://classicreload.com/">ClassicReload</a> preserves more than 6,000 old retro games and abandoned OD/interfaces that you can play right in your browser. You can search for your favorite or browse the games by name, year, genre, and platform to discover something new. No matter if it’s The Oregon Trail, Prince of Persia, or Dangerous Dave you’ve been longing for for so long, if you’ve got a sweet spot for games, the site will keep you entertained for quite a while. <em>(cm)</em></p>

<h4 id="managing-html-dom-and-jquery-alternatives">Managing HTML DOM And jQuery Alternatives</h4>

<p>How do you manage HTML DOM with vanilla JavaScript only? Phuoc Nguyen collected <a href="https://htmldom.dev/">100 native DOM scripting snippets</a> along with explanations on how to use them. The snippets are labeled by difficulty and range from basic (e.g. detecting if an element is focused) to more intermediate tasks like exporting a table to CSV and, finally, advanced use cases like creating a range slider.</p>

<figure><a title="How to manage HTML DOM with vanilla JavaScript only" href="https://htmldom.dev/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/d652ea58-a395-4708-baa9-be51029dda6f.png" alt="How to manage HTML DOM with vanilla JavaScript only" border="0"></a></figure>

<p>Speaking of going vanilla: If you’re using jQuery in your projects, it might be a good idea to check if you actually need the additional dependency or if a few lines of utility code could do the trick. “<a href="http://youmightnotneedjquery.com/">You might not need jQuery</a>” lists useful alternative code snippets that help you forgo jQuery. <em>(cm)</em></p>

<h4 id="overly-descriptive-color-palettes">Overly Descriptive Color Palettes</h4>

<p>Have you ever considered combining snail-paced soft pink with unsealed mahogany and lousy watermelon as a color scheme for your next project? Well, what might sound a bit weird at first, is the concept behind <a href="https://colors.lol/">colors.lol</a>, a color inspiration site with “overly descriptive color palettes”, as its creator Adam Fuhrer describes it.</p>

<figure><a title="Colors.lol" href="https://colors.lol/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/b008601d-823e-4b0a-9944-d88ede72723b.png" alt="Colors.lol" border="0"></a></figure>

<p>Created as a fun way to discover interesting color combinations, the palettes are hand-selected from the Twitter bot <a href="https://twitter.com/colorschemez">@colorschemez</a>. The feed randomly generates color combinations and matches each color with an adjective from a list of over 20,000 words. Hiding behind the unusual names are of course real hex color values that you can use right away &mdash; <code>#FDB0C0</code>, <code>#4A0100</code>, and <code>#FD4659</code> in the case of snail-paced soft pink and its fellas, for example. A fun take on color. <em>(cm)</em></p>

<h4 id="flexible-repeating-svg-masks">Flexible Repeating SVG Masks</h4>

<p>Sometimes it’s a small idea, a little detail in a project that you tinker with and that you can’t let go off until you come up with a tailor-made solution to make it happen. Nothing that seems like a big deal at first glance, but that requires you to think outside the box. In Tyler Gaw’s case, this little detail was a flexible header with a little squiggle at the bottom instead of a straight line. The twist: to make the component future-proof, Tyler wanted to use a seamless, horizontal repeating pattern that he could color with CSS in any color he liked.</p>

<figure><a title="Flexible Repeating SVG Masks" href="https://tylergaw.com/articles/css-repeating-svg-masks/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/ceae333d-47b4-4ba8-bec4-3896dabb3dea.png" alt="Flexible Repeating SVG Masks" border="0"></a></figure>

<p>To get the job done, Tyler settled on <a href="https://tylergaw.com/articles/css-repeating-svg-masks/">flexible repeating SVG masks</a>. SVG provides the shape, CSS handles the color, and <code>mask-image</code> does the heavy lifting by hiding anything in the underlying <code>div</code> that doesn’t intersect with the shape. A clever approach that can be used as the base for some fun experiments. <em>(cm)</em></p>

<hr />

<p><em>As a token of appreciation, Vitaly Friedman released his very own “Smart Interface Design Checklists”, a PDF deck with 150+ questions to ask when designing and building anything from hamburgers to carousels and tables. Subscribe to the newsletter below and get it in your inbox right away!</em></p>


	<div class="promo-newsletter--newsletter promo-newsletter--article">
    <div class="meow__content--inlined">
      

<div class=" promo-newsletter--newsletter">

<div class="promo-newsletter">
<div class="promo-newsletter-image-wrapper">
  <a href="/the-smashing-newsletter/" class="promo-newsletter-image-link">
    <img src="/images/smashing-cat/cat-with-slippers.svg" width="180" height="235" loading="lazy" class="promo-newsletter-image" alt="With Smashing Newsletter, it always feels like home. A cat with slippers reading the newsletter edition."/>
  </a>
</div>
<h2 class="h2 promo-newsletter-title">Smashing Newsletter</h2>
<p class="promo-newsletter-description">Every second Tuesday, we send a <a href="https://www.smashingmagazine.com/the-smashing-newsletter/">newsletter</a> with useful techniques on front-end and UX. Subscribe and get <strong>Smart Interface Design Checklists PDF</strong> in your inbox.</p>

<div class="promo-newsletter-form-wrapper">
  <div class="nl__form-wrapper">
  <form method="POST" action="//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0" class="nl__form">
    <div class="input-wrapper ">
      <label for="email" class="form__field js-form-field form__field--floating nl__form__content ">
        <span class="form__field__label">Your <span class="form__field__label--extra">(smashing)</span> email</span>
        <input autocomplete="off" class="form__field__input " type="email" pattern="(.+)@(.+){2,}\.(.+){2,}" name="EMAIL" id="email" required/>
      </label>
      <button
      data-event-category="Button"
      data-event-action="click"
      data-event-label="Newsletter Box"
      type="submit"
      class="btn btn--medium  btn--green btn--promo-newsletter   ladda-button ladda-button--fixed"
      data-style="expand-right"
			onclick="this.form && this.form.submit()"
			value="Submit"
			>
        <span class="ladda-label">
Subscribe <span class="nl__form__arrow">→</span>
          <wbr></span>
          <span class="ladda-spinner"></span>
        </button>
      </div>
    </form>
  </div>
</div>

  <small class="promo-newsletter-caption">
  Front-end, design and UX. Sent 2× a month. <br/>You can always unsubscribe with just one click.</small>

</div>
</div>
    </div>
  </div>
    

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(cm, vf, ra, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Philip Kiely</author><title>Django Highlights: Models, Admin, And Harnessing The Relational Database (Part 3)</title><link>https://www.smashingmagazine.com/2020/04/django-highlights-models-admin-relational-database/</link><pubDate>Thu, 16 Apr 2020 10:30:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/django-highlights-models-admin-relational-database/</guid><description>Before we get started, I want to note that Django’s built-in administrative capabilities, even after customization, are not meant for end-users. The admin panel exists as a developer, operator, and administrator tool for creating and maintaining software. It is not intended to be used to give end-users moderation capabilities or any other administrator abilities over the platform you develop.
This article is based on a hypothesis in two parts:</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/django-highlights-models-admin-relational-database/" />
              <title>Django Highlights: Models, Admin, And Harnessing The Relational Database (Part 3)</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Django Highlights: Models, Admin, And Harnessing The Relational Database (Part 3)</h1>
                  
                    
                    <address>Philip Kiely</address>
                  
                  <time datetime="2020-04-16T10:30:00&#43;00:00" class="op-published">2020-04-16T10:30:00+00:00</time>
                  <time datetime="2020-04-16T10:30:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>Before we get started, I want to note that Django’s built-in administrative capabilities, even after customization, are not meant for end-users. The admin panel exists as a developer, operator, and administrator tool for creating and maintaining software. It is not intended to be used to give end-users moderation capabilities or any other administrator abilities over the platform you develop.</p>

<p>This article is based on a hypothesis in two parts:</p>

<ol>
<li>The Django admin panel is so intuitive that you basically already know how to use it.</li>
<li>The Django admin panel is so powerful that we can use it as a tool for learning about representing data in a relational database using a Django model.</li>
</ol>

<p>I offer these ideas with the caveat that we will still need to write some configuration code to activate the admin panel’s more powerful abilities, and we will still need to use Django’s models-based ORM (object-relational mapping) to specify the representation of data in our system.</p>

<div class="c-felix-the-cat">
<h4>Recommended Reading</h4>
<p>“Django Highlights” is a series introducing important concepts of web development in Django. You might want to read up on <a href="https://www.smashingmagazine.com/2020/02/django-highlights-user-models-authentication/">providing secure user authentication flows</a> and follow alongside a demonstration on <a href="https://www.smashingmagazine.com/2020/04/django-highlights-templating-saves-lines/">using Django templating to write complex pages</a>.</p>
</div>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="setting-up">Setting Up</h3>

<p>We’re going to be working with a sample project in this article. The project models some data that a library would store about its books and patrons. The example should be fairly applicable to many types of systems that manage users and/or inventory. Here’s a sneak peek of what the data looks like:</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Data Model. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Please complete the following steps to get the example code running on your local machine.</p>

<h4 id="1-installing-packages">1. Installing Packages</h4>

<p>With Python 3.6 or higher installed, create a directory and virtual environment. Then, install the following packages:</p>

<pre><code class="language-bash">pip install django django-grappelli</code></pre>

<p>Django is the web framework that we’re working with in this article. (<code>django-grappelli</code> is an admin panel theme that we’ll briefly cover.)</p>

<h4 id="2-getting-the-project">2. Getting The Project</h4>

<p>With the previous packages installed, download the example code from GitHub. Run:</p>

<pre><code class="language-bash">git clone https://github.com/philipkiely/library_records.git
cd library_records/library</code></pre>

<h4 id="3-creating-a-superuser">3. Creating a Superuser</h4>

<p>Using the following commands, set up your database and create a superuser. The command-line interface will walk you through the process of creating a superuser. Your superuser account will be how you access the admin panel in a moment, so be sure to remember the password you set. Use:</p>

<pre><code class="language-py">python manage.py migrate
python manage.py createsuperuser</code></pre>

<h4 id="4-loading-the-data">4. Loading the Data</h4>

<p>For our exploration, I created a dataset called a fixture that you can load into the database (more on how to create a fixture at the end of the article). Use the fixture to populate your database before exploring it in the admin panel. Run:</p>

<pre><code class="language-py">python manage.py loaddata ../fixture.json</code></pre>

<h4 id="5-running-the-example-project">5. Running The Example Project</h4>

<p>Finally, you’re ready to run the example code. To run the server, use the following command:</p>

<pre><code class="language-py">python manage.py runserver</code></pre>

<p>Open your browser to <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a> to view the project. Note that you are automatically redirected to the admin panel at <em>/admin/</em>. I accomplished that with the following configuration in <em>library/urls.py</em>:</p>

<pre><code class="language-py">from django.contrib import admin
from django.urls import path
from records import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index),
]</code></pre>

<p>combined with the following simple redirect in <em>records/views.py</em>:</p>

<pre><code class="language-py">from django.http import HttpResponseRedirect

def index(request):
    return HttpResponseRedirect('/admin/')</code></pre>

<h3 id="using-the-admin-panel">Using The Admin Panel</h3>

<p>We’ve made it! When you load your page, you should see something like the following:</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Django Admin Panel Main Page. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e977f5e6-60ac-4768-b20f-64a1582c7427/admin-page.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>This view is accomplished with the following boilerplate code in <em>records/admin.py</em>:</p>

<pre><code class="language-py">from django.contrib import admin
from .models import Book, Patron, Copy

admin.site.register(Book)
admin.site.register(Copy)
admin.site.register(Patron)</code></pre>

<p>This view should give you an initial understanding of the data that the system stores. I’ll remove some of the mystery: <code>Groups</code> and <code>Users</code> are defined by Django and store information and permissions for accounts on the system. You can read more about the <code>User</code> model in <a href="https://www.smashingmagazine.com/2020/02/django-highlights-user-models-authentication/">an earlier article in this series</a>. <code>Books</code>, <code>Copys</code>, and <code>Patrons</code> are tables in the database that we created when running migrations and populated by loading the fixture. Note that Django naively pluralizes model names by appending an &ldquo;s,&rdquo; even in cases like &ldquo;copys&rdquo; where it is incorrect spelling.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Data Model. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f64cf97-48ef-4d0c-beeb-7633117affb4/data-model.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>In our project, a <code>Book</code> is a record with a title, author, publication date, and ISBN (International Standard Book Number). The library maintains a <code>Copy</code> of each <code>Book</code>, or possibly multiple. Each <code>Copy</code> can be checked out by a <code>Patron</code>, or could currently be checked in. A <code>Patron</code> is an extension of the <code>User</code> that records their address and date of birth.</p>

<h4 id="create-read-update-destroy">Create, Read, Update, Destroy</h4>

<p>One standard capability of the admin panel is adding instances of each model. Click on &ldquo;books&rdquo; to get to the model’s page, and click the &ldquo;Add Book&rdquo; button in the upper-right corner. Doing so will pull up a form, which you can fill out and save to create a book.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Create a Book (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4705935-33aa-499d-a8b7-3e3ae3e82008/create-book.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Creating a <code>Patron</code> reveals another built-in capability of the admin’s create form: you can create the connected model directly from the same form. The screenshot below shows the pop-up that is triggered by the green plus sign to the right of the <code>User</code> drop-down. Thus, you can create both models on the same admin page.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Create a Patron. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/855db41a-7c6e-4fb0-9071-956ac5f69d4c/create-patron.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>You can create a <code>COPY</code> via the same mechanism.</p>

<p>For each record, you can click the row to edit it using the same form. You can also delete records using an admin action.</p>

<h4 id="admin-actions">Admin Actions</h4>

<p>While the built-in capabilities of the admin panel are widely useful, you can create your own tools using admin actions. We’ll create two: one for creating copies of books and one for checking in books that have been returned to the library.</p>

<p>To create a <code>Copy</code> of a <code>Book</code>, go to the URL <code>/admin/records/book/</code> and use the &ldquo;Action&rdquo; dropdown menu to select &ldquo;Add a copy of book(s)&rdquo; and then use the checkboxes on the left-hand column of the table to select which book or books to add a copy of to the inventory.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Create Copy Action. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a0331a1-6447-4038-ab83-a0a642c3753c/create-copys.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Creating this relies on a model method we’ll cover later. We can call it as an admin action by creating a <code>ModelAdmin</code> class for the <code>Profile</code> model as follows in <em>records/admin.py</em>:</p>

<pre><code class="language-py">from django.contrib import admin
from .models import Book, Patron, Copy

class BookAdmin(admin.ModelAdmin):
    list_display = ("title", "author", "published")
    actions = ["make_copys"]

    def make_copys(self, request, queryset):
        for q in queryset:
            q.make_copy()
        self.message_user(request, "copy(s) created")
    make_copys.short_description = "Add a copy of book(s)"

admin.site.register(Book, BookAdmin)</code></pre>

<p>The <code>list_display</code> property denotes which fields are used to represent the model in the model’s overview page. The <code>actions</code> property lists admin actions. Our admin action is defined as a function within <code>BookAdmin</code> and takes three arguments: the admin object itself, the request (the actual HTTP request sent by the client), and the queryset (the list of objects whose boxes were checked). We perform the same action on each item in the queryset, then notify the user that the actions have been completed. Every admin action requires a short description so that it can be properly identified in the drop-down menu. Finally, we now add <code>BookAdmin</code> when registering the model.</p>

<p>Writing admin actions for setting properties in bulk is pretty repetitive. Here’s the code for checking in a <code>Copy</code>, note its near equivalence to the previous action.</p>

<pre><code class="language-py">from django.contrib import admin
from .models import Book, Patron, Copy

class CopyAdmin(admin.ModelAdmin):
    actions = ["check_in_copys"]

    def check_in_copys(self, request, queryset):
        for q in queryset:
            q.check_in()
        self.message_user(request, "copy(s) checked in")
    check_in_copys.short_description = "Check in copy(s)"

admin.site.register(Copy, CopyAdmin)</code></pre>

<h4 id="admin-theme">Admin Theme</h4>

<p>By default, Django provides fairly simple styles for the admin panel. You can create your own theme or use a third-party theme to give the admin panel a new look. One popular open-source theme is grappelli, which we installed earlier in the article. You can check out <a href="https://django-grappelli.readthedocs.io/en/latest/">the documentation</a> for its full capabilities.</p>

<p>Installing the theme is pretty straightforward, it only requires two lines. First, add <code>grappelli</code> to <code>INSTALLED_APPS</code> as follows in <em>library/settings.py</em>:</p>

<pre><code class="language-py">INSTALLED_APPS = [
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'records',
]</code></pre>

<p>Then, adjust <em>library/urls.py</em>:</p>

<pre><code class="language-py">from django.contrib import admin
from django.urls import path, include
from records import views

urlpatterns = [
    path('grappelli/', include('grappelli.urls')),
    path('admin/', admin.site.urls),
    path('', views.index),
]</code></pre>

<p>With those changes in place, the admin panel should look like the following:</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Admin Panel with Theme. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfb530fa-ad69-40ae-8029-d3fa23933c8f/admin-panel-themed.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>There are a number of other themes out there, and again you can <a href="https://docs.djangoproject.com/en/3.0/ref/contrib/admin/#overriding-admin-templates">develop your own</a>. I’ll be sticking with the default look for the rest of this article.</p>

<div class="sponsors__lead-place"></div>




<h3 id="understanding-models">Understanding Models</h3>

<p>Now that you’re comfortable with the admin panel and using it to navigate the data, let’s take a look at the models that define our database structure. Each model represents one table in a relational database.</p>

<p>A relational database stores data in one or more tables. Each of these tables has a specified column structure, including a primary key (a unique identifier for each element) and one or more columns of values, which are of various types like strings, integers, and dates. Each object stored in the database is represented as a single row. The &ldquo;relational&rdquo; part of the name comes from what is arguably the technology’s most important feature: creating relationships between tables. An object (row) can have a one-to-one, one-to-many (foreign key), or many-to-many mapping to rows in other tables. We’ll discuss this further in the examples.</p>

<p>Django, by default, uses SQLite3 for development. SQLite3 is a simple relational database engine and your database is automatically created as <em>db.sqlite3</em> the first time you run <code>python manage.py migrate</code>. We’ll continue with SQLite3 for this article, but it is not suitable for production use, primarily because overwrites are possible with concurrent users. In production, or when writing a system that you one day intend to deploy, use PostgreSQL or MySQL.</p>

<p>Django uses models to interface with the database. Using part of Django’s ORM, the <em>records/models.py</em> file includes multiple models, which allows for specifying fields, properties, and methods for each object. When creating models, we strive for a &ldquo;Fat Model&rdquo; architecture, within reason. That means that as much of the data validation, parsing, processing, business logic, exception handling, edge case resolution, and similar tasks as possible should be handled in the specification of the model itself. Under the hood, Django models are very complex, featureful objects with widely useful default behavior. This makes the &ldquo;Fat Model&rdquo; architecture easy to achieve even without writing a substantial amount of code.</p>

<p>Let’s walk through the three models in our sample application. We can’t cover everything, as this is supposed to be an introductory article, not the Django framework’s complete documentation, but I’ll highlight the most important choices I made in constructing these simple models.</p>

<p>The <code>Book</code> class is the most straightforward of the models. Here it is from <em>records/models.py</em>:</p>

<pre><code class="language-py">from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=300)
    author = models.CharField(max_length=150)
    published = models.DateField()
    isbn = models.IntegerField(unique=True)

    def __str__(self):
        return self.title + " by " + self.author

    def make_copy(self):
        Copy.objects.create(book=self)</code></pre>

<p>All <code>CharField</code> fields require a specified <code>max_length</code> attribute. The conventional length is 150 characters, which I doubled for <code>title</code> in case of very long titles. Of course, there still is an arbitrary limit, which could be exceeded. For unbounded text length, use a <code>TextField</code>. The <code>published</code> field is a <code>DateField</code>. The time the book was published doesn’t matter, but if it did I would use a <code>DateTimeField</code>. Finally, the ISBN is an integer (ISBNs are 10 or 13 digits and thus all fit within the integer’s max value) and we use <code>unique=True</code> as no two books can have the same ISBN, which is then enforced at the database level.</p>

<p>All objects have a method <code>__str__(self)</code> that defines their string representation. We override the default implementation provided by the <code>models.Model</code> class and instead represent books as &ldquo;title by author&rdquo; in all places where the model would be represented as a string. Recall that previously we used <code>list_display</code> in <code>Book</code>’s admin object to determine what fields would be shown in the admin panel’s list. If that <code>list_display</code> is not present, the admin list instead shows the string representation of the model, as it does for both <code>Patron</code> and <code>Copy</code>.</p>

<p>Finally, we have a method on <code>Book</code> that we called in its admin action that we wrote earlier. This function creates a <code>Copy</code> that is related to a given instance of a <code>Book</code> in the database.</p>

<p>Moving on to <code>Patron</code>, this model introduces the concept of a one-to-one relationship, in this case with the built-in <code>User</code> model. Check it out from <em>records/models.py</em>:</p>

<pre><code class="language-py">from django.db import models
from django.contrib.auth.models import User

class Patron(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    address = models.CharField(max_length=150)
    dob = models.DateField()

    def __str__(self):
        return self.user.username</code></pre>

<p>The <code>user</code> field is not exactly a bijective function. There CAN be a <code>User</code> instance without an associated <code>Patron</code> instance. However, a <code>User</code> CAN NOT be associated with more than one <code>Patron</code> instance, and a <code>Patron</code> <em>cannot</em> exist without exactly one relation to a user. This is enforced at the database level, and is guaranteed by the <code>on_delete=models.CASCADE</code> specification: if a <code>User</code> instance is deleted, an associated <code>Profile</code> will be deleted.</p>

<p>The other fields and <code>__str__(self)</code> function we’ve seen before. It’s worth noting that you can reach through a one-to-one relation to get attributes, in this case <code>user.username</code>, in a model’s functions.</p>

<p>To expand on the usefulness of database relations, let’s turn our attention to <code>Copy</code> from <em>records/models.py</em>:</p>

<div class="break-out">
<pre><code class="language-py">from django.db import models

class Copy(models.Model):
    book = models.ForeignKey(Book, on_delete=models.CASCADE)
    out_to = models.ForeignKey(Patron, blank=True, null=True, on_delete=models.SET_NULL)

    def __str__(self):
        has_copy = "checked in"
        if self.out_to:
            has_copy = self.out_to.user.username
        return self.book.title + " -> " + has_copy
    
    def check_out(self, p):
        self.out_to = p
        self.save()
    
    def check_in(self):
        self.out_to = None
        self.save()
</code></pre>
</div>

<p>Again, we’ve seen most of this before, so let’s focus on the new stuff: <code>models.ForeignKey</code>. A <code>Copy</code> must be of a single <code>Book</code>, but the library may have multiple <code>Copy</code>s of each <code>Book</code>. A <code>Book</code> can exist in the database without the library having a <code>Copy</code> in its catalog, but a <code>Copy</code> cannot exist without an underlying <code>Book</code>.</p>

<p>This complex relationship is expressed with the following line:</p>

<pre><code class="language-py">book = models.ForeignKey(Book, on_delete=models.CASCADE)</code></pre>

<p>The deletion behavior is the same as <code>Patron</code>’s in reference to <code>User</code>.</p>

<p>The relationship between a <code>Copy</code> and a <code>Patron</code> is slightly different. A <code>Copy</code> may be checked out to up to one <code>Patron</code>s, but each <code>Patron</code> can check out as many <code>Copy</code>s as the library lets them. However, this is not a permanent relationship, the <code>Copy</code> is sometimes not checked out. <code>Patron</code>s and <code>Copy</code>s exist independently from one another in the database; deleting an instance of one should not delete any instance of the other.</p>

<p>This relationship is still a use case for the foreign key, but with different arguments:</p>

<div class="break-out">
 <pre><code class="language-py">out_to = models.ForeignKey(Patron, blank=True, null=True, on_delete=models.SET_NULL)
</code></pre>
</div>

<p>Here, having <code>blank=True</code> allows for forms to accept <code>None</code> as the value for the relation and <code>null=True</code> allows for the column for the <code>Patron</code> relation in <code>Copy</code>’s table in the database accept <code>null</code> as a value. The delete behavior, which would be triggered on a <code>Copy</code> if a <code>Patron</code> instance was deleted while they had that <code>Copy</code> checked out, is to sever the relation while leaving the <code>Copy</code> intact by setting the <code>Patron</code> field to null.</p>

<p>The same field type, <code>models.ForeignKey</code>, can express very different relationships between objects. The one relation that I could not cleanly fit in the example is a many-to-many field, which is like a one-to-one field, except that, as suggested by its name, each instance can be related to many other instances and every other and each of those can be related back to many others, like how a book could have multiple authors, each of whom have written multiple books.</p>

<div class="sponsors__lead-place"></div>




<h4 id="migrations">Migrations</h4>

<p>You might be wondering how the database knows what is expressed in the model. In my experience, migrations are one of those things that are pretty straightforward until they aren&rsquo;t, and then they eat your face. Here’s how to keep your mug intact, for beginners: learn about migrations and how to interact with them, but try to avoid making manual edits to the migration files. If you already know what you’re doing, skip this section and keep up what works for you.</p>

<p>Either way, <a href="https://docs.djangoproject.com/en/3.0/topics/migrations/">check out the official documentation</a> for a complete treatment of the subject.</p>

<p>Migrations translate changes in a model to changes in database schema. You don’t have to write them yourself, Django creates them with the <code>python manage.py makemigrations</code> command. You should run this command when you create a new model or edit the fields of an existing model, but there is no need to do so when creating or editing model methods. It’s important to note that migrations exist as a chain, each one references the previous one so that it can make error-free edits to the database schema. Thus, if you’re collaborating on a project, it’s important to keep a single consistent migration history in version control. When there are unapplied migrations, run <code>python manage.py migrate</code> to apply them before running the server.</p>

<p>The example project is distributed with a single migration, <em>records/migrations/0001_initial.py</em>. Again, this is automatically generated code that you shouldn’t have to edit, so I won’t copy it in here, but if you want to get a sense of what’s going on behind the scenes go ahead and take a look at it.</p>

<h4 id="fixtures">Fixtures</h4>

<p>Unlike migrations, fixtures are not a common aspect of Django development. I use them to distribute sample data with articles, and have never used them otherwise. However, because we used one earlier, I feel compelled to introduce the topic.</p>

<p>For once, the <a href="https://docs.djangoproject.com/en/3.0/howto/initial-data/">official documentation</a> is a little slim on the topic. Overall, what you should know is that fixtures are a way of importing and exporting data from your database in a variety of formats, including JSON, which is what I use. This feature mostly exists to help with things like automated testing, and is not a backup system or way to edit data in a live database. Furthermore, fixtures are not updated with migrations, and if you try to apply a fixture to a database with an incompatible schema it will fail.</p>

<p>To generate a fixture for the entire database, run:</p>

<pre><code class="language-py">python manage.py dumpdata --format json > fixture.json
</code></pre>

<p>To load a fixture, run:</p>

<pre><code class="language-py">python manage.py loaddata fixture.json
</code></pre>

<h3 id="conclusion">Conclusion</h3>

<p>Writing models in Django is a huge topic, and using the admin panel is another. In 3,000 words, I’ve only managed to introduce each. Hopefully, using the admin panel has given you a better interface to explore how models work and relate to each other, leaving you with the confidence to experiment and develop your own relational representations of data.</p>

<p>If you’re looking for an easy place to start, try adding a <code>Librarian</code> model that inherits from <code>User</code> like <code>Profile</code> does. For more of a challenge, try implementing a checkout history for each <code>Copy</code> and/or <code>Patron</code> (there are several ways of accomplishing this one).</p>

<p>Django Highlights is a series introducing important concepts of web development in Django. Each article is written as a stand-alone guide to a facet of Django development intended to help front-end developers and designers reach a deeper understanding of &ldquo;the other half&rdquo; of the codebase. These articles are mostly constructed to help you gain an understanding of theory and convention, but contain some code samples which are written in Django 3.0.</p>

<h4 id="further-reading">Further Reading</h4>

<p>You may be interested in the following articles and documentation.</p>

<ul>
<li><a href="https://www.smashingmagazine.com/2020/02/django-highlights-user-models-authentication/">Django Highlights: User Model</a></li>
<li><a href="https://docs.djangoproject.com/en/3.0/ref/contrib/admin/">Django Admin Documentation</a></li>
<li><a href="https://docs.djangoproject.com/en/3.0/topics/db/models/">Django Models</a></li>
<li><a href="https://docs.djangoproject.com/en/3.0/ref/models/fields/">Django Model Field Reference</a></li>
<li><a href="https://docs.djangoproject.com/en/3.0/topics/migrations/">Django Migrations</a></li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(dm, yk, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Adeneye David Abiodun</author><title>Best Practices With React Hooks</title><link>https://www.smashingmagazine.com/2020/04/react-hooks-best-practices/</link><pubDate>Wed, 15 Apr 2020 11:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/react-hooks-best-practices/</guid><description>React Hooks are a new addition in React 16.8 that let you use state and other React features without writing a class component. In other words, Hooks are functions that let you “hook into” React state and lifecycle features from function components. (They do not work inside class components.)
React provides a few built-in Hooks like useState. You can also create your own Hooks to reuse stateful behavior between different components.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/react-hooks-best-practices/" />
              <title>Best Practices With React Hooks</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Best Practices With React Hooks</h1>
                  
                    
                    <address>Adeneye David Abiodun</address>
                  
                  <time datetime="2020-04-15T11:00:00&#43;00:00" class="op-published">2020-04-15T11:00:00+00:00</time>
                  <time datetime="2020-04-15T11:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>React Hooks are a new addition in React 16.8 that let you use state and other React features without writing a <code>class</code> component. In other words, <a href="https://reactjs.org/docs/hooks-intro.html">Hooks</a> are functions that let you “hook into” React state and lifecycle features from function components. (They do not work inside <code>class</code> components.)</p>

<p>React provides a few built-in Hooks like <code>useState</code>. You can also create your own Hooks to reuse stateful behavior between different components. The example below shows a counter whose state is managed using the <code>useState()</code> hook. Each time you click on the button, we make use of <code>setCount()</code> to update the value of <code>count</code> by <code>1</code>.</p>

<figure >
	<p data-height="500"
	data-theme-id="light"
	data-slug-hash="QWbXMyM"
	data-user="smashingmag"
	data-default-tab="result"
	class="codepen">See the Pen [React Hook example with Counter](https://codepen.io/smashingmag/pen/QWbXMyM) by <a href="https://codepen.io/adeneye-abiodun-david">Adeneye Abiodun David</a>.</p>
	<figcaption>See the Pen <a href="https://codepen.io/smashingmag/pen/QWbXMyM">React Hook example with Counter</a> by <a href="https://codepen.io/adeneye-abiodun-david">Adeneye Abiodun David</a>.</figcaption>
</figure>

<p>This example renders a counter with a value of <code>0</code>. When you click the button, it increments the value by <code>1</code>. The initial value of the component is defined using <code>useState</code>.</p>

<pre><code class="language-javascript">const [count, setCount] = useState(0)</code></pre>

<p>As you can see, we set that to be <code>0</code>. Then we use the <code>onClick()</code> method to call <code>setCount</code> when we want to increment the value.</p>

<pre><code class="language-javascript">&lt;button onClick={() => setCount(count + 1)}&gt;
  Click me
&lt;/button&gt;</code></pre>

<p>Before the release of React Hooks, this example would have used more lines of code, as we’d have had to make use of a <code>class</code> component.</p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="rules-of-react-hooks">Rules Of React Hooks</h3>

<p>Before we dive deep into the best practices, we need to understand the rules of React Hooks which are also some of the fundamental concepts of the practices presented in this article.</p>

<p>React Hooks are JavaScript functions, but you need to follow two rules when using them.</p>

<ol>
  <li><a href="#call-hooks-top-level">Call Hooks at the top level</a>;</li>
  <li><a href="#call-hooks-react-components">Only call Hooks from React components</a>.</li>
</ol>

<p><strong>Note</strong>: <em>These two rules were introduced in React Hooks, as opposed to being part of JavaScript itself.</em></p>

<p>Let’s look at these rules in more detail.</p>

<h3 id="call-hooks-top-level">Call Hooks At The Top Level</h3>

<p>Don’t call Hooks inside loops, conditions, or nested functions. Always use Hooks at the top level of your React function. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple <code>useState</code> and <code>useEffect</code> calls.</p>

<p>Let’s make a <code>Form</code> component which will have two states:</p>

<ul>
<li><code>accountName</code></li>
<li><code>accountDetail</code></li>
</ul>

<p>These states will have default values, we’ll make use of the <code>useEffect</code> hook to persist the state to either the local storage of our browser or to the title of our document.</p>

<p>Now, this component will be maybe to successfully manage its state if it remains the same between multiple calls of <code>useState</code> and <code>useEffect</code>.</p>

<div class="break-out">
<pre><code class="language-javascript">function Form() {
  // 1. Use the accountName state variable
  const [accountName, setAccountName] = useState('David');

  // 2. Use an effect for persisting the form
  useEffect(function persistForm() {
    localStorage.setItem('formData', accountName);
  });

  // 3. Use the accountDetail state variable
  const [accountDetail, setAccountDetail] = useState('Active');

  // 4. Use an effect for updating the title
  useEffect(function updateStatus() {
    document.title = accountName + ' ' + accountDetail;
  });

  // ...
}</code></pre>
</div>

<p>If the order of our Hooks changes (which can be possible when they are called in loops or conditionals), React will have a hard time figuring out how to preserve the state of our component.</p>

<div class="break-out">
<pre><code class="language-javascript">// ------------
useState('David')           // 1. Initialize the accountName state variable with 'David'
useEffect(persistForm)     // 2. Add an effect for persisting the form
useState('Active')        // 3. Initialize the accountdetail state variable with 'Active'
useEffect(updateStatus)     // 4. Add an effect for updating the status

// -------------
// Second render
// -------------
useState('David')           // 1. Read the accountName state variable (argument is ignored)
useEffect(persistForm)     // 2. Replace the effect for persisting the form
useState('Active')        // 3. Read the accountDetail state variable (argument is ignored)
useEffect(updateStatus)     // 4. Replace the effect for updating the status

// ...</code></pre>
</div>

<p>That’s the order React follows to call our hooks. Since the order remains the same, it will be able to preserve the state of our component. But what happens if we put a Hook call inside a condition?</p>

<div class="break-out">
<pre><code class="language-javascript">// 🔴 We're breaking the first rule by using a Hook in a condition
  if (accountName !== '') {
    useEffect(function persistForm() {
      localStorage.setItem('formData', accountName);
    });
  }</code></pre>
</div>

<p>The <code>accountName  !==  ''</code> condition is <code>true</code> on the first render, so we run this Hook. However, on the next render the user might clear the form, making the condition <code>false</code>. Now that we skip this Hook during rendering, the order of the Hook calls becomes different:</p>

<div class="break-out">
<pre><code class="language-javascript">useState('David')           // 1. Read the accountName state variable (argument is ignored)
// useEffect(persistForm)  // 🔴 This Hook was skipped!
useState('Active')        // 🔴 2 (but was 3). Fail to read the accountDetails state variable
useEffect(updateStatus)     // 🔴 3 (but was 4). Fail to replace the effect</code></pre>
</div>

<p>React wouldn’t know what to return for the second <code>useState</code> Hook call. React expected that the second Hook call in this component corresponds to the <code>persistForm</code> effect, just like during the previous render &mdash; but it doesn’t anymore. From that point on, every next <code>Hook</code> call after the one we skipped would also shift by one &mdash; leading to bugs.</p>

<p>This is why Hooks must be called on the top level of our components. If we want to run an effect conditionally, we can put that condition <em>inside</em> our Hook.</p>

<p><strong>Note</strong>: <em>Check out the <a href="https://reactjs.org/docs/hooks-rules.html">React Hook docs</a> to read more on this topic.</em></p>

<div class="sponsors__lead-place"></div>




<h3 id="call-hooks-react-components">Only Call Hooks From React Components</h3>

<p>Don’t call Hooks from regular JavaScript functions. Instead, you can call Hooks from React function components. Let’s take look at the difference between JavaScript function and React component below:</p>

<h5 id="javascript-function">JavaScript Function</h5>

<pre><code class="language-javascript">import { useState } = "react";

function toCelsius(fahrenheit) {
  const [name, setName] = useState("David");
  return (5/9) * (fahrenheit-32);
}
document.getElementById("demo").innerHTML = toCelsius;</code></pre>

<p>Here we import the <code>useState</code> hook from the React package, and then declared our function. But this is invalid as it is not a React component.</p>

<h5 id="react-function">React Function</h5>

<div class="break-out">
<pre><code class="language-javascript">
import React, { useState} from "react";
import ReactDOM from "react-dom";

function Account(props) {
  const [name, setName] = useState("David");
  return &lt;p&gt;Hello, {name}! The price is &lt;b&gt;{props.total}&lt;/b&gt; and the total amount is &lt;b&gt;{props.amount}&lt;/b&gt;&lt;/p&gt;
}
ReactDom.render(
  &lt;Account total={20} amount={5000} /&gt;,
  document.getElementById('root')
);</code></pre>
</div>

<p>Even though the body of both looks similar, the latter becomes a component when we import React into the file. This is what makes it possible for us to use things like <a href="https://reactjs.org/docs/introducing-jsx.html">JSX</a> and React hooks inside.</p>

<p>If you happened to import your preferred hook without importing React (which makes it a regular function), you will not be able to make use of the Hook you’ve imported as the Hook is accessible only in React component.</p>

<h4 id="call-hooks-from-custom-hooks">Call Hooks From Custom Hooks</h4>

<p>A custom Hook is a JavaScript function whose name starts with <code>use</code> and that may call other Hooks. For example, <code>useUserName</code> is used below a custom Hook that calls the <code>useState</code> and <code>useEffect</code> hooks. It fetches data from an API, loops through the data, and calls <code>setIsPresent()</code> if the specific username it received is present in the API data.</p>

<pre><code class="language-javascript">export default function useUserName(userName) {
  const [isPresent, setIsPresent] = useState(false);
  
  useEffect(() => {
    const data = MockedApi.fetchData();
    data.then((res) => {
      res.forEach((e) => {
        if (e.name === userName) {
          setIsPresent(true);
        }
     });
    });
  });
    
  return isPresent;
}</code></pre>

<p>We can then go on to reuse the functionality of this hook in other places where we need such in our application. In such places, except when needed, we don’t have to call <code>useState</code> or <code>useEffect</code> anymore.</p>

<p>By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.</p>

<h4 id="eslint-plugin">ESLint Plugin</h4>

<p>ESLint plugin called <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks"><code>eslint-plugin-react-hooks</code></a> enforces the rules above. This comes in handy in enforcing the rules when working on a project. I suggest you make use of this plugin when working on your project, especially when working with others. You can add this plugin to your project if you’d like to try it:</p>

<div class="break-out">
<pre><code class="language-javascript">// Your ESLint configuration
{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {
    // ...
    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
    "react-hooks/exhaustive-deps": "warn" // Checks effect dependencies
  }
}</code></pre>
</div>

<p>This plugin is included by default in <a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app">Create React App</a>. So you don’t need to add it if you bootstrap your React applications using Create-React-App.</p>

<h3 id="thinking-in-hooks">Thinking In Hooks</h3>

<p>Let’s take a brief look at <code>class</code> components and functional components (with Hooks), before diving into the few Hooks best practices.</p>

<p>The simplest way to define a component in React is to write a JavaScript function that returns a React element:</p>

<pre><code class="language-javascript">function Welcome(props) {
  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;
}</code></pre>

<p>The <code>Welcome</code> component accepts <code>props</code> which is an object that contains data and returns a React element. We can then import and render this component in another component.</p>

<p>The <code>class</code> component uses a programming methodology called <strong>Encapsulation</strong> which basically means that everything relevant to the class component will live within it. Life-cycle methods (<code>constructors</code>, <code>componentDidMount()</code>, <code>render</code>, and so on) give components a predictable structure.</p>

<p>Encapsulation is one of the fundamentals of OOP (<strong>O</strong>bject-<strong>O</strong>riented <strong>P</strong>rogramming). It refers to the bundling of data within the methods that operate on that data, and is used to hide the values or state of a structured data object inside a class &mdash; preventing unauthorized parties’ direct access to them.</p>

<p>With Hooks, the composition of a component changes from being a combination of life-cycle Hooks &mdash; to functionalities with some render at the end.</p>

<h4 id="function-component">Function Component</h4>

<p>The example below shows how custom Hooks can be used in a functional component (without showcasing what the body is). However, what it does or can do is not limited. It could be instantiating state variables, consuming contexts, subscribing the component to various side effects &mdash; or all of the above if you’re using a custom hook!</p>

<pre><code class="language-javascript">function {
  useHook{...};
  useHook{...};
  useHook{...};
  return (
    <div>...</div>
  );
}</code></pre>

<h4 id="class-component">Class Component</h4>

<p>A <code>class</code> component requires you to extend from <code>React.Component</code> and create a <code>render</code> function which returns a React element. This requires more code but will also give you some benefits.</p>

<pre><code class="language-javascript">class {
  constructor(props) {...}
  componentDidMount() {...}
  componentWillUnmount() {...}
  render() {...}
}</code></pre>

<p>There are some benefits you get by using functional components in React:</p>

<ol>
<li>It will get easier to separate container and presentational components because you need to think more about your component’s state if you don’t have access to <code>setState()</code> in your component.</li>
<li>Functional components are much <strong>easier to read and test</strong> because they are plain JavaScript functions without state or lifecycle-hooks.</li>
<li>You end up with <strong>less code.</strong></li>
<li>The React team <a href="https://reactjs.org/blog/2015/10/07/react-v0.14.html#stateless-functional-components">mentioned</a> that there may be a <strong>performance</strong> boost for functional components in future React versions.</li>
</ol>

<p>This leads to the first best practice when using React Hooks.</p>

<div class="sponsors__lead-place"></div>




<h3 id="hooks-best-practices">Hooks Best Practices</h3>

<h4 id="1-simplify-your-hooks">1. Simplify Your Hooks</h4>

<p>Keeping React Hooks simple will give you the power to effectively control and manipulate what goes on in a component throughout its lifetime. <strong>Avoid writing custom Hooks as much as possible</strong>; you can inline a <code>useState()</code> or <code>useEffect()</code> instead of creating your own hook.</p>

<p>If you find yourself making use of a bunch of custom Hooks that are related in functionality, you can create a custom hook that acts as a wrapper for these. Let’s take a look at two different functional components with hooks below.</p>

<h5 id="functional-component-v1">Functional Component v1</h5>

<pre><code class="language-javascript">function {
  useHook(...);
  useHook(...);
  useHook(...);
  return(
    &lt;div&gt;...&lt;/div&gt;
  );
}</code></pre>

<h5 id="functional-component-v2">Functional Component v2</h5>

<pre><code class="language-javascript">function {
  useCustomHook(...);
    useHook(...);
    useHook(...);
  return(
    &lt;div&gt;...&lt;/div&gt;
  );
}</code></pre>

<p>v2 is a better version because it keeps the hook simple and all other <code>useHook</code>s are inline accordingly. This allows us to create functionality that can be reused across different components and also gives us more power to control and manipulate our components effectively. Instead of adopting v1 in which our components are littered with Hooks, you should make use of v2 which will make debugging easy and your code cleaner.</p>

<h4 id="2-organize-and-structure-your-hooks">2. Organize And Structure Your Hooks</h4>

<p>One of the advantages of React Hooks is the ability to write less code that is easy to read. In some cases, the amount of <code>useEffect()</code> and <code>useState()</code> can still be confusing. When you keep your component organized it will help in readability and keep the flow of your components consistent and predictable. If your custom Hooks are too complicated, you can always break them down to sub-custom Hooks. Extract the logic of your component to custom Hooks to make your code readable.</p>

<h4 id="3-use-react-hooks-snippets">3. Use React Hooks Snippets</h4>

<p>React Hooks Snippets is a Visual Studio Code extension to make React Hooks easier and faster. Currently, five hooks are supported:</p>

<ul>
<li><code>useState()</code></li>
<li><code>useEffect()</code></li>
<li><code>useContext()</code></li>
<li><code>useCallback()</code></li>
<li><code>useMemo()</code></li>
</ul>

<p>Other snippets have also been added. I have tried working with these Hooks and it has been one of the best practices I’ve personally used while working with them.</p>

<p>There are two ways you can add React Hooks snippets to your project:</p>

<ol>
<li><strong>Command</strong><br />
Launch the VS Code Quick open (<kbd>Ctrl</kbd>+<kbd>P</kbd>), paste <code>ext install ALDuncanson.react-hooks-snippets</code> and press <kbd>Enter</kbd>.<br /></li>
<li><strong>Extension Marketplace</strong><br />
Launch ‘VS Code Extension Marketplace’ (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>X</kbd>) and search for ‘React Hook Snippets’. Then, look for the ‘Alduncanson’ icon.</li>
</ol>

<p>I recommend the first snippet. Read more about the snippets <a href="https://marketplace.visualstudio.com/items?itemName=AlDuncanson.react-hooks-snippets">here</a> or check for the lastest Hooks snippets <a href="https://marketplace.visualstudio.com/">here</a>.</p>

<h4 id="4-put-hooks-rules-into-consideration">4. Put Hooks Rules Into Consideration</h4>

<p>Endeavor to always put the two rules of Hooks we learned earlier into consideration while working with React Hooks.</p>

<ul>
<li>Only call your Hooks at the top level. Don’t call Hooks inside loops, conditions or nested functions.</li>
<li>Always call Hooks from React function components or from custom Hooks, don’t call Hooks from regular JavaScript functions.</li>
</ul>

<p>The ESlint plugin called <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks"><code>eslint-plugin-react-hooks</code></a> enforces these two rules, you can add this plugin to your project if you’d like it as we explain above in rules of hooks section.</p>

<p>Best practices have not been fully resolved because Hooks are still relatively new. So adoption should be taken with precaution one would take in adopting in any early technology. With that in mind, Hooks are the way for the future of React.</p>

<h3 id="conclusion">Conclusion</h3>

<p>I hope you enjoyed this tutorial. We’ve learned the two most important rules of React Hooks and how to effectively think in Hooks. We looked at functional components and some best practices in writing Hooks the right and effective way. As brief as the rules are, it’s important to make them your guiding compass when writing rules. If you are prone to forget it, you can make use of the ESLint plugin to enforce it.</p>

<p>I hope you will take all of the lessons learned here in your next React project. Good luck!</p>

<h4 id="resources">Resources</h4>

<ul>
<li>“<a href="https://reactjs.org/docs/hooks-intro.html">Introducing Hooks</a>,” React Docs</li>
<li>“<a href="https://medium.com/@Zwenza/functional-vs-class-components-in-react-231e3fbd7108">Functional vs Class-Components In React</a>,” David Jöch, Medium</li>
<li>“<a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html">Mixins Considered Harmful</a>,” Dan Abramov, React Blog</li>
<li>“<a href="https://medium.com/@bryanmanuele/react-hooks-best-practices-a-shift-in-mindset-8fd0e58e4b0b">React Hooks: Best Practices And A Shift In Mindset</a>,” Bryan Manuele, Medium</li>
<li>“<a href="https://marketplace.visualstudio.com/items?itemName=antmdvs.vscode-react-hooks-snippets">React Hooks Snippets For VS Code</a>,” Anthony Davis, Visual Code Marketplace</li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ks, ra, yk, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Anna Prenzel</author><title>How To Create A Particle Trail Animation In JavaScript</title><link>https://www.smashingmagazine.com/2020/04/particle-trail-animation-javascript/</link><pubDate>Tue, 14 Apr 2020 11:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/particle-trail-animation-javascript/</guid><description>Have you ever thought about distracting visitors of your website with a fancy, glittering particle animation for a few moments, while some data is loaded in the background? Fortunately, it’s not necessary to go very deep into graphics programming with 3D libraries like three.js. All you need instead is some basic knowledge of CSS and JavaScript and a lightweight animation library such as anime.js. In the end, we should have the following result:</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/particle-trail-animation-javascript/" />
              <title>How To Create A Particle Trail Animation In JavaScript</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>How To Create A Particle Trail Animation In JavaScript</h1>
                  
                    
                    <address>Anna Prenzel</address>
                  
                  <time datetime="2020-04-14T11:00:00&#43;00:00" class="op-published">2020-04-14T11:00:00+00:00</time>
                  <time datetime="2020-04-14T11:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                <p>Have you ever thought about distracting visitors of your website with a fancy, glittering particle animation for a few moments, while some data is loaded in the background? Fortunately, it’s not necessary to go very deep into graphics programming with 3D libraries like three.js. All you need instead is some basic knowledge of CSS and JavaScript and a lightweight animation library such as anime.js. In the end, we should have the following <a href="https://codepen.io/blaustern_fotografie/pen/vYEwwqx">result</a>:</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4df8668-e60b-4767-9452-3f641c90dbd0/4-partical-trail-animation-javascript.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4df8668-e60b-4767-9452-3f641c90dbd0/4-partical-trail-animation-javascript.gif" width="791" height="605" alt="" /></a><figcaption>A spiral shaped particle trail animation</figcaption></figure>

<h3>Download And Integration Of Anime.js</h3>

<p>You can download the anime.js library from the <a href="https://github.com/juliangarnier/anime/">official GitHub site</a>. Download the file <em>anime.js</em> or <em>anime.min.js</em> from the <a href="https://github.com/juliangarnier/anime/tree/master/lib"><code>lib/</code></a> folder.</p>

<p>In my example, the HTML part looks like this:</p>

<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" &gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;Anime.js Particles&lt;/title&gt;
  &lt;!--or use anime.min.js--&gt;
  &lt;script src="anime.js"&gt;&lt;/script&gt;
  &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="anime-container"&gt;
&lt;/div&gt;
&lt;script src="script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>The CSS file <em>styles.css</em> defines the background color for the page and for the individual particles. The position settings are necessary so that we can later position the particles freely on the page using the CSS properties <code>left</code> and <code>top</code>.</p>

<pre><code class="language-css">body {
 background-color: hsl(30, 3%, 14%);
}
.anime-container {
  position: relative;
}
 
.anime-container .dot{
  position: absolute;
  /*draw particles as circles:*/
  border-radius: 50%;
  background-color: hsl(60, 100%, 80%);
}</code></pre>

<p>The content of the file <em>script.js</em> is covered in the following section.</p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3>Generating The Particles</h3>

<p>As the name suggests, a particle animation consists of many small particles moving in space while following a certain pattern. All particles are generated simultaneously before the animation starts.</p>

<p><em>For the following explanation, the <a href="https://animejs.com/documentation/">official documentation of anime.js</a> will be useful.</em></p>

<p>In my example, the particles are located on an Archimedean spiral. The <code>x</code> and <code>y</code> position of a particle on the screen (aka <code>left</code> and <code>top</code> in CSS) is calculated from its position <code>angle</code> on the spiral:</p>

<pre><code class="language-css">x=a*angle*cos(angle)
y=a*angle*sin⁡(angle)
</code></pre>

<p>The number of angles and thus the length of the spiral is determined by the parameter <code>l</code>. With the parameter <code>a</code>, you can control the density of the spiral.</p>

<div class="break-out">
<pre><code class="language-javascript">var container = document.querySelector(".anime-container");
var n = 15;
var a = 20;
var l = 110;
for (var i = 0; i <= l; i += 1) {
  var angle = 0.1 * i;
  //shift the particles to the center of the window 
  //by adding half of the screen width and screen height
  var x = (a*angle) * Math.cos(angle) + window.innerWidth / 2;
  var y = (a*angle) * Math.sin(angle) + window.innerHeight / 2;
  var dot = document.createElement("div");
  dot.classList.add("dot");
  container.appendChild(dot);
  var size = 5;
  dot.style.width = size + "px";
  dot.style.height = size + "px";
  dot.style.left = x + "px";
  dot.style.top = y + "px";
  dot.style.backgroundColor = "hsl(60, 100%, 80%)";
  }
}</code></pre>
</div>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      First version of our spiral (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45f106a4-57ba-426d-8be9-bdb8f89ab9a3/5-partical-trail-animation-javascript.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>This way, we get a spiral with exactly one particle per position, but a real trail effect can only be achieved if more than one particle is generated at each position. For the trail to look bushy, the positions of the individual particles must be slightly different. The anime-library provides a practical helper function for this:

<pre><code class="language-markup">anime.random(minValue, maxValue);
</code></pre>

<p>The size of the particles also varies randomly:</p>

<div class="break-out">
<pre><code class="language-javascript">for (var i = 0; i <= l; i += 1) {
  var angle = 0.1 * i;
  //shift particles to the center of the window 
  //by adding half of the screen width and screen height
  var x = (a*angle) * Math.cos(angle) + window.innerWidth / 2;
  var y = (a*angle) * Math.sin(angle) + window.innerHeight / 2;
  var n = 15;
  
  //create n particles for each angle
  for (var j = 0; j < n; j++) {
    var dot = document.createElement("div");
    dot.classList.add("dot");
    container.appendChild(dot);
    var size = anime.random(5, 10); 
    dot.style.width = size + "px";
    dot.style.height = size + "px";
    dot.style.left = x + anime.random(-15, 15) + "px";
    dot.style.top = y + anime.random(-15, 15) + "px";
    dot.style.backgroundColor = "hsl(60, 100%, 80%)";
  }
}</code></pre>
</div>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      The spiral with randomly placed particles (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06a78c08-5c54-4ef0-a688-4a218dee3073/3-partical-trail-animation-javascript.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Here you can play around with the intermediate result:</p>

<figure class="break-out">
	<p data-height="500"
	data-theme-id="light"
	data-slug-hash="JjdqBve"
	data-user="smashingmag"
	data-default-tab="result"
	class="codepen">See the Pen [anime js particles wip](https://codepen.io/smashingmag/pen/JjdqBve) by <a href="https://codepen.io/blaustern_fotografie">Anna Prenzel</a>.</p>
	<figcaption>See the Pen <a href="https://codepen.io/smashingmag/pen/JjdqBve">anime js particles wip</a> by <a href="https://codepen.io/blaustern_fotografie">Anna Prenzel</a>.</figcaption>
</figure>

<p>Before the animation starts, all particles have to be invisible. So I will add:</p>

<pre><code class="language-javascript">dot.style.opacity = "0";</code></pre>

<h3>Animation Of The Particles</h3>

<h4>Basic Settings Of The Animation</h4>

<p>The basic settings of my animation are made up as follows:</p>

<ul>
<li>The animation is to be repeated continuously (loop: true),</li>
<li>The easing is linear (but you can try <a href="https://animejs.com/documentation/#linearEasing">different values</a>),</li>
<li>The targets are all elements with the class "dot".</li>
</ul>

<pre><code class="language-javascript">anime({
  loop: true,
  easing: "linear",
  targets: document.querySelectorAll(".dot"),
});</code></pre>

<p>In the next step I will animate various CSS properties of my targets. The basic steps for CSS animation can be found <a href="https://animejs.com/documentation/#cssProperties">in the properties chapter</a> of the anime.js documentation.</p>

<div class="sponsors__lead-place"></div>




<h4>Animation Of Opacity</h4>

<p>This is what our first property animation looks like, in which all particles are slowly made visible within 50ms:</p>

<pre><code class="language-javascript">anime({
  loop: true,
  easing: "linear",
  targets: document.querySelectorAll(".dot"),
  opacity: { value: 1, duration: 50}
});</code></pre> 

<p>And now I will finally reveal the trick that creates a spiral movement of the particles! The idea is to make the particles visible with a certain time delay (e.g. in an interval of 2ms). The particles in the middle of the spiral are made visible at first, followed by all the other particles from inside to outside. The <a href="https://animejs.com/documentation/#staggeringBasics">stagger function</a> of anime.js is perfectly suited for this. In my opinion, staggering is one of the biggest strengths of the library that allows you to achieve great effects.</p>

<pre><code class="language-javascript">opacity: { value: 1, duration: 50, delay: anime.stagger(2) }
</code></pre>

<p>To create the illusion of a flying trail, the particles must start disappearing slowly <em>as soon as they have appeared</em>. Fortunately anime.js provides a <a href="https://animejs.com/documentation/#propertyKeyframes">keyframe notation for properties</a>:</p>

<pre><code class="language-javascript">opacity: [
    { value: 1, duration: 50, delay: anime.stagger(2) },
    { value: 0, duration: 1200}
  ],
</code></pre>

<p>Here you can see the intermediate result:</p>

<figure class="break-out">
	<p data-height="500"
	data-theme-id="light"
	data-slug-hash="ZEGNjjv"
	data-user="smashingmag"
	data-default-tab="result"
	class="codepen">See the Pen [anime js particles wip 2](https://codepen.io/smashingmag/pen/ZEGNjjv) by <a href="https://codepen.io/blaustern_fotografie">Anna Prenzel</a>.</p>
	<figcaption>See the Pen <a href="https://codepen.io/smashingmag/pen/ZEGNjjv">anime js particles wip 2</a> by <a href="https://codepen.io/blaustern_fotografie">Anna Prenzel</a>.</figcaption>
</figure>

<h4>Animation Of Size</h4>

<p>My comet trail should appear larger at the front end than at the back end. For this purpose, I let the particles shrink within 500ms to a diameter of 2px. It is important to choose the same time delay as for the opacity animation, so that each particle starts to shrink only after it has appeared:</p>

<pre><code class="language-javascript">width: { value: 2, duration: 500, delay: anime.stagger(2) },
height: { value: 2, duration: 500, delay: anime.stagger(2) },</code></pre>

<div class="sponsors__lead-place"></div>




<h4>Individual Movement Of The Particles</h4>

<p>The typical thing about a particle animation is the individual, unpredictable behavior of the particles. I finally bring the particles to life with an individual movement in the <code>x</code> and <code>y</code> direction:</p>

<pre><code class="language-javascript">translateX: {
    value: function() {
      return anime.random(-30, 30);
    },
    duration: 1500,
    delay: anime.stagger(2)
  },

translateY: {
    value: function() {
      return anime.random(-30, 30);
    },
    duration: 1500,
    delay: anime.stagger(2)
  }</code></pre>

<p>Again, it is important that the movement starts with the same time delay as the appearance of the particles.</p>

<p>Furthermore, it is absolutely necessary in this case to have <code>functions</code> calculating the values for <code>translateX</code> and <code>translateY</code>. Here we are using the parameters as <a href="https://animejs.com/documentation/#functionBasedParameters">function-based parameters</a> whose values are determined <em>for each target individually</em>. Otherwise all targets would be shifted by the same (albeit randomly determined) amount.</p>

<h3>Final Thoughts</h3>

<p>You can see the final result over here:</p>

<figure class="break-out">
	<p data-height="500"
	data-theme-id="light"
	data-slug-hash="yLNWqRP"
	data-user="smashingmag"
	data-default-tab="result"
	class="codepen">See the Pen [anime js particles](https://codepen.io/smashingmag/pen/yLNWqRP) by <a href="https://codepen.io/blaustern_fotografie">Anna Prenzel</a>.</p>
	<figcaption>See the Pen <a href="https://codepen.io/smashingmag/pen/yLNWqRP">anime js particles</a> by <a href="https://codepen.io/blaustern_fotografie">Anna Prenzel</a>.</figcaption>
</figure>

<p>You can modify the animation to your own taste by simply tweaking all the values. I have a little tip for the final touches: Now that we are familiar with function-based parameters, the opacity animation can be improved a bit:</p>

<div class="break-out">
<pre><code class="language-javascript">opacity: [
    { value: 1, duration: 50, delay: anime.stagger(2) },
    { value: 0, duration: function(){return anime.random(500,1500);}}
],</code></pre>
</div>

<p>The duration before a particle disappears is now set for each particle individually. This makes our animation visually even more sophisticated.</p>

<p>I hope you are now as excited as I am about the possibilities that anime.js offers for particle animations! I recommend a visit to <a href="https://codepen.io/collection/XLebem/">CodePen</a> where you can see many more impressive examples.</p>

<h4><span class="rh">Further Reading</span> on SmashingMag:</h4>

<ul>
<li><a title="Read 'Including Animation In Your Design System'" href="https://www.smashingmagazine.com/2019/02/animation-design-system/" rel="bookmark">Including Animation In Your Design System</a></li>
<li><a title="Read 'HTML5 SVG Fill Animation With CSS3 And Vanilla JavaScript'" href="https://www.smashingmagazine.com/2019/01/html5-svg-fill-animation-css3-vanilla-javascript/" rel="bookmark">HTML5 SVG Fill Animation With CSS3 And Vanilla JavaScript</a></li>
<li><a title="Read 'Introduction To Animation And The iMessage App Store With Shruggie'" href="https://www.smashingmagazine.com/2018/09/animation-imessage-app-store-shruggie/" rel="bookmark">Introduction To Animation And The iMessage App Store With Shruggie</a></li>
<li><a title="Read 'Exploring Animation And Interaction Techniques With WebGL (A Case Study)'" href="https://www.smashingmagazine.com/2017/09/animation-interaction-techniques-webgl/" rel="bookmark">Exploring Animation And Interaction Techniques With WebGL (A Case Study)</a></li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ra, yk, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Andrew Clarke</author><title>Inspired Design Decisions With Herb Lubalin: Typography Can Be As Exciting As Illustration And Photography</title><link>https://www.smashingmagazine.com/2020/04/inspired-design-decisions-herb-lubalin/</link><pubDate>Mon, 13 Apr 2020 10:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/inspired-design-decisions-herb-lubalin/</guid><description>While good use of type helps people to read, great typography can do so much more. Typography can eloquently articulate an idea and colourfully communicate a message in ways which are as powerful as any illustration or photograph.
I’m someone who loves cinema as much as I admire typography. Few things inspire me as much as seeing movie poster typography which either evokes the atmosphere of a film and adds to the telling of its story.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/inspired-design-decisions-herb-lubalin/" />
              <title>Inspired Design Decisions With Herb Lubalin: Typography Can Be As Exciting As Illustration And Photography</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Inspired Design Decisions With Herb Lubalin: Typography Can Be As Exciting As Illustration And Photography</h1>
                  
                    
                    <address>Andrew Clarke</address>
                  
                  <time datetime="2020-04-13T10:00:00&#43;00:00" class="op-published">2020-04-13T10:00:00+00:00</time>
                  <time datetime="2020-04-13T10:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>While good use of type helps people to read, great typography can do so much more. Typography can eloquently articulate an idea and colourfully communicate a message in ways which are as powerful as any illustration or photograph.</p>

<p>I’m someone who loves cinema as much as I admire typography. Few things inspire me as much as seeing movie poster typography which either evokes the atmosphere of a film and adds to the telling of its story.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt="From left: Pulp Fiction by Indika Entertainment Advertising. Once Upon a Time in Hollywood by BLT and Steve Chorney. Vertigo by Saul Bass. West Side Story by Joseph Caroff."
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      From left: Pulp Fiction by Indika Entertainment Advertising. Once Upon a Time in Hollywood by BLT and Steve Chorney. Vertigo by Saul Bass. West Side Story by Joseph Caroff. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26deb4f-437a-42a6-ad5b-ad7c3a9873bb/issue-8-01-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>More recently, typography in Quentin Tarantino’s film posters perfectly reflects the atmosphere and character of his movies. In Pulp Fiction, the title’s Aachen Bold typeface is as hardboiled as the film itself. For Once Upon a Time in Hollywood, although the typesetting of the iconic sign deviates from reality as much as other parts of the film, the poster conjures up the spirit of Hollywood.</p>

<p>Saul Bass is possibly the best-known graphic designer of his era and for 1950s and ’60’s Hollywood he created movie posters which are as recognisable as the sign itself. For his poster design for Hitchcock’s Vertigo in 1958, Bass used hand-cut typography which evokes German expressionist films of the 1920s. In 1960, Bass’s slashed title typography for Pyscho &mdash; again for Alfred Hitchcock &mdash; is both clever and obvious. While Saul Bass is often incorrectly credited with designing one of my favourite film posters from West Side Story, &mdash; Bass did design the title sequence &mdash; the poster was actually designed by Joseph Caroff who also created James Bond’s famous 007 logo.</p>

<p>Although we don’t yet have the same control over typography on the web as we do in print, new file formats, font delivery services, and web fonts have meant far more typographic flexibility than we had ten years ago. Typography controls in CSS have helped us be more creative with type too. On top of basic font style properties, we can now reliably fine-tune OpenType figures, hyphenation, ligatures, and even kerning.</p>

<p>It’s rare to find such creative uses for type online, studying the work of graphic designers and talented typographers can open our eyes to what we can achieve using today’s type technologies. One of my personal favourite designers and typographers is Herb Lubalin, and learning about him and his work has transformed my own approach to typography.</p>

<h4 id="read-more-from-the-series">Read More From The Series</h4>

<ul>
<li><a href="https://www.smashingmagazine.com/2019/06/inspired-design-decisions-avaunt-magazine/">Inspired Design Decisions: Avaunt Magazine</a></li>
<li><a href="https://www.smashingmagazine.com/2019/07/inspired-design-decisions-pressing-matters/">Inspired Design Decisions: Pressing Matters</a></li>
<li><a href="https://www.smashingmagazine.com/2019/08/inspired-design-decisions-ernest-journal">Inspired Design Decisions: Ernest Journal</a></li>
<li><a href="https://www.smashingmagazine.com/2019/09/inspired-design-decisions-alexey-brodovitch/">Inspired Design Decisions: Alexey Brodovitch</a></li>
<li><a href="https://www.smashingmagazine.com/2019/10/inspired-design-decisions-bea-feitler/">Inspired Design Decisions: Bea Feitler</a></li>
<li><a href="https://www.smashingmagazine.com/2020/03/inspired-design-decisions-neville-brody/">Inspired Design Decisions: Neville Brody</a></li>
<li><a href="https://www.smashingmagazine.com/2020/03/inspired-design-decisions-otto-storch/">Inspired Design Decisions: Otto Storch</a></li>
</ul>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="inspired-by-herb-lubalin">Inspired By Herb Lubalin</h3>

<p>Herb Lubalin was an American graphic designer who spent his career designing everything from advertising, posters, and even postage stamps. He was fascinated by the look of words and how typographic design can make them sound. Lubalin understood how by combining art, copy, and typography, graphic designers add conviction when communicating messages. He said:</p>

<blockquote>“The better people communicate, the greater will be the need for better typography-expressive typography.”<br /><br />&mdash; Herb Lubalin</blockquote>

<p>Having narrowly passed the entrance exam to the Cooper Union art school in New York, Herbert (Herb) Lubalin was fired from his first job as a graphic artist for asking for a $2 per week raise. In pre-war American advertising agencies, the job of a layout artist was simply to place headlines, copy, and images into available space, but that changed after WW2 with an influx of immigrant designers from Europe. They included Austrian Herbert Bayer, Russian Mehemed Fehmy Agha, and Belarusian Alexey Brodovitch.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      U&lc (Uppercase and lowercase) magazine by Herb Lubalin. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62e78c71-b7e7-4443-8659-c77273d3b2d5/issue-8-02-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>These designers imported new processes which brought art directors, layout artists, and writers together to form the creative teams made popular by the famous advertising creative director Bill Bernbach in the 1960s and 1970s.</p>

<p>In 1945, Lubalin became art director at Sudler &amp; Hennessey &mdash; a creative studio which specialised in the pharmaceutical industry &mdash; where he led a team of designers, illustrators, and photographers. The process which Lubalin established first at Sudler &amp; Hennessey and from 1964 in his own studio is fascinating. He drove the design process by making “tissues” &mdash; pen and ink sketches which established the spacial arrangement of its elements &mdash; and detailed notes on typographic designs including typeface choices, sizes, and weights.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Fact magazine by Herb Lubalin. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93280e2d-b6f3-4ccc-bca1-779d7cc5c583/issue-8-03-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>At the start of any new project, Lubalin began by sketching arrangements of headlines, copy, and images onto tissue paper. Then, he’d lay another tissue on top to refine his ideas, then another, and another, to rapidly develop his design. After his assistants recovered discarded tissues from the floor or trash, they became collectors’ items.</p>

<p>Lubalin was an obsessive perfectionist about typography. For “Let’s talk type” &mdash; a trade advertisement for Sudler &amp; Hennessey &mdash; Lubalin precisely placed the only paragraph. This copy sits perfectly on the baseline alongside the word “let” and its size and leading allow for the descender from the letter “y” above.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      From left: Trade press advertisement. The fourth of July means picnics… Announcement of Avant Garde’s anti-war poster competition by Herb Lubalin. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/501f6e4a-447b-49cd-9fa2-91297098a3aa/issue-8-04-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Lubalin was equally as precise about the placement of text in a poster which announced the Avant Garde anti-war poster competition. He would frequently take a scalpel blade to type, adjusting the spacing between letters and altering the height of ascenders and descenders to fit his designs. Letters in the headline for “No More War” are precisely sized and aligned. The tracking of the uppercase blue standfirst creates a block of copy which perfectly fits into its space.</p>

<p>In “The fourth of July means picnics…” Lubalin used perspective to represent the road ahead. This meant considering the tracking of every line of text, sometimes altering words to fit the design. Working with Lubalin’s designs wasn’t easy, and as one of his assistants later described:</p>

<blockquote>“To make everything line up, you’ve got to do it over and over again, and then, if the client alters the text, you’ve got to redo the whole thing. To him (Lubalin,) it was worth it. How long it took or how much it cost wasn’t as important to him as it was to other designers.”</blockquote>

<p>Because of his relentless conviction as well as his talent, Lubalin went on to become one of the most celebrated graphic designers and typographers of the twentieth century. There’s plenty we can learn from how he approached his work and his conviction that design can compellingly communicate.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Various designs by Herb Lubalin. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a9fde76-1023-4de1-92b8-1f071d29332a/issue-8-05-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>There are two books on Herb Lubalin and his work you should add to your collection. “Herb Lubalin: Art Director, Graphic Designer and Typographer” (1985) by Gertrude Snyder and Alan Peckolick is out of print, but good copies are available on eBay. Better still is “Herb Lubalin: American Graphic Designer” (2013) by Adrian Shaughnessy and published by Unit Editions. A limited edition of 2000, Shaughnessy’s book features hundreds of examples of Lubalin’s work.</p>

<h3 id="pre-formatting-headlines">Pre-Formatting Headlines</h3>

<p>Headlines are a perfect place to begin being more adventurous with type. Expressive typography needn’t need fancy fonts. You can create an eye-catching headline by using different styles and weights found within many everyday font families. Look for extended families like Montserrat &mdash; designed by Julieta Ulanovsky and available on Google Fonts &mdash; with its variety of weights ranging from thin and light, to extra-bold, and even black.</p>

<p>For this first Herb Lubalin inspired design, my headline uses black and light weights from this sans-serif typeface. Negative tracking (letter-spacing) and tight leading (line-height) combine to create a block of type which demands attention.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Black and light weights, negative tracking and tight leading. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75c00b26-5e5c-4de7-8e0f-2558e43400c5/issue-8-06-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>In the past, developing headlines like this involved hard-coding the design into your HTML by adding breaks between individual words, like this:</p>

<pre><code class="language-html">&lt;h1&gt;&lt;strong&gt;UK&#8217;s &lt;br&gt;
best-&lt;br&gt;
selling &lt;br&gt;
car&lt;/strong&gt; &lt;br&gt;
during &lt;br&gt;
the &lt;br&gt;
1970s&lt;/h1&gt;</code></pre>

<p>Other times, you might use wrap each word with an inline span element and then change its display property to block:</p>

<pre><code class="language-html">&lt;h1&gt;&lt;strong&gt;&lt;span&gt;UK&#8217;s&lt;/span&gt;
&lt;span&gt;best-&lt;/span&gt;
&lt;span&gt;selling&lt;/span&gt;
&lt;span&gt;car&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;during&lt;/span&gt;
&lt;span&gt;the&lt;/span&gt;
&lt;span&gt;1970s&lt;/span&gt;&lt;/h1&gt;</code></pre>

<p>Instead of these presentational elements, I add explicit line breaks in my HTML:</p>

<pre><code class="language-html">&lt;h1&gt;&lt;strong&gt;UK&#8217;s 
best-
selling
car&lt;/strong&gt;
during
the
1970s&lt;/h1&gt;</code></pre>

<p>Browsers ignore anything more than a single space between words, so on small viewports, this headline reads like a sentence. I only need foundation styles which style its colours, size, and weights, as well as the negative tracking and tight leading which makes this headline distinctive:</p>

<pre><code class="language-css">h1 {
font-size: 6vmax;
font-weight: 300;
line-height: .75;
letter-spacing: -.05em;
text-transform: uppercase;
color: #fff; }

h1 strong {
font-weight: 600;
color: #bd1f3a; }</code></pre>

<p>Whereas HTML’s pre element respects pre-formatted text and presents it exactly as written in a document, the CSS white-space property enables similar results without sacrificing semantics. Of the six available white-space values, these are the four I use these most often:</p>

<ol>
<li><code>white-space: normal;</code><br />
Text fills line-boxes and breaks as required</li>
<li><code>white-space: nowrap;</code><br />
The text won’t wrap, and it may overflow its container</li>
<li><code>white-space: pre;</code><br />
Explicit line-breaks are respected, text breaks with new lines and br elements</li>
<li><code>white-space: pre-wrap;</code><br />
White-space is respected, but the text will also wrap to fill line-boxes</li>
</ol>

<p>I only need the effects of the <code>white-space</code> property on larger viewports, so I isolate it with a media query:</p>

<pre><code class="language-css">@media (min-width: 64em) {

h1 {
white-space: pre; }
}</code></pre>

<p>Using several styles from one font family adds visual interest. My Lubalin-inspired design incorporates light, bold, and black weights, plus condensed and regular styles of this sans-serif typeface to produce a variety of text-treatments.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Several paragraph styles from one font family adds visual interest. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc5c5053-18df-41a9-96d6-5328626dd321/issue-8-07-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>First, I need two structural elements to accomplish my design, main and aside:</p>

<pre><code class="language-html">&lt;main&gt;…&lt;/main&gt;
&lt;aside&gt;…&lt;/aside&gt;</code></pre>

<p>While the main element includes my headline and running text, the aside contains four images in a division and five articles about versions of the classic Cortina:</p>

<div class="break-out">
<pre><code class="language-html">&lt;aside&gt;
&lt;div&gt;
&lt;img src="img-1.svg" alt="Ford Cortina Mark 1 front profile"&gt;
&lt;img src="img-2.svg" alt="Ford Cortina Mark 3 rear"&gt;
&lt;img src="img-3.svg" alt="Ford Cortina Mark 4 front"&gt;
&lt;img src="img-4.svg" alt="Ford Cortina Mark 5 rear profile"&gt;
&lt;/div&gt;

&lt;article&gt;…&lt;/article&gt;
&lt;article&gt;…&lt;/article&gt;
&lt;article&gt;…&lt;/article&gt;
&lt;article&gt;…&lt;/article&gt;
&lt;article&gt;…&lt;/article&gt;
&lt;/aside&gt;</code></pre>
</div>

<p>First, I specify the styles of paragraphs in each of my articles using pseudo-class selectors. Each paragraph uses a different combination of font styles and weights, with mixed-case and uppercase letters:</p>

<pre><code class="language-css">article:nth-of-type(1) p {
font-family: 'light';
text-transform: uppercase; }

article:nth-of-type(2) p {
font-family: 'bold-condensed';
font-weight: 600;
text-transform: uppercase; }

article:nth-of-type(3) p {
font-family: 'bold-condensed';
font-weight: 600; }

article:nth-of-type(4) p {
font-family: 'light';
text-transform: uppercase; }

article:nth-of-type(5) p {
font-family: 'bold-condensed';
font-weight: 600; }</code></pre>

<p>With those foundation styles in place for every screen size, I introduce layout to the aside element which will be visible on for medium-size screens. For layouts like this, where elements don’t overlap, I often grid-template-areas for their simplicity. This design has nine grid areas. While I could give these areas names which describe the content I’ll place into them &mdash; for example, “mark-1” &mdash; instead I use letters which makes moving items around my grid a little easier:</p>

<pre><code class="language-css">@media (min-width: 48em) {

aside {
display: grid;
grid-template-areas: 
"a b c"
"d e f"
"g h i";
grid-gap: 1.5rem; }
}</code></pre>

<p>I need to place the four images into my template areas, and not the division which contains them. I change the display property of that element to contents, which effectively removes it from the DOM for styling purposes:</p>

<pre><code class="language-css">aside div {
display: contents; }</code></pre>

<p>I place those images using area names. Moving them into another area only involves referencing a different area name and no change to their order in my HTML:</p>

<pre><code class="language-css">aside img:nth-of-type(1) {
grid-area: a; }

aside img:nth-of-type(2) {
grid-area: e; }

aside img:nth-of-type(3) {
grid-area: g; }

aside img:nth-of-type(4) {
grid-area: i; }</code></pre>

<p>Then, I place articles into the five remaining areas to complete my layout:</p>

<pre><code class="language-css">aside article:nth-of-type(1) {
grid-area: b; }

aside article:nth-of-type(2) {
grid-area: c; }

aside article:nth-of-type(3) {
grid-area: d; }

aside article:nth-of-type(4) {
grid-area: f; }

aside article:nth-of-type(5) {
grid-area: h; }</code></pre>

<p>On small and medium-size screens, the main and aside elements stack vertically in the order they appear in my HTML. The extra space available in larger viewports allows me to place them side-by-side so visual weight is balanced across both sides of a screen. First, I apply a five-column symmetrical grid to the body element:</p>

<pre><code class="language-css">@media (min-width: 64em) {

body {
display: grid;
grid-template-columns: repeat(5, 1fr); }
}</code></pre>

<p>Then, I place both main and aside elements using line numbers. This creates an asymmetrical design with a column of white space between my main content and the articles which support it:</p>

<pre><code class="language-css">main {
grid-column: 1; }

aside {
grid-column: 3 / -1; }
}</code></pre>

<div class="sponsors__lead-place"></div>




<h3 id="reordering-and-rotating">Reordering And Rotating</h3>

<p>CSS Grid is now the best tool to use for implementing inspired layouts, and its powerful properties are also useful for developing intricate typographic designs.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Left: Castrated. Book jacket designed by Herb Lubalin. Right: Intricate header design developed using CSS Grid and Flexbox. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0052683-4a22-48ce-9871-a7a2752383ca/issue-8-08-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>My header contains a headline followed by two paragraphs and their order in HTML means they make sense when read without any styling applied:</p>

<pre><code class="language-html">&lt;header&gt;
&lt;h1&gt;Cortina&lt;/h1&gt;
&lt;p&gt;UK&#8217;s best-selling car&lt;/p&gt;
&lt;p&gt;From &lt;span&gt;1962&#8211;1983&lt;/span&gt;&lt;/p&gt;
&lt;/header&gt;</code></pre>

<p>To begin this design, I add foundation styles for both elements, setting their alignment, colours, and sizes:</p>

<pre><code class="language-css">header h1,
header p {
margin: 0;
text-align: center; }

header h1 {
font-size: 10vmax;
color: #ebc76a;
line-height: 1; }

header p {
font-size: 4vmax;
line-height: 1.1;
text-transform: uppercase; }</code></pre>

<p>I ordered my HTML for a semantic sentence structure, rather than any visual presentation, so to allow me to reorder the elements visually, I add Flexbox properties to my header and a flex-direction value of column:</p>

<pre><code class="language-css">header {
display: flex;
flex-direction: column; }</code></pre>

<p>By default, elements appear in the order they occur in HTML, but in my design, the last paragraph in this header appears first, above the headline.</p>

<p>The default order value for all elements is 0, so to change the position of this paragraph without altering my HTML, I add a negative value of -1, which places it at the top:</p>

<pre><code class="language-css">header p:last-of-type {
order: -1; }</code></pre>

<p>My design for medium-size screens includes two large bands of background colours, developed using a CSS gradient. So next, I change the foreground colours of my headline and paragraphs to contrast them against this new background:</p>

<pre><code class="language-css">@media (min-width: 48em) {

body {
background-image: linear-gradient(to right, 
#0a0a08 0%, 
#0a0a08 50%, 
#fff 50%, 
#fff 100%); }

header h1 {
color: #fff; }

header p {
color: #ebc76a; }
}</code></pre>

<p>The unusual alignment of the three elements in this header is possible by combining CSS Grid with Flexbox. Although it might not be obvious at first, I place the headline and paragraphs in this header onto a four-column symmetrical grid. Leaving one column in the first and last rows empty creates a dynamic diagonal which adds interest to this header:</p>

<pre><code class="language-css">@media (min-width: 64em) {

header {
display: grid;
grid-template-columns: repeat(4, 1fr);
align-items: start;
padding-top: 0; }
}</code></pre>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      A dynamic diagonal which adds interest to this header. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc45ea0d-c5e1-4f1a-b438-d4d617cdf73d/issue-8-09-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>My headline spreads across all four columns:</p>

<pre><code class="language-css">header h1 {
grid-column: 1 / -1; }</code></pre>

<p>While the first &mdash; which appears at the bottom of my header &mdash; leave the first column empty:</p>

<pre><code class="language-css">header p:first-of-type {
grid-column: 2 / -1; }</code></pre>

<p>The final paragraph—now placed at the top of the header &mdash; spans the first three columns, leaving a space on the left:</p>

<pre><code class="language-css">header p:last-of-type {
grid-column: 1 / 4; }</code></pre>

<p>It’s unusual to see rotated text elements on the web, but when you do, they’re often memorable and always a nice a surprise. I want my headline rotated anti-clockwise, so I add a transform which rotates it negatively by 30 degrees and moves it vertically down by 150px:</p>

<pre><code class="language-css">header {
transform: rotate(-30deg) translateY(150px);
transform-origin: 0 100%; }</code></pre>

<p><code>transform-origin</code> specifies the point around which transforms happen. You can choose an origin in the centre or any of the four corners of an element &mdash; <code>top-left (0 0)</code>, <code>top-right (100% 0)</code>, <code>bottom-right (100% 100%)</code> or <code>bottom-left (0 100%)</code>. You might also specify an origin in pixels, em, or rem units.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      The results of 50% 50%, 0 0, 100% 0, 100% 100%, and 0 100% transform-origin values. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4a35a0ff-9b9a-43c4-9452-0300ca2c2022/issue-8-10-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>For an extra element of surprise, I add a subtle transition to that transform and reduce the amount of rotation when someone passes their cursor over my headline:</p>

<pre><code class="language-css">header {
transition: transform .5s ease-in; }

header:hover {
transform: rotate(-25deg) translateY(150px); }</code></pre>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      CSS Grid is now the best tool to use for implementing inspired layouts. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/164229e6-3487-49d8-809d-ede009318a92/issue-8-11-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h3 id="combining-header-elements">Combining Header Elements</h3>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Left: Graphis Annual Report. Center: American Showcase references USA flag. Right: My design references the United Kingdom’s Union flag. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1f1c0b2-14e2-4151-9036-b6eb0e1be600/issue-8-12-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>In my next Lubalin-inspired design, I combine an ordered list of Cortina models with a multi-coloured headline to make a powerful statement with this header:</p>

<pre><code class="language-html">&lt;header&gt;
&lt;div&gt;
&lt;h1&gt;…&lt;/h1&gt;
&lt;ol&gt;…&lt;/ol&gt;
&lt;/div&gt;
&lt;/header&gt;</code></pre>

<p>This headline includes three lines of text. Whereas I previously avoided using additional elements, to style these lines differently I need three inline span elements:</p>

<pre><code class="language-html">&lt;h1&gt;
&lt;span&gt;Best&lt;/span&gt;
&lt;span&gt;Selling&lt;/span&gt;
&lt;span&gt;Cortina&lt;/span&gt;
&lt;/h1&gt;</code></pre>

<p>The most semantic choice to mark up my list of Cortina models and the years during which they were manufactured, is an ordered list. To strongly emphasise each model name, I enclose them within strong elements, which deliver semantic value as well as a bold appearance from default browser styles:</p>

<pre><code class="language-html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Mark I&lt;/strong&gt; 1962–1966&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mark II&lt;/strong&gt; 1966–1970&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mark III&lt;/strong&gt; 1970–1976&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mark IV&lt;/strong&gt; 1976–1979&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mark V&lt;/strong&gt; 1979–1983&lt;/li&gt;
&lt;/ol&gt;</code></pre>

<p>For small viewports, I need only a few foundation styles. The large font size and minimal leading create a solid block of text. Then, I change the span element’s display value from inline to block and use pseudo-class selectors to change the foreground colours of the first and third lines:</p>

<pre><code class="language-css">h1 {
font-size: 18vmin;
line-height: .9;
color: #fff; }

h1 span {
display: block; }

h1 span:nth-of-type(1) {
color: #ba0e37; }

h1 span:nth-of-type(3) {
color: #31609e; }</code></pre>

<p>I want items in my ordered list to form a two-column symmetrical grid where each column occupies an equal amount of available space:</p>

<pre><code class="language-css">ol {
list-style-type: none;
display: grid;
grid-template-columns: 1fr 1fr; }</code></pre>

<p>Then, I tighten the items’ leading and add a solid blue border to the bottom of all but the last list-item:</p>

<pre><code class="language-css">li {
display: inline-block;
line-height: 1.2; }

li:not(:last-of-type) {
border-bottom: 1px solid #31609e; }</code></pre>

<p>Conveniently, there’s no need to specify column or row numbers for each list-item because CSS Grid arranges them automatically because of normal flow. To add greater emphasis, I change the strong elements’ display values to block and set them in uppercase:</p>

<pre><code class="language-css">li strong {
display: block;
font-size: 1.266rem;
font-weight: 600;
text-transform: uppercase; }</code></pre>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      A multi-coloured headline combined with an ordered list of Cortina models. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/607bfc8f-1c4c-4c06-8cb5-ff12734caf50/issue-8-13-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Centring an element both horizontally and vertically used to be tricky, but thankfully, Flexbox has made this alignment trivial to implement. Flexbox has two axes &mdash; main axis and cross axis &mdash; which change direction if you change the default flex-direction value from a row.</p>

<p>The flex-direction of my header remains row, so I align-items centre on the cross axis (vertical,) then justify-content centre along the main axis (horizontal:)</p>

<pre><code class="language-css">@media (min-width: 48em) {

header {
display: flex;
align-items: center;
justify-content: center; }
}</code></pre>

<p>With content now entered in the header, I apply a grid which contains three columns and two rows. Their dimensions will be defined by their content and will resize automatically:</p>

<pre><code class="language-css">header > div {
display: grid; 
grid-template-columns: repeat(3, min-content);
grid-template-rows: auto auto; }</code></pre>

<p>The three multi-coloured lines in the headline are the foundation for this header design. I want to place them into specific columns and rows in this grid, so I add <code>display: contents;</code> to the headline:</p>

<pre><code class="language-css">h1 {
display: contents; }</code></pre>

<p>Then, I place that multi-coloured text into columns and rows using line numbers:</p>

<pre><code class="language-css">h1 span:nth-of-type(1) {
grid-column: 1;
grid-row: 2; }

h1 span:nth-of-type(2) {
grid-column: 2;
grid-row: 1 / 3; }

h1 span:nth-of-type(3) {
grid-column: 3;
grid-row: 1 / 3; }</code></pre>

<p>I want the text in my header to appear vertical, so I rotate each span clockwise by 180 degrees, then change their writing-mode to vertical left–right:</p>

<pre><code class="language-css">h1 span {
transform: rotate(180deg); 
writing-mode: vertical-lr; }</code></pre>

<p>The headline and ordered list in my design form a solid block. To pack these elements tightly together, I change the list’s display property from grid to block. Then, I align content in each list-item to the right, so they sit on my headline’s baseline:</p>

<pre><code class="language-css">ol {
display: block; }

li {
text-align: right; }</code></pre>

<div class="sponsors__lead-place"></div>




<h3 id="svg-and-text">SVG And Text</h3>

<p>It’s taken me a long time to appreciate SVG and to become familiar with how to get the best value from it, and I’m still learning. SVG is capable of producing far more than basic shapes, and one of its most exciting features is the text element.</p>

<p>Like HTML text, SVG text is accessible and selectable. It’s also infinitely styleable by using clipping paths, fills including gradients, filters, masks, and strokes. Adding text to SVG is just like including it in HTML, using the text element. Only content inside these text elements is rendered by browsers, and they ignore anything outside them. You can add as many text elements as you need, but my next headline needs only one:</p>

<pre><code class="language-html">&lt;svg&gt;
&lt;text&gt;’70’s best-selling Cortina British car&lt;/text&gt;
&lt;/svg&gt;</code></pre>

<p>SVG includes a set of properties and attribute values which can be applied to text. Many SVG properties &mdash; like letter and word spacing, and text-decoration &mdash; are also in CSS. But it’s styling features unique to SVG which help to make SVG text so appealing.</p>

<p>For example, <code>textLength</code> sets the width of rendered text, which will shrink and stretch to fill the space depending on the lengthAdjust value you choose.</p>

<ul>
<li><code>textLength</code><br />
The text will be scaled to fit. Set textLength in percentages or use any numerical values. I prefer to use text-based units, em or rem.</li>
<li><code>lengthAdjust</code><br />
Defines how the text will be compressed or stretched to fit the width defined in the textLength attribute.</li>
</ul>

<p>When used directly on a text element, SVG properties act the same as inline styles:</p>

<div class="break-out">
<pre><code class="language-html">&lt;svg&gt;
&lt;text textLength="400"&gt;’70’s best-selling Cortina British car&lt;/text&gt;
&lt;/svg&gt;</code></pre>
</div>

<p>But just as with inline styles, the best value is achieved by styling SVG elements using CSS, whether in an external stylesheet or embedded in HTML. You can even use a style element in an external SVG file or a block of SVG included alongside HTML:</p>

<div class="break-out">
<pre><code class="language-css">&lt;svg&gt;
&lt;text class="display"&gt;’70’s best-selling Cortina British car&lt;/text&gt;
&lt;/svg&gt;

&lt;style&gt;
.display {
font-size: 100px;
font-family: 'black-extended';
font-weight: 600;
letter-spacing: -1px;
text-anchor: middle;
text-transform: uppercase; }
&lt;/style&gt;</code></pre>
</div>

<p>HTML has its span element and SVG includes a similar element which is useful for separating text into smaller elements so they can be styled uniquely. For this headline, I divide the content of the text element between six <code>tspan</code> elements:</p>

<pre><code class="language-html">&lt;text&gt;
&lt;tspan&gt;’70’s&lt;/tspan&gt;
&lt;tspan&gt;best-&lt;/tspan&gt;
&lt;tspan&gt;selling&lt;/tspan&gt;
&lt;tspan&gt;Cortina&lt;/tspan&gt;
&lt;tspan&gt;British&lt;/tspan&gt;
&lt;tspan&gt;car&lt;/tspan&gt;
&lt;/text&gt;</code></pre>

<p>By splitting my headline into multiple elements, I’m able to style each individual word. I can even position them precisely within my SVG, according to the baseline or even relative to each other.</p>

<ul>
<li><code>x</code> is the horizontal starting point for the text baseline;</li>
<li><code>y</code> is the vertical starting point for the text baseline;</li>
<li><code>dx</code> shifts text horizontally from a previous element;</li>
<li><code>dy</code> shifts text vertically from an earlier element.</li>
</ul>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png"
			sizes="70vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9822db90-287c-4e7d-8cd6-cb762a4747d6/issue-8-14-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>For my headline, I position the first tspan element 80px from the top, then each subsequent element appears 80px below it:</p>

<pre><code class="language-html">&lt;text&gt;
&lt;tspan y="80"&gt;&#8217;70&#8217;s&lt;/tspan&gt;
&lt;tspan dy="80"&gt;best-&lt;/tspan&gt;
&lt;tspan dy="80"&gt;selling&lt;/tspan&gt;
&lt;tspan dy="80"&gt;Cortina&lt;/tspan&gt;
&lt;tspan dy="80"&gt;British&lt;/tspan&gt;
&lt;tspan dy="80"&gt;car&lt;/tspan&gt;
&lt;/text&gt;</code></pre>

<p><code>tspan</code> elements are useful for precise positioning and individual styling, but they’re not without accessibility concerns. Assistive technology pronounce tspan elements as individual words and even spell them when a <code>tspan</code> wraps a single letter. For example, a screen reader will pronounce this series of <code>tspan</code> elements:</p>

<pre><code class="language-html">&lt;tspan&gt;C&lt;/tspan&gt;
&lt;tspan&gt;o&lt;/tspan&gt;
&lt;tspan&gt;r&lt;/tspan&gt;
&lt;tspan&gt;t&lt;/tspan&gt;
&lt;tspan&gt;i&lt;/tspan&gt;
&lt;tspan&gt;n&lt;/tspan&gt;
&lt;tspan&gt;a&lt;/tspan&gt;</code></pre>

<p>As:</p>

<p>“C”, “o”, “r”, “t”, “i”, “n”, “a”</p>

<p>We shouldn’t inconvenience people who use assistive technology or worse make our content inaccessible because of our styling choices. So avoid using <code>tspan</code> unnecessary and never for single letters.</p>

<h3 id="stroking-text-with-css-and-svg">Stroking Text With CSS And SVG</h3>

<p>Adding a stroke often helps legibility when text is placed in front of a background image, and it can also make subtle and striking results. You won’t find an official way to stroke text in any CSS specification. But there is an experimental property which uses a Webkit vendor prefix and is widely supported by contemporary browsers.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png"
			sizes="70vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e92798d-2af9-4f86-950a-4e46d35c1b83/issue-8-15-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p><code>text-stroke</code> is shorthand for two properties: <code>text-stroke-color</code> and <code>text-stroke-width</code>. For my stroked headline, I first set foundation typography styles for <code>family</code>, <code>size</code>, and <code>weight</code>, then adjust the leading and tracking:</p>

<pre><code class="language-css">h1 {
font-size: 100px;
font-family: 'black-extended';
font-weight: 600;
letter-spacing: -6px;
line-height: .8;
color: #fff; }</code></pre>

<p>Then I apply <code>text-stroke</code> and add the <code>text-fill-color property</code> with a value of <code>transparent</code> which overrides the white foreground colour:</p>

<pre><code class="language-css">h1 {
/* -webkit-text-stroke-color: #fff; */
/* -webkit-text-stroke-width: 5px; */
-webkit-text-stroke: 5px #fff;
-webkit-text-fill-color: transparent; }</code></pre>

<p>Although <code>text-stroke</code> is an experimental property and not in a W3C specification, now that browsers have implemented it, there’s little chance of it being removed. But if you’re still concerned about supporting a legacy browser, consider using a feature query to test for <code>text-stroke</code> support and provide an appropriate fallback for them.</p>

<p>SVG has <code>stroke</code> properties too, plus a few options which aren’t available in CSS. If you need more options and the widest browser support, SVG is the answer. My SVG header includes six <code>tspan</code> elements:</p>

<pre><code class="language-html">&lt;svg&gt;
&lt;text&gt;
&lt;tspan&gt;’70’s&lt;/tspan&gt;
&lt;tspan&gt;best-&lt;/tspan&gt;
&lt;tspan&gt;selling&lt;/tspan&gt;
&lt;tspan&gt;Cortina&lt;/tspan&gt;
&lt;tspan&gt;British&lt;/tspan&gt;
&lt;tspan&gt;car&lt;/tspan&gt;
&lt;/text&gt;
&lt;/svg&gt;</code></pre>

<p>On top of foundation typography styles, I add the equivalent SVG properties for <code>text-stroke-color</code> and <code>text-stroke-width</code>. I also reduce the opacity of my stroke, which is an option unavailable in CSS:</p>

<pre><code class="language-css">text {
stroke: #fff;
stroke-width: 1.5px;
stroke-opacity=".8"; }</code></pre>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      SVG stroke-dasharray adds a border style not possible using CSS alone. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228c7184-26df-4dca-8372-9310da55bdbd/issue-8-16-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>SVG includes other properties which fine-tune aspects of a stroke. Unlike CSS, SVG strokes can be dashed using the stroke-dasharray property. Alternate values define filled areas and blank areas, so the dashes around my headline text are one unit filled, then ten units blank:</p>

<pre><code class="language-css">text {
stroke-dasharray: 1, 10; }</code></pre>

<p>Should you need more complex patterns, add extra numbers to the pattern, so a stroke-dasharray value of 1, 10, 1 results in a dashed stroke which is 1 (filled,) 10 (blank,) 1 (filled,) 1 (blank,) 10 (filled,) 1 (blank,) and repeats.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      My large-screen design, inspired by Herb Lubalin. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/90daef5e-333f-40c7-b830-e85de4bc9aa0/issue-8-17-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      stroke-linecap defines how ends of lines appear in SVG. Left: butt. Middle: round. Right: square. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365ac905-bd46-4a7e-8de0-e7150e0d0bd6/issue-8-18-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      stroke-linejoin defines how lines join in SVG. Left: bevel. Middle: round. Right: miter. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c67c8741-2ccc-4122-898b-992daab19009/issue-8-19-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h4 id="optimize-svg-accessibility">Optimize SVG Accessibility</h4>

<p>CSS typography controls are now more powerful than ever, but there are occasions when a design calls for more than styled HTML text. Image replacement techniques have fallen out of fashion, but SVG &mdash; whether in an external file or inline within HTML &mdash; can deliver scalable text effects. SVG can also be useful for overall performance when optimised well and can be made accessible.</p>

<p>This header contains two typefaces. One is Magehand, a decorative retro-style script by Indonesian type designer Arief Setyo Wahyudi. The other is Mokoko, a slab serif by London-based Dalton Maag which is available in seven weights from thin to black.</p>

<p>Embedding these two fonts in both Web Open Font Format (WOFF) and WOFF2 formats would add over 150kb to my page. Whereas, by converting these fonts to outlines in a graphics editor and delivering the header as an optimised SVG image would add only 17kb.</p>

<p>The SVG image in my header contains three paths:</p>

<pre><code class="language-svg">&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path id="top"&gt;…&lt;/path&gt;
&lt;path id="bottom"&gt;…&lt;/path&gt;
&lt;path id="middle"&gt;…&lt;/path&gt;
&lt;/svg&gt;</code></pre>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bdbb90-6dff-4faa-8d12-72b36cd55284/issue-8-20-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>The order of these paths matters, because just as in HTML, elements are stacked in the order they’re written. SVG includes a set of properties and attribute values which can be applied to any element. I use the fill property to colour each path in my header:</p>

<pre><code class="language-css">&lt;path fill="#bd1f3a"&gt;…&lt;/path&gt;
&lt;path fill="#31609e"&gt;…&lt;/path&gt;
&lt;path fill="#fff"&gt;…&lt;/path&gt;</code></pre>

<p>For an even more stylish effect, I can define a linear gradient with two colour stops, and reference that to fill my decorative script:</p>

<pre><code class="language-css">&lt;defs&gt;
&lt;linearGradient id="cortina" gradientTransform="rotate(90)"&gt;
&lt;stop offset="0%"  stop-color="#bd1f3a" /&gt;
&lt;stop offset="100%" stop-color="#31609e" /&gt;
&lt;/linearGradient&gt;
&lt;/defs&gt;

&lt;path fill="#fff"&gt;…&lt;/path&gt;
&lt;path fill="#fff"&gt;…&lt;/path&gt;
&lt;path fill="url('#cortina')"&gt;…&lt;/path&gt;</code></pre>

<p>SVG files are frequently smaller than bitmap images or the combined size of several font files, but they nevertheless need careful optimisation to achieve the best performance.</p>

<p>Every element, handle, and node increases the size of an SVG file, so replace paths with basic shapes like circles, ellipses, or rectangles where possible. Simplify curves to reduce the number of nodes and use fewer handles. Popular graphic software like Adobe Illustrator, Affinity Designer, and Sketch export files bloated by unoptimised elements and unnecessary metadata. But, tools like <a href="https://jakearchibald.github.io/svgomg/">SVGOMG by developer Jake Archibald</a> will strip away unneeded items and can often reduce SVG file size substantially.</p>

<p>SVG images which contain text outlines can also be made accessible by using alternative text and ARIA properties. When linking to an external SVG file, add alternative text as you should with any non-decorative image:</p>

<pre><code class="language-html">&lt;img src="header.svg" 
alt="Cortina. ’70s best-selling British car"&gt;</code></pre>

<p>The best way to help people who use assistive technology is to embed SVG into HTML. Add an ARIA role and a descriptive label and screen readers will treat the SVG as a single element and read the label description aloud:</p>

<div class="break-out">
<pre><code class="language-html">&lt;svg role="img" aria-label="Cortina. ’70s best-selling British car"&gt;
…
&lt;/svg&gt;</code></pre>
</div>

<p>Adding a title element helps assistive technology to understand the difference between several blocks of SVG, but this title won’t be displayed in a browser:</p>

<pre><code class="language-html">&lt;svg&gt;
&lt;title&gt;Cortina. ’70s best-selling british car&lt;/title&gt;
&lt;/svg&gt;</code></pre>

<p>When there are several blocks of SVG in a document, give each one a unique ID and add that to its title:</p>

<pre><code class="language-html">&lt;svg&gt;
&lt;title id="header"&gt;…&lt;/title&gt;
&lt;/svg&gt;</code></pre>

<p>ARIA has several attributes which help SVG accessibility. When SVG is purely decorative and has no semantic value, hide it from assistive technology by adding an <code>aria-hidden</code> attribute:</p>

<pre><code class="language-html">&lt;svg aria-hidden="true"&gt;
…
&lt;/svg&gt;</code></pre>

<p>For my design, I use SVG in place of an HTML heading. To replace the missing semantics for assistive technology, use an ARIA role attribute and a value of heading. Then add a level attribute which matches the missing HTML:</p>

<pre><code class="language-html">&lt;svg role="heading" aria-level="1"&gt;
…
&lt;/svg&gt;</code></pre>

<h3 id="clipping-type">Clipping Type</h3>

<p>The CSS <code>background-clip</code> property defines whether an element’s background extends underneath its <code>border-box</code>, <code>padding-box</code>, or <code>content-box</code>, according to the CSS box model:</p>

<ul>
<li><code>border-box</code><br />
Background extends to the outside edge of the border (and underneath the border).</li>
<li><code>padding-box</code><br />
Background extends to the outside edge of the padding only.</li>
<li><code>content-box</code><br />
The background is rendered within (clipped to) the content box only.</li>
</ul>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      background-clip. Left: border-box. Middle: padding-box. Right: content-box. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dffb0054-8cdc-4a25-b3f9-0d26146926f2/issue-8-21-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>But, there’s one more value which offers many more opportunities for inspiring typography. Using text as a value for background-clip clips an element’s background to the space occupied by the text it contains.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Left: Anti-war poster for American Institute of Graphic Arts exhibition. Designed by Herb Lubalin. Right: The background-clip text value clips an element’s background to the space occupied by the text it contains. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8d99a0c-8c3d-4fe2-8141-5bfbd360c758/issue-8-22-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>In my next example, the brake disk background image is visible only where there’s text in the headline. When my headline includes more content or its text size increases, more of that background image will be visible:</p>

<pre><code class="language-css">h1 {
background-image: url(pattern.svg);
background-clip: text;
-webkit-background-clip: text;
color: transparent; }</code></pre>

<p>You can apply the text value for <code>background-clip</code> to any element except the <code>:root</code>, HTML. As support for<code>background-clip</code> is limited, I use a feature query which delivers those styles only to supporting browsers:</p>

<div class="break-out">
<pre><code class="language-css">h1 {
color: #fff; }

@supports (background-clip: text) or (-webkit-background-clip: text) {
h1 {
background-color: #fff;
background-image: url(pattern.svg);
background-position: 50% 100%;
background-repeat: no-repeat;
background-size: 50%;
background-clip: text;
-webkit-background-clip: text;
color: transparent; }
}</code></pre>
</div>

<p>Inspired by Lubalin, I want to place images inside the letters of my next headline, and the SVG image element allows me to do just that.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Left: Trade press advertisement designed by Herb Lubalin. Right: Images inside each letter of my SVG headline. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa064119-6b77-4652-aa0f-2077bc3ebb18/issue-8-23-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>As this SVG image represents a heading, I add alternative text plus an ARIA role and level to ensure it remains accessible:</p>

<pre><code class="language-html">&lt;img src="header.svg" alt="Cortina" 
role="heading" aria-level="1"&gt;</code></pre>

<p>In SVG, the defs element stores graphical objects which can be referenced from elsewhere in a file. These include the patterns which contain my images and I add one for each letter:</p>

<pre><code class="language-html">&lt;svg&gt;
&lt;defs&gt;
&lt;pattern id="letter-c"&gt;…&lt;/pattern&gt;
&lt;pattern id="letter-o"&gt;…&lt;/pattern&gt;
&lt;pattern id="letter-r"&gt;…&lt;/pattern&gt;
…
&lt;/defs&gt;
…
&lt;/svg&gt;</code></pre>

<p>Content in the defs element is not rendered directly and to display it I reference them with either a use attribute or url. My SVG contains one path for each of the seven letters in the word “Cortina,” and I fill each path with a pattern using its unique ID:</p>

<pre><code class="language-html">&lt;svg&gt;
&lt;defs&gt;…&lt;/defs&gt;
&lt;path fill="url(#letter-c)"&gt;…&lt;/path&gt;
&lt;path fill="url(#letter-o)"&gt;…&lt;/path&gt;
&lt;path fill="url(#letter-r)"&gt;…&lt;/path&gt;
…
&lt;/svg&gt;</code></pre>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Images inside each letter of my SVG headline. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2de7e53b-b90b-40ad-9b61-28ba5a2eef9d/issue-8-24-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Image elements allow either bitmap or vector images to be rendered within an SVG. My design incorporates three car part blueprint images which I link to using a standard href attribute:</p>

<pre><code class="language-html">&lt;defs&gt;
&lt;pattern id="letter-c" width="100%" height="100%"&gt;
&lt;image href="pattern-c.png" height="250" width="250"/&gt;
&lt;/pattern&gt;
…
&lt;/defs&gt;</code></pre>

<p>These three car part pattern images fill each letter, and the result is a striking headline design which demands attention.</p>

<h3 id="combining-techniques">Combining Techniques</h3>

<p>There’s no doubt that Herb Lubin had a masterful ability to make type talk. For this final Lubin-inspired example, I put together the techniques I’ve demonstrated to create a compelling design for this classic ’70s Ford.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Left: Trade press advertisement designed by Herb Lubalin. Right: Main content placed over a text-based SVG background image. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ad51ab4-c011-4f61-9a95-13c82d69b7f2/issue-8-25-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>To develop this design, I need two structural elements which should be very familiar by now, a main and aside:</p>

<pre><code class="language-html">&lt;main&gt;…&lt;/main&gt;
&lt;aside&gt;…&lt;/aside&gt;</code></pre>

<p>My main element contains a header element with an SVG headline followed by a division which includes my running text. I add an ARIA role and level to my headline to ensure its SVG text is accessible:</p>

<pre><code class="language-html">&lt;main&gt;

&lt;header&gt;
&lt;svg role="heading" aria-level="1"&gt;…&lt;/svg&gt;
&lt;/header&gt;

&lt;div&gt;…&lt;/div&gt;

&lt;/main&gt;</code></pre>

<p>To serve a full image to small screens and half to larger viewports, I use a picture element and a minimum width media query:</p>

<pre><code class="language-html">&lt;aside&gt;
&lt;picture&gt;
&lt;source srcset="half.svg" media="(min-width: 74em)"&gt;
&lt;img src="full.svg" alt="Ford Cortina"&gt;
&lt;/picture&gt;
&lt;/aside&gt;</code></pre>

<p>Lubalin’s designs are often energetic, so to fill my main element with energy, I apply grid properties and use three columns and five rows to develop an asymmetrical layout.</p>

<pre><code class="language-css">main {
display: grid;
grid-template-columns: 1fr 1fr 1fr;
grid-template-rows: repeat(5, 1fr); }</code></pre>

<p>This design is dominated by an outline of the charismatic Cortina, and a text-based background image which covers the main element. I scale this SVG to fill the element’s background, and change the background-origin so it appears only behind the content and not its border or padding:</p>

<pre><code class="language-css">main {
background-image: url(main.svg);
background-origin: content-box;
background-position: top right;
background-repeat: no-repeat;
background-size: 100% 100%; }</code></pre>

<p>Leaving columns around my header and text division empty creates negative space which helps to lead someone’s eye around the composition. The header occupies the first two of my three columns while the division fills the last two:</p>

<pre><code class="language-css">header {
grid-column: 1 / 3;
grid-row: 2 / 3; }

main div {
grid-column: 2 / 4;
grid-row: 3 / 6; }</code></pre>

<p>One of the benefits of using the SVG text element is the ability to position text according to its baseline or relative to each elements. My headline SVG includes two text elements for the name of this car, and a third for the period it was manufactured. I want to place this final text element precisely 250px from the left and 60px from the top of my SVG:</p>

<pre><code class="language-html">&lt;svg&gt;
&lt;text x="0" y="60"&gt;Ford&lt;/text&gt;
&lt;text x="0" dy="70"&gt;Cortina&lt;/text&gt;
&lt;text x="250" y="60"&gt;1962&#8211;1983&lt;/text&gt;
&lt;/svg&gt;</code></pre>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Left: My large-screen design, inspired by Herb Lubalin. Right: To serve a full Cortina image to small screens and only the right half to larger viewports, I use a picture element. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4379a33b-ffc7-43e7-ae26-4060c9805f16/issue-8-27-inspired-design-decisions-herb-lubalin.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>This dazzling design becomes more memorable on larger viewports when the text-based SVG background image and my Cortina outline fit alongside each other. I apply a two-column symmetrical grid to the body element:</p>

<pre><code class="language-css">@media (min-width: 74em) {

body {
display: grid;
grid-template-columns: [main] 1fr [aside] 1fr; }
}</code></pre>

<p>Then, I place the main and aside elements onto my grid using line names:</p>

<pre><code class="language-css">main {
grid-column: main; }

aside {
grid-column: aside; }
}</code></pre>

<p>On the web, inspiring typography should be attractive and readable, but the readability of running text can easily be affected by the background behind it.</p>

<p>The backdrop-filter applies CSS filter effects to elements behind the text. These filters include blur, brightness and contrast, and colour effects which can all help to make the running text more readable against either background images, graphics, or patterns.</p>

<p>Apply one or multiple filters using the same CSS filter syntax I demonstrated in a previous issue:</p>

<pre><code class="language-css">main {
backdrop-filter: brightness(25%); }

main {
backdrop-filter: brightness(25%) contrast(50%); }</code></pre>

<p><code>backdrop-filter</code> is part of the Filter Effects Module Level 2 specification. It already has solid support in contemporary browsers, although some still require the Webkit vendor prefix:</p>

<pre><code class="language-css">main div {
-webkit-backdrop-filter: blur(3px);
backdrop-filter: blur(3px); }</code></pre>

<p><strong>NB</strong>: <em><a href="https://www.smashingmagazine.com/membership/">Smashing members</a> have access to a beautifully designed PDF of Andy’s Inspired Design Decisions magazine and full code examples from this article. You can also <a href="https://stuffandnonsense.co.uk/inspired-design-decisions/shop/">buy the PDF and examples</a> from this along with every other issue from Andy’s website.</em></p>

<h4 id="read-more-from-the-series-1">Read More From The Series</h4>

<ul>
<li><a href="https://www.smashingmagazine.com/2019/06/inspired-design-decisions-avaunt-magazine/">Inspired Design Decisions: Avaunt Magazine</a></li>
<li><a href="https://www.smashingmagazine.com/2019/07/inspired-design-decisions-pressing-matters/">Inspired Design Decisions: Pressing Matters</a></li>
<li><a href="https://www.smashingmagazine.com/2019/08/inspired-design-decisions-ernest-journal">Inspired Design Decisions: Ernest Journal</a></li>
<li><a href="https://www.smashingmagazine.com/2019/09/inspired-design-decisions-alexey-brodovitch/">Inspired Design Decisions: Alexey Brodovitch</a></li>
<li><a href="https://www.smashingmagazine.com/2019/10/inspired-design-decisions-bea-feitler/">Inspired Design Decisions: Bea Feitler</a></li>
<li><a href="https://www.smashingmagazine.com/2020/03/inspired-design-decisions-neville-brody/">Inspired Design Decisions: Neville Brody</a></li>
<li><a href="https://www.smashingmagazine.com/2020/03/inspired-design-decisions-otto-storch/">Inspired Design Decisions: Otto Storch</a></li>
<li><a href="https://www.smashingmagazine.com/2020/04/inspired-design-decisions-herb-lubalin/">Inspired Design Decisions: Herb Lubalin</a></li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(vf, ra, yk, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Shedrack Akintayo</author><title>Getting Started With The React Hooks API</title><link>https://www.smashingmagazine.com/2020/04/react-hooks-api-guide/</link><pubDate>Fri, 10 Apr 2020 09:30:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/react-hooks-api-guide/</guid><description>When React 16.8 was released officially in early February 2019, it shipped with an additional API that lets you use state and other features in React without writing a class. This additional API is called Hooks and they’re becoming popular in the React ecosystem, from open-sourced projects to being used in production applications.
React Hooks are completely opt-in which means that rewriting existing code is unecessary, they do not contain any breaking changes, and they’re available for use with the release of React 16.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/react-hooks-api-guide/" />
              <title>Getting Started With The React Hooks API</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Getting Started With The React Hooks API</h1>
                  
                    
                    <address>Shedrack Akintayo</address>
                  
                  <time datetime="2020-04-10T09:30:00&#43;00:00" class="op-published">2020-04-10T09:30:00+00:00</time>
                  <time datetime="2020-04-10T09:30:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>When React 16.8 was released officially in early February 2019, it shipped with an additional API that lets you use state and other features in React without writing a class. This additional API is called <strong>Hooks</strong> and they’re becoming popular in the React ecosystem, from open-sourced projects to being used in production applications.</p>

<p>React Hooks are completely opt-in which means that rewriting existing code is unecessary, they do not contain any breaking changes, and they’re available for use with the release of React 16.8. Some curious developers have been making use of the Hooks API even before it was released officially, but back then it was not stable and was only an experimental feature. Now it is stable and recommended for React developers to use.</p>

<p><strong>Note</strong>: <em>We won’t be talking about React or JavaScript in general. A good knowledge of ReactJS and JavaScript will come in handy as you work through this tutorial.</em></p>

<h3 id="what-are-react-hooks">What Are React Hooks?</h3>

<p>React Hooks are in-built functions that allow React developers to use state and lifecycle methods inside functional components, they also work together with existing code, so they can easily be adopted into a codebase. The way Hooks were pitched to the public was that they allow developers to use state in functional components but under the hood, Hooks are much more powerful than that. They allow React Developers to enjoy the following benefits:</p>

<ul>
<li>Improved code reuse;</li>
<li>Better code composition;</li>
<li>Better defaults;</li>
<li>Sharing non-visual logic with the use of custom hooks;</li>
<li>Flexibility in moving up and down the <code>components</code> tree.</li>
</ul>

<p>With React Hooks, developers get the power to use functional components for almost everything they need to do from just rendering UI to also handling state and also logic &mdash; which is pretty neat.</p>

<h3 id="motivation-behind-the-release-of-react-hooks">Motivation Behind The Release Of React Hooks</h3>

<p>According to the <a href="https://reactjs.org/docs/hooks-intro.html">ReactJS official documentation</a>, the following are the motivation behind the release of React Hooks:</p>

<ul>
<li><strong>Reusing stateful logic between components is difficult.</strong><br />
With Hooks, you can reuse logic between your components without changing their architecture or structure.</li>
<li><strong>Complex components can be difficult to understand.</strong><br />
When components become larger and carry out many operations, it becomes difficult to understand in the long run. Hooks solve this by allowing you separate a particular single component into various smaller functions based upon what pieces of this separated component are related (such as setting up a subscription or fetching data), rather than having to force a split based on lifecycle methods.</li>
<li><strong>Classes are quite confusing.</strong><br />
Classes are a hindrance to learning React properly; you would need to understand how <code>this</code> in JavaScript works which differs from other languages. React Hooks solves this problem by allowing developers to use the best of React features without having to use classes.</li>
</ul>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="the-rules-of-hooks">The Rules Of Hooks</h3>

<p>There are two main rules that are strictly to be adhered to as stated by the React core team in which they outlined in the <a href="https://reactjs.org/docs/hooks-rules.html">hooks proposal documentation</a>.</p>

<ul>
<li>Make sure to not use Hooks inside loops, conditions, or nested functions;</li>
<li>Only use Hooks from inside React Functions.</li>
</ul>

<h3 id="basic-react-hooks">Basic React Hooks</h3>

<p>There are 10 in-built hooks that was shipped with React 16.8 but the basic (commonly used) hooks include:</p>

<ul>
  <li><a href="#useState"><code>useState()</code></a></li>
  <li><a href="#useEffect"><code>useEffect()</code></a></li>
  <li><a href="#useContext"><code>useContext()</code></a></li>
  <li><a href="#useReducer"><code>useReducer()</code></a></li>
</ul>

<p>These are the 4 basic hooks that are commonly used by React developers that have adopted React Hooks into their codebases.</p>

<h4 id="useState"><code>useState()</code></h4>

<p>The <code>useState()</code> hook allows React developers to update, handle and manipulate state inside functional components without needing to convert it to a class component. Let’s use the code snippet below is a simple Age counter component and we will use it to explain the power and syntax of the <code>useState()</code> hook.</p>

<div class="break-out">
<pre><code class="language-javascript">function App() {
  const [age, setAge] = useState(19);
  const handleClick = () =&gt; setAge(age + 1)

  return 
      &lt;div> 
          I am {age} Years Old 
        &lt;div&gt; 
        &lt;button onClick={handleClick}&gt;Increase my age! &lt;/button&gt;
      &lt;/div&gt;
   &lt;/div&gt;
}
</code></pre>
</div>

<p>If you’ve noticed, our component looks pretty simple, concise and it’s now a functional component and also does not have the level of complexity that a class component would have.</p>

<p>The <code>useState()</code> hook receives an initial state as an argument and then returns, by making use of array destructuring in JavaScript, the two variables in the array can be named what. The first variable is the actual state, while the second variable is a function that is meant for updating the state by providing a new state.</p>

<figure><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ec6c1643-97e5-405a-b39d-c1bcc56bcac8/01-use-state-project.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/345c665e-86b5-44d3-8372-9389da157f86/01-use-state-project-800w.gif" width="800" height="" alt="" /></a><figcaption>Our finished React app (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ec6c1643-97e5-405a-b39d-c1bcc56bcac8/01-use-state-project.gif">Large preview</a>)</figcaption></figure>

<p>This is how our component should look when it is rendered in our React application. By clicking on the “Increase my Age” button, the state of the age will change and the component would work just like a class component with state.</p>

<h4 id="useEffect"><code>useEffect()</code></h4>

<p>The <code>useEffect()</code> hook accepts a function that would contain effectual code. In functional components, effects like mutations, subscriptions, timers, logging, and other effects are not allowed to be placed inside a functional component because doing so would lead to a lot of inconsistencies when the UI is rendered and also confusing bugs.</p>

<p>In using the  <code>useEffect()</code> hook, the effectual function passed into it will execute right after the render has been displayed on the screen. Effects are basically peeked into the imperative way of building UIs that is quite different from React’s functional way.</p>

<p>By default, effects are executed mainly after the render has been completed, but you have the option to also fire them when certain values change.</p>

<p>The <code>useEffect()</code> hook mostly into play for side-effects that are usually used for interactions with the Browser/DOM API or external API-like data fetching or subscriptions. Also, if you are already familiar with how React lifecycle methods work, you can also think of <code>useEffect()</code> hook as <strong>component mounting</strong>, <strong>updating</strong> and <strong>unmounting</strong> &mdash; all combined in one function. It lets us replicate the lifecycle methods in functional components.</p>

<p>We will use the code snippets below to explain the most basic way that we can by using the <code>useEffect()</code> hook.</p>

<div class="sponsors__lead-place"></div>




<h5 id="step-1-define-the-state-of-your-application">Step 1: Define The State Of Your Application</h5>

<div class="break-out">
<pre><code class="language-javascript">import React, {useState} from 'react';
function App() {
    //Define State
    const [name, setName] = useState({firstName: 'name', surname: 'surname'});
    const [title, setTitle] = useState('BIO');
    
    return(
        &lt;div&gt;
            &lt;h1&gt;Title: {title}&lt;/h1&gt;
            &lt;h3&gt;Name: {name.firstName}&lt;/h3&gt;
            &lt;h3&gt;Surname: {name.surname}&lt;/h3&gt;
        &lt;/div&gt;
    );
};
export default App
</code></pre>
</div>

<p>Just like we discussed in the previous section on how to use the <code>useState()</code> hook to handle state inside functional components, we used it in our code snippet to set the state for our app that renders my full name.</p>

<h5 id="step-2-call-the-useeffect-hook">Step 2: Call The useEffect Hook</h5>

<div class="break-out">
<pre><code class="language-javascript">import React, {useState, useEffect} from 'react';
function App() {
    //Define State
    const [name, setName] = useState({firstName: 'name', surname: 'surname'});
    const [title, setTitle] = useState('BIO');
   
    //Call the use effect hook
    useEffect(() =&gt; {
      setName({name: 'Shedrack', surname: 'Akintayo'})
    }, [])//pass in an empty array as a second argument
    
    return(
        &lt;div&gt;
            &lt;h1&gt;Title: {title}&lt;/h1&gt;
            &lt;h3&gt;Name: {name.firstName}&lt;/h3&gt;
            &lt;h3&gt;Surname: {name.surame}&lt;/h3&gt;
        &lt;/div&gt;
    );
};
export default App
</code></pre>
</div>

<p>We have now imported the <code>useEffect</code> hook and also made use of the <code>useEffect()</code> function to set the state of our the name and surname property which is pretty neat and concise.</p>

<p>You may have noticed the <code>useEffect</code> hook in the second argument which is an empty array; this is because it contains a call to the <code>setFullName</code> which does not have a list of dependencies. Passing the second argument will prevent an infinite chain of updates (<code>componentDidUpdate()</code>) and it’ll also allow our <code>useEffect()</code> hook to act as a <code>componentDidMount</code> lifecycle method and render once without re-rendering on every change in the tree.</p>

<p>Our React app should now look like this:</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      React app using the <code>useEffect</code> Hook (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af586a2d-ddad-4083-b931-027cd802b8c4/02-use-effect-project.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>We can also use change the <code>title</code> property of our application inside the <code>useEffect()</code> function by calling the <code>setTitle()</code> function, like so:</p>

<div class="break-out">
<pre><code class="language-javascript">import React, {useState, useEffect} from 'react';
function App() {
    //Define State
    const [name, setName] = useState({firstName: 'name', surname: 'surname'});
    const [title, setTitle] = useState('BIO');
   
    //Call the use effect hook
    useEffect(() =&gt; {
      setName({name: 'Shedrack', surname: 'Akintayo'})
      setTitle({'My Full Name'}) //Set Title
    }, [])// pass in an empty array as a second argument
    
    return(
        &lt;div&gt;
            &lt;h1&gt;Title: {title}&lt;/h1&gt;
            &lt;h3&gt;Name: {name.firstName}&lt;/h3&gt;
            &lt;h3&gt;Surname: {name.surame}&lt;/h3&gt;
        &lt;/div>
    );
};
export default App
</code></pre>
</div>

<p>Now after our application has rerendered, it now shows the new title.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Our finished project (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4690d1-2fa3-4197-b401-a4ea26d1ca03/03-use-effect-project-2.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h4 id="useContext"><code>useContext()</code></h4>

<p>The <code>useContext()</code> hook accepts a context object, i.e the value that is returned from <code>React.createContext</code>, and then it returns the current context value for that context.</p>

<p>This hook gives functional components easy access to your React app context. Before the <code>useContext</code> hook was introduced you would need to set up a <code>contextType</code> or a <code>&lt;Consumer&gt;</code> to access your global state passed down from some provider in a class component.</p>

<p>Basically, the <code>useContext</code> hook works with the React Context API which is a way to share data deeply throughout your app without the need to manually pass your app props down through various levels. Now, the <code>useContext()</code> makes using Context a little easier.</p>

<p>The code snippets below will show how the Context API works and how the <code>useContext</code> Hook makes it better.</p>

<h5 id="the-normal-way-to-use-the-context-api">The Normal Way To Use The Context API</h5>

<div class="break-out">
<pre><code class="language-javascript">import React from "react";
import ReactDOM from "react-dom";

const NumberContext = React.createContext();
function App() {
  return (
    &lt;NumberContext.Provider value={45}&gt;
      &lt;div&gt;
        &lt;Display /&gt;
      &lt;/div&gt;
    &lt;/NumberContext.Provider&gt;
  );
}
function Display() {
  return (
    &lt;NumberContext.Consumer&gt;
      {value =&gt; &lt;div&gt;The answer to the question is {value}.&lt;/div&gt;}
    &lt;/NumberContext.Consumer&gt;
  );
}
ReactDOM.render(&lt;App /&gt;, document.querySelector("#root"));
</code></pre>
</div>

<p>Let’s now break down the code snippet and explain each concept.</p>

<p>Below, we are creating a context called <code>NumberContext</code>. It is meant to return an object with two values: <code>{ Provider, Consumer }</code>.</p>

<pre><code class="language-javascript">const NumberContext = React.createContext();</code></pre>

<p>Then we use the <code>Provider</code> value that was returned from the <code>NumberContext</code> we created to make a particular value available to all the children.</p>

<pre><code class="language-javascript">function App() {
  return (
    &lt;NumberContext.Provider value={45}&gt;
      &lt;div&gt;
        &lt;Display /&gt;
      &lt;/div&gt;
    &lt;/NumberContext.Provider&gt;
  );
}</code></pre>

<p>With that, we can use the <code>Consumer</code> value that was returned from the <code>NumberContext</code> we created to get the value we made available to all children. If you have noticed, this component did not get any props.</p>

<div class="break-out">
<pre><code class="language-javascript">function Display() {
  return (
    &lt;NumberContext.Consumer&gt;
      {value =&gt; &lt;div&gt;The answer to the question is {value}.&lt;/div&gt;}
    &lt;/NumberContext.Consumer&gt;
  );
}
ReactDOM.render(&lt;App /&gt;, document.querySelector("#root"));

</code></pre>
</div>

<p>Note how we were able to get the value from the <code>App</code> component into the <code>Display</code> component by wrapping our content in a <code>NumberContext.Consumer</code> and using the render props method to retrieve the value and render it.</p>

<p>Everything works well and the render props method we used is a really good pattern for handling dynamic data, but in the long run, it does introduce some unnecessary nesting and confusion if you’re not used to it.</p>

<h5 id="using-the-usecontext-method">Using The useContext Method</h5>

<p>To explain the <code>useContext</code> method we will rewrite the <code>Display</code> component using the useContext hook.</p>

<pre><code class="language-javascript">// import useContext (or we could write React.useContext)
import React, { useContext } from 'react';

// old code goes here

function Display() {
  const value = useContext(NumberContext);
  return &lt;div&gt;The answer is {value}.&lt;/div&gt;;
}</code></pre>

<p>That’s all we need to do in order to display our value. Pretty neat, right? You call the <code>useContext()</code> hook and pass in the context object we created and we grab the value from it.</p>

<p><strong>Note:</strong> <em>Don’t forget that the argument that is passed to the useContext hook must be the context object itself and any component calling the useContext will always re-render when the context value changes.</em></p>

<div class="sponsors__lead-place"></div>




<h4 id="useReducer"><code>useReducer()</code></h4>

<p>The <code>useReducer</code> hook is used for handling complex states and transitions in state. It takes in a <code>reducer</code> function and also an initial state input; then, it returns the current state and also a <code>dispatch</code> function as output by the means of array destructuring.</p>

<p>The code below is the proper syntax for using the <code>useReducer</code> hook.</p>

<div class="break-out">
<pre><code class="language-javascript">const [state, dispatch] = useReducer(reducer, initialArg, init);
</code></pre>
</div>

<p>It is sort of an alternative to the <code>useState</code> hook; it is usually preferable to <code>useState</code> when you have complex state logic that has to do with multiple sub-values or when the next state is dependent on the previous one.</p>

<h3 id="other-react-hooks-available">Other React Hooks Available</h3>

<table class="tablesaw table--no-stripe break-out table-saw" data-tablesaw-mode="stack" data-tablesaw-minimap>
  <tbody>
    <tr>
      <td><code>useCallback</code></td>
      <td>This hook returns a callback function that is memoized and that only changes if one dependency in the dependency tree changes.</td>
    </tr>
    <tr>
      <td><code>useMemo</code></td>
      <td>This hook returns a memoized value, you can pass in a “create” function and also an array of dependencies. The value it returns will only use the memoized value again if one of the dependencies in the dependency tree changes.</td>
    </tr>
    <tr>
      <td><code>useRef</code></td>
      <td>This hook returns a mutable ref object whose <code>.current</code> property is initialized to the passed argument (<code>initialValue</code>). The returned object will be available for the full lifetime of the component.</td>
    </tr>
    <tr>
      <td><code>useImperativeHandle</code></td>
      <td>This hook is used for customizing the instance value that is made available for parent components when using refs in React.</td>
    </tr>
    <tr>
      <td><code>useLayoutEffect</code></td>
      <td>This hook similar to the <code>useEffect</code> hook, however, it fires synchronously after all DOM mutations. It also renders in the same way as <code>componentDidUpdate</code> and <code>componentDidMount</code>.</td>
    </tr>
    <tr>
      <td><code>useDebugValue</code></td>
      <td>This hook can be used to display a label for custom hooks in the React Dev Tools. It is very useful for debugging with the React Dev Tools.</td>
    </tr>
  </tbody>
</table>

<h3 id="custom-react-hooks">Custom React Hooks</h3>

<p>A “custom Hook” is a JavaScript function whose names are prefixed with the word <code>use</code> and can be used to call other Hooks. It also lets you to extract component logic into reusable functions; they are normal JavaScript functions that can make use of other Hooks inside of it, and also contain a common stateful logic that can be made use of within multiple components.</p>

<p>The code snippets below demonstrate an example of a custom React Hook for implementing infinite scroll (by <a href="https://github.com/pflevy">Paulo Levy</a>):</p>

<div class="break-out">
<pre><code class="language-javascript">import { useState } from "react";

export const useInfiniteScroll = (start = 30, pace = 10) =&gt; {
  const [limit, setLimit] = useState(start);
  window.onscroll = () =&gt; {
    if (
      window.innerHeight + document.documentElement.scrollTop ===
      document.documentElement.offsetHeight
    ) {
      setLimit(limit + pace);
    }
  };
  return limit;
};
</code></pre>
</div>

<p>This custom Hook accepts two arguments which are <code>start</code> and <code>pace</code>. The start argument is the starting number of elements to be rendered while the pace argument is the subsequent number of elements that are to be rendered. By default, the <code>start</code> and <code>pace</code> arguments are set to <code>30</code> and <code>10</code> respectively which means you can actually call the Hook without any arguments and those default values will be used instead.</p>

<p>So in order to use this Hook within a React app, we would use it with an online API that returns ‘fake’ data:</p>

<div class="break-out">
<pre><code class="language-javascript">import React, { useState, useEffect } from "react";
import { useInfiniteScroll } from "./useInfiniteScroll";

const App = () =&gt; {
  let infiniteScroll = useInfiniteScroll();

  const [tableContent, setTableContent] = useState([]);

  useEffect(() =&gt; {
    fetch("https://jsonplaceholder.typicode.com/todos/")
      .then(response =&gt; response.json())
      .then(json =&gt; setTableContent(json));
  }, []);

  return (
    &lt;div style={{ textAlign: "center" }}&gt;
      &lt;table&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th&gt;User ID&lt;/th&gt;
            &lt;th&gt;Title&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          {tableContent.slice(0, infiniteScroll).map(content =&gt; {
            return (
              &lt;tr key={content.id}&gt;
                &lt;td style={{ paddingTop: "10px" }}&gt;{content.userId}&lt;/td&gt;
                &lt;td style={{ paddingTop: "10px" }}&gt;{content.title}&lt;/td&gt;
              &lt;/tr&gt;
            );
          })}
        &lt;/tbody&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
</div>

<p>The code above will render a list of fake data (<code>userID</code> and <code>title</code>) that make use of the infinite scroll hook to display the initial number of data on the screen.</p>

<h3 id="conclusion">Conclusion</h3>

<p>I hope you enjoyed working through this tutorial. You could always read more on React Hooks from the references below.</p>

<p>If you have any questions, you can leave them in the comments section and I’ll be happy to answer every single one!</p>

<p><em>The supporting repo for this article is <a href="https://github.com/hacktivist123/React-Hooks-Project">available on Github</a>.</em></p>

<h4 id="resources-and-further-reading">Resources And Further Reading</h4>

<ul>
<li>“<a href="https://reactjs.org/docs/hooks-reference.htm">Hooks API Reference</a>,” React.js Docs</li>
<li>“<a href="https://www.robinwieruch.de/react-hooks/">What Are React Hooks?</a>,” Robin Wieruch</li>
<li>“<a href="https://daveceddia.com/usecontext-hook/">How The <code>useContext</code> Hook Works</a>,” Dave Ceddia</li>
<li>“<a href="https://medium.com/javascript-in-plain-english/react-hooks-how-to-use-useeffect-ecea3e90d84f">React Hooks: How To Use <code>useEffect()</code></a>,” Hossein Ahmadi, Medium</li>
<li>“<a href="https://blog.bitsrc.io/writing-your-own-custom-hooks-4fbcf77e112e">Writing Your Own Custom React Hooks</a>,” Aayush Jaiswal, Medium</li>
<li>“<a href="http://usehooks.com">Easy To Understand React Hook Recipes</a>,” Gabe Ragland, useHooks(🐠)</li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ks, ra, yk, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Frederick O’Brien</author><title>Baking Structured Data Into The Design Process</title><link>https://www.smashingmagazine.com/2020/04/structured-data-design-process/</link><pubDate>Thu, 09 Apr 2020 11:30:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/structured-data-design-process/</guid><description>Search engine optimization (SEO) is essential for almost every kind of website, but its finer points remain something of a specialty. Even today SEO is often treated as something that can be tacked on after the fact. It can up to a point, but it really shouldn’t be. Search engines get smarter every day and there are ways for websites to be smarter too.
The foundations of SEO are the same as they’ve always been: great content clearly labeled will win the day sooner or later &amp;mdash; regardless of how many people try to game the system.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/structured-data-design-process/" />
              <title>Baking Structured Data Into The Design Process</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Baking Structured Data Into The Design Process</h1>
                  
                    
                    <address>Frederick O’Brien</address>
                  
                  <time datetime="2020-04-09T11:30:00&#43;00:00" class="op-published">2020-04-09T11:30:00+00:00</time>
                  <time datetime="2020-04-09T11:30:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                <p>Search engine optimization (<a href="https://www.smashingmagazine.com/category/seo">SEO</a>) is essential for almost every kind of website, but its finer points remain something of a specialty. Even today SEO is often treated as something that can be tacked on after the fact. It can up to a point, but it really shouldn’t be. <a href="https://www.google.com/search/howsearchworks/algorithms/">Search engines get smarter every day</a> and there are ways for websites to be smarter too.</p>

<p>The foundations of SEO are the same as they’ve always been: great content clearly labeled will win the day sooner or later &mdash; regardless of how many people try to game the system. The thing is, those labels are far more sophisticated than they used to be. Meta titles, image alt text, and backlinks are important, but in 2020, they’re also fairly primitive. There is another tier of metadata that only a fraction of sites are currently using: structured data.</p>

<p>All search engines share the same purpose: to organize the web’s content and deliver the most relevant, useful results possible to search queries. How they achieve this has changed enormously since the days of Lycos and Ask Jeeves. Google alone uses more than 200 ranking factors, and those are just the ones we know about.</p>

<p>SEO is a huge field nowadays, and I put it to you that structured data is a really, <em>really</em> important factor to understand and implement in the coming years. It doesn’t just improve your chances of ranking highly for relevant queries. More importantly, it helps make your websites better &mdash; opening it up to all sorts of useful web experiences.</p>

<p><strong>Recommended reading</strong>: <em><a href="https://www.smashingmagazine.com/2020/02/seo-web-design-process/">Where Does SEO Belong In Your Web Design Process?</a></em></p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3>What Is Structured Data?</h3>

<p>Structured data is a way of labeling content on web pages. Using vocabulary from <a href="https://blog.hubspot.com/marketing/google-ranking-algorithm-infographic">Schema.org</a>, it removes much of the ambiguity from SEO. Instead of trusting the likes of Google, Bing, Baidu, and DuckDuckGo to work out what your content is about, you tell them. It’s the difference between a search engine <em>guessing</em> what a page is about and <em>knowing</em> for sure.</p>

<p>As Schema.org puts it:</p>

<blockquote>By adding additional tags to the HTML of your web pages &mdash; tags that say, "Hey search engine, this information describes this specific movie, or place, or person, or video" &mdash; you can help search engines and other applications better understand your content and display it in a useful, relevant way.</blockquote>

<p>Schema.org launched in 2011, a project shared by Google, Microsoft, Yahoo, and Yandex. In other words, it’s a ‘bipartisan’ effort &mdash; if you like. The markup transcends any one search engine. In Schema.org’s own words,</p>

<blockquote>“A shared vocabulary makes it easier for webmasters and developers to decide on a schema and get the maximum benefit for their efforts.”</blockquote>

<p>It is in many respects a more expansive cousin of microformats (launched around 2005) which embed semantics and structured data in HTML, mainly for the benefit of search engines and aggregators. Although <a href="http://microformats.org/2020/03/04/google-confirms-microformats-are-still-a-recommended-metadata-format-for-content">microformats are currently still supported</a>, the ‘official’ nature of the Schema.org library makes it a safer bet for longevity.</p>

<p><a href="https://json-ld.org">JSON for Linked Data</a> (JSON-LD) has emerged as the dominant underlying standard for structured data, although <a href="https://www.w3.org/TR/microdata/">Microdata</a> and <a href="http://rdfa.info/">RDFa</a> are also supported and serve the same purpose. Schema.org provides examples for each type depending on what you’re most comfortable with.</p>

<p>As an example, let’s say Joe Bloggs writes a review of Joseph Heller’s 1961 novel <em>Catch-22</em> and publishes it on his blog. Sadly, Bloggs has poor taste and gives it two out of five stars. For a person looking at the page, this information would be understood unthinkingly, but computer programs would have to connect several dots to reach the same conclusion.</p>

<p>With structured data, the following markup could be added to the page’s <code>&lt;head&gt;</code> code. (This is a JSON-LD approach. Microdata and RDFa can be used to weave the same information into <code>&lt;body&gt;</code> content):</p>

<div class="break-out">
<pre><code class="language-json">&lt;script type="application/ld+json"&gt;
{
  "@context" : "http://schema.org",
  "@type" : "Book",
  "name" : "Catch-22",
  "author" : {
    "@type" : "Person",
    "name" : "Joseph Heller"
  },
  "datePublished" : "1961-11-10",
  "review" : {
    "@type" : "Review",
    "author" : {
      "@type" : "Person",
      "name" : "Joe Bloggs"
    },
    "reviewRating" : {
      "@type" : "Rating",
      "ratingValue" : "2",
    "worstRating" : "0",
      "bestRating" : "5"
    },
    "reviewBody" : "A disaster. The worst book I&#39;ve ever read, and I&#39;ve read The Da Vinci Code."
  }
}
&lt;/script&gt;</code></pre>
</div>

<p>This sets in stone that the page is about <em>Catch-22</em>, a novel by Joseph Heller published on November 10th, 1961. The reviewer has been identified, as has the parameters of the scoring system. Different schemas can be combined (or tiered) to describe different things. For example, through tagging of this sort, you could make clear a page is the event listing for an open-air film screening, and the film in question is <em>The Life Aquatic with Steve Zissou</em> by Wes Anderson.</p>

<p><strong>Recommended reading</strong>: <em><a href="https://www.smashingmagazine.com/2018/07/better-research-design-results/">Better Research, Better Design, Better Results</a></em></p>

<h4>Why Does It Matter?</h4>

<p>Ok, wonderful. I can label my website up to its eyeballs and it will look exactly the same, but what are the benefits? To my mind, there are two main benefits to including structured data in websites:</p>

<ol>
<li><strong>It makes search engine’s jobs much easier.</strong><br />They can index content more accurately, which in turn means they can present it more richly.</li>
<li><strong>It helps web content to be more thorough and useful.</strong><br />Structured data gives you a ‘computer perspective’ on content. Quality content is fabulous. Quality content thoroughly tagged is the stuff of dreams.</li>
</ol>

<p>You know when you see snazzy search results that include star ratings? That’s structured data. Rich snippets of film reviews? Structured data. When a selection of recipes appear, ingredients, preparation time and all? You guessed it. Dig into the code of any of these pages and you’ll find the markup somewhere. Search engines reward sites using structured data because it tells them exactly what they’re dealing with.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png"
			sizes="100vw"
			alt="Review snippets using structured data markup on Google Search"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d81222e-33fd-4d8e-a66b-1a637c0d7886/1-film-review-snippets-in-google-search.png'>Large preview</a>)
    </figcaption>
  
</figure>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png"
			sizes="100vw"
			alt="Recipe snippets using structured data markup on Google Search"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Examine the code on the websites featured above and sure enough, structured data is there. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d869a5b6-f9da-4243-be9d-d92430ae881b/2-apple-pie-recipe-snippets-in-google-search.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>It’s not just search either, to be clear. That’s a big part of it but it’s not the whole deal. Structured data is primarily about tagging and organizing content. Rich search results are just one way for said content to be used. Google Dataset Search uses <a href="https://schema.org/Dataset">Schema.org/Dataset</a> markup, for example.</p>

<p>Below are a handful of examples of structured data being useful:</p>

<ul>
<li><a href="https://schema.org/Recipe">Recipes</a></li>
<li><a href="https://schema.org/Review">Reviews</a></li>
<li><a href="https://schema.org/FAQPage">FAQs</a></li>
<li><a href="https://developers.google.com/search/docs/data-types/speakable">Voice queries</a></li>
<li><a href="https://schema.org/Event">Event listings</a></li>
<li><a href="https://developers.google.com/assistant/content/overview">Content Actions</a>.</li>
</ul>

<p>There are thousands more. Like, literally. Schema.org even <a href="http://blog.schema.org/2020/03/schema-for-coronavirus-special.html">fast-tracked the release of markup for Covid-19</a> recently. It’s an ever-growing library.</p>

<p>In many respects, structured data is a branch of the Semantic Web, which strives for a fully machine-readable Internet. It gives you a machine-readable perspective on web content that (when properly implemented) feeds back into richer functionality for people.</p>

<p>As such, just about anyone with a website would benefit from knowing what structured data is and how it works. <a href="https://w3techs.com/technologies/overview/structured_data">According to W3Techs</a>, only 29.6% of websites use JSON-LD, and 43.2% don’t use any structured data formats at all. There’s no obligation, of course. Not everyone cares about SEO or being machine-readable. On the flip side, for those who do there’s currently a big opportunity to one-up rival sites.</p>

<p>In the same way that HTML forces you to think about how content is organized, structured data gets you thinking about the substance. It makes you more thorough. Whatever your website is about, if you comb through the relevant schema documentation you’ll almost certainly spot details that you didn’t think to include beforehand.</p>

<p>As humans, it is easy to take for granted the connections between information. Search engines and computer programs are smart, but they’re not <em>that</em> smart. Not yet. Structured data translates content into terms they can understand. This, in turn, allows them to deliver richer experiences.</p>

<h5>Resources And Further Reading</h5>

<ul>
<li>“<a href="https://moz.com/blog/structured-data-for-seo-1">The Beginner's Guide To Structured Data For SEO: A Two-Part Series</a>,” Bridget Randolph, Moz</li>
<li>“<a href="https://www.searchenginejournal.com/technical-seo/schema/">What Is Schema Markup And Why It’s Important For SEO</a>,” Chuck Price, Search Engine Journal</li>
<li>“<a href="https://www.semrush.com/blog/what-is-schema-beginner-s-guide-to-structured-data/">What Is Schema? Beginner‘s Guide To Structured Data</a>,” Luke Harsel, SEMrush</li>
<li>“<a href="https://blog.codeship.com/json-ld-building-meaningful-data-apis/">JSON-LD: Building Meaningful Data APIs</a>,” Benjamin Young, Rollout Blog</li>
<li>“<a href="https://developers.google.com/search/docs/guides/intro-structured-data">Understand How Structured Data Works</a>,” Google Search for Developers</li>
<li>“<a href="https://www.bing.com/webmaster/help/marking-up-your-site-with-structured-data-3a93e731">Marking Up Your Site With Structured Data</a>,” Bing</li>
</ul>

<div class="sponsors__lead-place"></div>




<h3>Incorporating Structured Data Into Website Design</h3>

<p>Weaving structured data into a website isn’t as straightforward as, say, changing a meta title. It’s the data DNA of your web content. If you want to implement it properly, then you need to be willing to get into the weeds &mdash; at least a little bit. Below are a few simple steps developers can take to weave structured data into the design process.</p>

<p><strong>Note</strong>: <em>I personally subscribe to a holistic approach to design, where design and substance go hand in hand. Juggling a bunch of disciplines is nothing new to web design, this is just another one, and if it’s incorporated well it can strengthen other elements around it. Think of it as an enhancement to your site’s engine. The car may not look all that different but it handles a hell of a lot better.</em></p>

<h4>Start With A Concept</h4>

<p>I’ll use myself as an example. For five years, two friends and I have been reviewing an album a week as a hobby (with others stepping in from time to time). Our sneering, insufferable prose is currently housed in a WordPress site, which &mdash; under my well-meaning but altogether ignorant care &mdash; had grown into a Frankenstein’s monster of plugins.</p>

<p>We are in the process of redesigning the site which (among other things) has entailed bringing structured data into the core design. Here, as with any other project, the first thing to do is establish what your content is about. The better you answer this question, the easier everything that follows will be.</p>

<p>In our case, these are the essentials:

<ul> 
  <li>We review music albums;</li>
  <li>Each review has three reviewers who each write a summary by choosing up to three favorite tracks and assigning a personal score out of ten;</li>
  <li>These three scores are combined into a final score out of 30;</li>
  <li>From the three summaries, a passage is chosen to serve as an ‘at-a-glance’ roundup of all our thoughts.</li>
</ul>

<p>Some of this may sound a bit specific or even a bit arbitrary (because it is), but you’d be surprised how much of it can be woven together using structured data.</p>

<p>Below is a mockup of what the revamped review pages will look like, and the information that can be translated into schema markup:</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png"
			sizes="100vw"
			alt="A web page annotated with structured data markup"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Even the most sprawling content is packed full of information just waiting to be tagged and structured. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e29dc4-2af2-4a37-ae39-a09d7e940446/3-web-page-annotated-with-structured-data.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>There’s no trick to this process. I know what the content is about, so I know where to look in the documentation. In this case, I go to <a href="https://schema.org/MusicAlbum">Schema.org/MusicAlbum</a> and am met with all manner of potential properties, including:</p>

<ul>
<li><code>albumReleaseType</code></li>
<li><code>byArtist</code></li>
<li><code>genre</code></li>
<li><code>producer</code></li>
<li><code>datePublished</code></li>
<li><code>recordedAt</code></li>
</ul>

<p>There are dozens; some exclusive to MusicAlbum, others falling under the larger umbrella of CreativeWork. Digging deeper into the documentation, I find that the markup can connect to <a href="https://musicbrainz.org/">MusicBrainz</a>, a music metadata encyclopedia. The same process unfolds when I go to the <a href="https://schema.org/Review">Review documentation</a>.</p>

<p>From that one simple page, the following information can be gleaned and organized:</p>

<div class="break-out">
<pre><code class="language-json">&lt;script type="application/ld+json"&gt;
    
        {
  "@context": "http://schema.org/",
  "@type": "Review",
  "reviewBody": "Whereas My Love is Cool was guilty of trying too hard no such thing can be said of Visions. The riffs roar and the melodies soar, with the band playing beautifully to Ellie Rowsell's strengths.",
  "datePublished": "October 4, 2017",
  "author": [{
    "@type": "Person",
    "name": "André Dack"
  },
             {
    "@type": "Person",
    "name": "Frederick O'Brien"
  },
             {
    "@type": "Person",
    "name": "Marcus Lawrence"
  }],
  "itemReviewed": {
    "@type": "MusicAlbum",
      "@id": "https://musicbrainz.org/release-group/7f231c61-20b2-49d6-ac66-1cacc4cc775f",
      "byArtist": {
        "@type": "MusicGroup",
        "name": "Wolf Alice",
        "@id": "https://musicbrainz.org/artist/3547f34a-db02-4ab7-b4a0-380e1ef951a9"
      },
      "image": "https://lesoreillescurieuses.files.wordpress.com/2017/10/a1320370042_10.jpg",
      "albumProductionType": "http://schema.org/StudioAlbum",
    "albumReleaseType": "http://schema.org/AlbumRelease",
      "name": "Visions of a Life",
      "numTracks": "12",
      "datePublished": "September 29, 2017"
  },
  "reviewRating": {
    "@type": "Rating",
    "ratingValue": 27,
    "worstRating": 0,
    "bestRating": 30
  }
}
&lt;/script&gt;
</code></pre>
</div>

<p>And honestly, I may yet add a lot more. Initially, I found the things that are already part of a review page’s structures (i.e. artist, album name, overall score) but then new questions began to present themselves. What could be clearer? What could I add?</p>

<p>This should obviously be counterbalanced by questions of what’s <em>unnecessary</em>. Just because you can do something doesn’t mean that you should. There <em>is</em> such a thing as ‘too much information’. Still, sometimes a bit more detail can really take a page up a notch.</p>

<h4>Familiarize Yourself With Schema</h4>

<p>There’s no way around it; the best way to get the ball rolling is to immerse yourself in the documentation. There are tools that implement it for you (more on those <a href="#tools">below</a>), but you’ll get more out of the markup if you have a proper sense of how it works.</p>

<p>Trawl through the <a href="http://schema.org">Schema.org</a> documentation. Whoever you are and whatever your website’s for, the odds are that there are plenty of relevant schemas. The site is very good with examples, so it needn’t remain theoretical.</p>

<p>The step beyond that, of course, is to find rich search results you would like to emulate, visiting the page, and using browser dev tools to look at what they’re doing. They are often excellent examples of websites that know their content inside out. You can also feed code snippets or URLs into Google’s Structured Data Markup Helper, which then generates appropriate schema.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png"
			sizes="100vw"
			alt="Example of Google Structured Data Markup Helper in action"
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Tools like Google’’s Structured Data Markup Helper are excellent for getting to grips with how structured data works. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed67f6f1-33f3-43f7-8ef2-bfc6df1f1469/4-google-structured-data-markup-helper.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>The fundamentals are actually very simple. Once you get your head around them, it’s the breadth of options that take time to explore and play around with. You don’t want to be that person who gets to the end of a design process, looks into schema options, and starts second-guessing everything that’s been done.</p>

<div class="sponsors__lead-place"></div>




<h4>Ask The Right Questions</h4>

<p>Now that you’re armed with your wealth of structured data knowledge, you’re better positioned to lay the foundations for a strong website. Structured data rides a fairly unique line. In the immediate sense, it exists ‘under the hood’ and is there for the benefit of computers. At the same time, it can enable richer experiences for the user.</p>

<p>Therefore, it pays to look at structured data from both a technical and user perspective. How can structured data help my website be better understood? What other resources, online databases, or hardware (e.g. smart speakers) might be interested in what you’re doing? What options appear in the documentation that I hadn’t accounted for? Do I want to add them?</p>

<p>It is especially important to identify recurring types of content. It’s safe to say a blog can expect lots of blog posts over time, so incorporating structured data into post templates will yield the most results. The example I gave above is all well and good on its own, but there’s no reason why the markup process can’t be automated. That’s the plan for us.</p>

<p>Consider also the ways that people might find your content. If there are opportunities to, say, highlight a snippet of copy for use in voice search, do it. It’s that, or leave it to search engines to work it out for themselves. No-one knows your content better than you do, so make use of that understanding with descriptive markup.</p>

<p>You don’t need to guess how content will be understood with structured data. With tools like Google’s Rich Results Tester, you can see exactly how it gives content form and meaning that might otherwise have been overlooked.</p>

<h5 id="tools">Resources And Further Reading</h5>

<ul>
<li>“<a href="https://schema.org/docs/gs.html">Getting Started With Schema.org Using Microdata</a>,” Schema.org</li>
<li>“<a href="https://github.com/schemaorg/schemaorg">Schema.org Project Repository</a>,” GitHub community</li>
<li>“<a href="https://www.google.com/webmasters/markup-helper/">Structured Data Markup Helper</a>,” Googe Webmasters</li>
<li>“<a href="https://codelabs.developers.google.com/codelabs/structured-data/index.html">Add Structured Data To Your Web Pages</a>,” Google Developers Codelabs</li>
<li>“<a href="https://search.google.com/test/rich-results">Rich Results Test</a>,” Google</li>
</ul>

<h3>Quality Content Deserves Quality Markup</h3>

<p>You’ll find no greater advocate of great content than me. The SEO industry loses its collective mind whenever Google rolls out a major search update. The response to the hysteria is always the same: make quality content. To that I add: mark it up properly.</p>

<p>Familiarize yourself with the documentation and be clear on what your site is about. Every piece of information you tag makes it that much easier for it to be indexed and shared with the right people.</p>

<p>Whether you’re a Google devotee or a DuckDuckGo convert, the spirit remains the same. It’s not about ranking so much as it is about making websites as good as possible. Accommodating structured data will make other aspects of your website better.</p>

<p>You don’t need to trust tech to understand what your content is about &mdash; you can tell it. From reviews to recipes to audio search, developers can add a whole new level of sophistication to their content.</p>

<p>The heart and soul of optimizing a website for search have never changed: produce great content and make it as clear as possible what it is and why it’s useful. Structured data is another tool for that purpose, so use it.</p>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ra, yk, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Chidi Orji</author><title>How To Set Up An Express API Backend Project With PostgreSQL</title><link>https://www.smashingmagazine.com/2020/04/express-api-backend-project-postgresql/</link><pubDate>Wed, 08 Apr 2020 11:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/express-api-backend-project-postgresql/</guid><description>We will take a Test-Driven Development (TDD) approach and the set up Continuous Integration (CI) job to automatically run our tests on Travis CI and AppVeyor, complete with code quality and coverage reporting. We will learn about controllers, models (with PostgreSQL), error handling, and asynchronous Express middleware. Finally, we’ll complete the CI/CD pipeline by configuring automatic deploy on Heroku.
It sounds like a lot, but this tutorial is aimed at beginners who are ready to try their hands on a back-end project with some level of complexity, and who may still be confused as to how all the pieces fit together in a real project.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/express-api-backend-project-postgresql/" />
              <title>How To Set Up An Express API Backend Project With PostgreSQL</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>How To Set Up An Express API Backend Project With PostgreSQL</h1>
                  
                    
                    <address>Chidi Orji</address>
                  
                  <time datetime="2020-04-08T11:00:00&#43;00:00" class="op-published">2020-04-08T11:00:00+00:00</time>
                  <time datetime="2020-04-08T11:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>We will take a Test-Driven Development (TDD) approach and the set up Continuous Integration (CI) job to automatically run our tests on Travis CI and AppVeyor, complete with code quality and coverage reporting. We will learn about controllers, models (with PostgreSQL), error handling, and asynchronous Express middleware. Finally, we’ll complete the CI/CD pipeline by configuring automatic deploy on Heroku.</p>

<p>It sounds like a lot, but this tutorial is aimed at beginners who are ready to try their hands on a back-end project with some level of complexity, and who may still be confused as to how all the pieces fit together in a real project.</p>

<p>It is robust without being overwhelming and is broken down into sections that you can complete in a reasonable length of time.</p>

<h3 id="getting-started">Getting Started</h3>

<p>The first step is to create a new directory for the project and start a new node project. Node is required to continue with this tutorial. If you don’t have it installed, head over to the <a href="https://nodejs.org/en/">official website</a>, download, and install it before continuing.</p>

<p>I will be using yarn as my package manager for this project. There are installation instructions for your specific operating system <a href="https://classic.yarnpkg.com/en/docs/install">here</a>. Feel free to use npm if you like.</p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<p>Open your terminal, create a new directory, and start a Node.js project.</p>

<pre><code class="language-javascript"># create a new directory
mkdir express-api-template

# change to the newly-created directory
cd express-api-template

# initialize a new Node.js project
npm init</code></pre>

<p>Answer the questions that follow to generate a <em>package.json</em> file. This file holds information about your project. Example of such information includes what dependencies it uses, the command to start the project, and so on.</p>

<p>You may now open the project folder in your editor of choice. I use visual studio code. It’s a free IDE with tons of plugins to make your life easier, and it’s available for all major platforms. You can download it from the official <a href="https://code.visualstudio.com/">website</a>.</p>

<p>Create the following files in the project folder:</p>

<ul>
<li><em>README.md</em></li>
<li><em>.editorconfig</em></li>
</ul>

<p>Here’s a description of what .editorconfig does from the <a href="https://editorconfig.org/">EditorConfig</a> website. (You probably don’t need it if you’re working solo, but it does no harm, so I’ll leave it here.)</p>

<blockquote>“EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs.”</blockquote>

<p>Open <code>.editorconfig</code> and paste the following code:</p>

<pre><code class="language-javascript">root = true
[*]
indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = false
insert_final_newline = true</code></pre>

<p>The <code>[*]</code> means that we want to apply the rules that come under it to every file in the project. We want an indent size of two spaces and <code>UTF-8</code> character set. We also want to trim trailing white space and insert a final empty line in our file.</p>

<p>Open <em>README.md</em> and add the project name as a first-level element.</p>

<pre><code class="language-javascript"># Express API template</code></pre>

<p>Let’s add version control right away.</p>

<pre><code class="language-javascript"># initialize the project folder as a git repository
git init</code></pre>
   

<p>Create a <em>.gitignore</em> file and enter the following lines:</p>

<pre><code class="language-javascript">node_modules/
yarn-error.log
.env
.nyc_output
coverage
build/</code></pre>

<p>These are all the files and folders we don’t want to track. We don’t have them in our project yet, but we’ll see them as we proceed.</p>

<p>At this point, you should have the following folder structure.</p>

<pre><code class="language-javascript">EXPRESS-API-TEMPLATE
├── .editorconfig
├── .gitignore
├── package.json
└── README.md</code></pre>

<p>I consider this to be a good point to commit my changes and push them to GitHub.</p>

<h3 id="starting-a-new-express-project">Starting A New Express Project</h3>

<p>Express is a Node.js framework for building web applications. According to the <a href="https://expressjs.com/">official website</a>, it is a</p>

<blockquote>
<p>Fast, unopinionated, minimalist web framework for <a href="https://nodejs.org/en/">Node.js</a>.</p>
</blockquote>

<p>There are other great web application frameworks for Node.js, but Express is very popular, with over 47k GitHub stars at the time of this writing.</p>

<p>In this article, we will not be having a lot of discussions about all the parts that make up Express.  For that discussion, I recommend you check out Jamie’s series. The first part is <a href="https://www.smashingmagazine.com/2019/02/node-api-http-es6-javascript">here</a>, and the second part is <a href="https://www.smashingmagazine.com/2019/11/express-es6-javascript-stack-mongodb-mongoose-servers/">here</a>.</p>

<p>Install Express and start a new Express project. It’s possible to manually set up an Express server from scratch but to make our life easier we’ll use the <a href="https://expressjs.com/en/starter/generator.html">express-generator</a> to set up the app skeleton.</p>

<pre><code class="language-javascript"># install the express generator globally
yarn global add express-generator

# install express
yarn add express

# generate the express project in the current folder
express -f</code></pre>

<p>The <code>-f</code> flag forces Express to create the project in the current directory.</p>

<p>We’ll now perform some house-cleaning operations.</p>

<ol>
<li>Delete the file <em>index/users.js</em>.</li>
<li>Delete the folders <code>public/</code> and <code>views/</code>.</li>
<li>Rename the file <em>bin/www</em> to <em>bin/www.js</em>.</li>
<li>Uninstall <code>jade</code> with the command <code>yarn remove jade</code>.</li>
<li>Create a new folder named <code>src/</code> and move the following inside it:
    1. <em>app.js</em> file
    2. <code>bin/</code> folder
    3. <code>routes/</code> folder inside.</li>
<li>Open up <em>package.json</em> and update the <code>start</code> script to look like below.</li>
</ol>

<pre><code class="language-javascript">"start": "node ./src/bin/www"</code></pre>
      

<p>At this point, your project folder structure looks like below. You can see how VS Code highlights the file changes that have taken place.</p>

<pre><code class="language-javascript">EXPRESS-API-TEMPLATE
├── node_modules
├── src
|   ├── bin
│   │   ├── www.js
│   ├── routes
│   |   ├── index.js
│   └── app.js
├── .editorconfig
├── .gitignore
├── package.json
├── README.md
└── yarn.lock</code></pre>

<p>Open <em>src/app.js</em> and replace the content with the below code.</p>

<pre><code class="language-javascript">var logger = require('morgan');
var express = require('express');
var cookieParser = require('cookie-parser');
var indexRouter = require('./routes/index');
var app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use('/v1', indexRouter);

module.exports = app;</code></pre>

<p>After requiring some libraries, we instruct Express to handle every request coming to <code>/v1</code> with <code>indexRouter</code>.</p>

<p>Replace the content of <em>routes/index.js</em> with the below code:</p>

<div class="break-out">
<pre><code class="language-javascript">var express = require('express');
var router = express.Router();
router.get('/', function(req, res, next) {
  return res.status(200).json({ message: 'Welcome to Express API template' });
});
module.exports = router;</code></pre>
</div>

<p>We grab Express, create a router from it and serve the <code>/</code> route, which returns a status code of <code>200</code> and a JSON message.</p>

<p>Start the app with the below command:</p>

<pre><code class="language-bash"># start the app
yarn start</code></pre>

<p>If you’ve set up everything correctly you should only see <code>$ node ./src/bin/www</code> in your terminal.</p>

<p>Visit <code>http://localhost:3000/v1</code> in your browser. You should see the following message:</p>

<pre><code class="language-html">{
  "message": "Welcome to Express API template"
}</code></pre>

<p>This is a good point to commit our changes.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/01-install-express">01-install-express</a>.</em></li>
</ul>

<div class="sponsors__lead-place"></div>




<h3 id="converting-our-code-to-es6">Converting Our Code To <code>ES6</code></h3>

<p>The code generated by <code>express-generator</code> is in <code>ES5</code>, but in this article, we will be writing all our code in <code>ES6</code> syntax. So, let’s convert our existing code to <code>ES6</code>.</p>

<p>Replace the content of <em>routes/index.js</em> with the below code:</p>

<div class="break-out">
<pre><code class="language-javascript">import express from 'express';

const indexRouter = express.Router();

indexRouter.get('/', (req, res) =>
  res.status(200).json({ message: 'Welcome to Express API template' })
);

export default indexRouter;</code></pre>
</div>

<p>It is the same code as we saw above, but with the import statement and an arrow function in the <code>/</code> route handler.</p>

<p>Replace the content of <em>src/app.js</em> with the below code:</p>

<pre><code class="language-javascript">import logger from 'morgan';
import express from 'express';
import cookieParser from 'cookie-parser';
import indexRouter from './routes/index';
const app = express();
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use('/v1', indexRouter);

export default app;</code></pre>

<p>Let’s now take a look at the content of <em>src/bin/www.js</em>. We will build it incrementally. Delete the content of <code>src/bin/www.js</code> and paste in the below code block.</p>

<pre><code class="language-javascript">#!/usr/bin/env node
/**
 * Module dependencies.
 */
import debug from 'debug';
import http from 'http';
import app from '../app';
/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = val => {
  const port = parseInt(val, 10);
  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
};

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

// next code block goes here</code></pre>

<p>This code checks if a custom port is specified in the environment variables. If none is set the default port value of <code>3000</code> is set on the app instance, after being normalized to either a string or a number by <code>normalizePort</code>. The server is then created from the <code>http</code> module, with <code>app</code> as the callback function.</p>

<p>The <code>#!/usr/bin/env node</code> line is optional since we would specify node when we want to execute this file. But make sure it is on line 1 of <em>src/bin/www.js</em> file or remove it completely.</p>

<p>Let’s take a look at the error handling function. Copy and paste this code block after the line where the server is created.</p>

<div class="break-out">
<pre><code class="language-javascript">/&#42;&#42;
 &#42; Event listener for HTTP server "error" event.
 &#42;/
const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      alert(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      alert(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/&#42;&#42;
 &#42; Event listener for HTTP server "listening" event.
 &#42;/
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};
/&#42;&#42;
 &#42; Listen on provided port, on all network interfaces.
 &#42;/
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
</code></pre>
</div>

<p>The <code>onError</code> function listens for errors in the http server and displays appropriate error messages. The <code>onListening</code> function simply outputs the port the server is listening on to the console. Finally, the server listens for incoming requests at the  specified address and port.</p>

<p>At this point, all our existing code is in <code>ES6</code> syntax. Stop your server (use <kbd>Ctrl</kbd> + <kbd>C</kbd>) and run <code>yarn start</code>.  You’ll get an error <code>SyntaxError: Invalid or unexpected token</code>. This happens because Node (at the time of writing) doesn’t support some of the syntax we’ve used in our code.</p>

<p>We’ll now fix that in the following section.</p>

<div class="sponsors__lead-place"></div>




<h3 id="configuring-development-dependencies-babel-nodemon-eslint-and-prettier">Configuring Development Dependencies: <code>babel</code>, <code>nodemon</code>, <code>eslint</code>, And <code>prettier</code></h3>

<p>It’s time to set up most of the scripts we’re going to need at this phase of the project.</p>

<p>Install the required libraries with the below commands. You can just copy everything and paste it in your terminal. The comment lines will be skipped.</p>

<div class="break-out">
<pre><code class="language-bash"># install babel scripts
yarn add @babel/cli @babel/core @babel/plugin-transform-runtime @babel/preset-env @babel/register @babel/runtime @babel/node --dev</code></pre>
</div>

<p>This installs all the listed babel scripts as development dependencies. Check your <em>package.json</em> file and you should see a <code>devDependencies</code> section. All the installed scripts will be listed there.</p>

<p>The babel scripts we’re using are explained below:</p>

<table class="tablesaw" data-tablesaw-mode="swipe" data-tablesaw-minimap>
  <tbody>
    <tr>
      <td><code>@babel/cli</code></td>
      <td>A required install for using <code>babel</code>. It allows the use of Babel from the terminal and is available as <code>./node_modules/.bin/babel</code>.</td>
    </tr>
    <tr>
      <td><code>@babel/core</code></td>
      <td>Core Babel functionality. This is a required installation.</td>
    </tr>
    <tr>
      <td><code>@babel/node</code></td>
      <td>This works exactly like the Node.js CLI, with the added benefit of compiling with <code>babel</code> presets and plugins. This is required for use with <code>nodemon</code>.</td>
    </tr>
    <tr>
      <td><code>@babel/plugin-transform-runtime</code></td>
      <td>This helps to avoid duplication in the compiled output.</td>
    </tr>
    <tr>
      <td><code>@babel/preset-env</code></td>
      <td>A collection of plugins that are responsible for carrying out code transformations.</td>
    </tr>
    <tr>
      <td><code>@babel/register</code></td>
      <td>This compiles files on the fly and is specified as a requirement during tests.</td>
    </tr>
    <tr>
      <td><code>@babel/runtime</code></td>
      <td>This works in conjunction with <code>@babel/plugin-transform-runtime</code>.</td>
    </tr>
  </tbody>
</table>

<p>Create a file named <em>.babelrc</em> at the root of your project and add the following code:</p>

<pre><code class="language-javascript">{
  "presets": ["@babel/preset-env"],
  "plugins": ["@babel/transform-runtime"]
}</code></pre>

<p>Let’s install <code>nodemon</code></p>

<pre><code class="language-javascript"># install nodemon
yarn add nodemon --dev</code></pre>

<p><code>nodemon</code> is a library that monitors our project source code and automatically restarts our server whenever it observes any changes.</p>

<p>Create a file named <em>nodemon.json</em> at the root of your project and add the code below:</p>

<pre><code class="language-json">{
  "watch": [
    "package.json",
    "nodemon.json",
    ".eslintrc.json",
    ".babelrc",
    ".prettierrc",
    "src/"
  ],
  "verbose": true,
  "ignore": ["*.test.js", "*.spec.js"]
}</code></pre>

<p>The <code>watch</code> key tells <code>nodemon</code> which files and folders to watch for changes. So, whenever any of these files changes, nodemon restarts the server. The <code>ignore</code> key tells it the files not to watch for changes.</p>

<p>Now update the <code>scripts</code> section of your <em>package.json</em> file to look like the following:</p>

<pre><code class="language-javascript"># build the content of the src folder
"prestart": "babel ./src --out-dir build"

# start server from the build folder
"start": "node ./build/bin/www"

# start server in development mode
"startdev": "nodemon --exec babel-node ./src/bin/www"</code></pre>

<ol>
<li><code>prestart</code> scripts builds the content of the <code>src/</code> folder and puts it in the <code>build/</code> folder. When you issue the <code>yarn start</code> command, this script runs first before the <code>start</code> script.</li>
<li><code>start</code> script now serves the content of the <code>build/</code> folder instead of the <code>src/</code> folder we were serving previously. This is the script you’ll use when serving the file in production. In fact, services like Heroku automatically run this script when you deploy.</li>
<li><code>yarn startdev</code> is used to start the server during development. From now on we will be using this script as we develop the app. Notice that we’re now using <code>babel-node</code> to run the app instead of regular <code>node</code>. The <code>--exec</code> flag forces <code>babel-node</code> to serve the <code>src/</code> folder. For the <code>start</code> script, we use <code>node</code> since the files in the <code>build/</code>  folder have been compiled to ES5.</li>
</ol>

<p>Run <code>yarn startdev</code> and visit <a href="http://localhost:3000/v1">http://localhost:3000/v1</a>. Your server should be up and running again.</p>

<p>The final step in this section is to configure <code>ESLint</code> and <code>prettier</code>. ESLint helps with enforcing syntax rules while prettier helps for formatting our code properly for readability.</p>

<p>Add both of them with the command below. You should run this on a separate terminal while observing the terminal where our server is running. You should see the server restarting. This is because we’re monitoring <em>package.json</em> file for changes.</p>

<div class="break-out">
<pre><code class="language-javascript"># install elsint and prettier

yarn add eslint eslint-config-airbnb-base eslint-plugin-import prettier --dev</code></pre>
</div>

<p>Now create the <em>.eslintrc.json</em> file in the project <code>root</code> and add the below code:</p>

<pre><code class="language-javascript">{
  "env": {
    "browser": true,
    "es6": true,
    "node": true,
    "mocha": true
  },
  "extends": ["airbnb-base"],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "rules": {
    "indent": ["warn", 2],
    "linebreak-style": ["error", "unix"],
    "quotes": ["error", "single"],
    "semi": ["error", "always"],
    "no-console": 1,
    "comma-dangle": [0],
    "arrow-parens": [0],
    "object-curly-spacing": ["warn", "always"],
    "array-bracket-spacing": ["warn", "always"],
    "import/prefer-default-export": [0]
  }
}</code></pre>

<p>This file mostly defines some rules against which <code>eslint</code> will check our code. You can see that we’re extending the style rules used by Airbnb.</p>

<p>In the <code>&quot;rules&quot;</code> section, we define whether <code>eslint</code> should show a warning or an error when it encounters certain violations. For instance, it shows a warning message on our terminal for any indentation that does not use 2 spaces. A value of <code>[0]</code> turns off a rule, which means that we won’t get a warning or an error if we violate that rule.</p>

<p>Create a file named <em>.prettierrc</em> and add the code below:</p>

<pre><code class="language-javascript">{
  "trailingComma": "es5",
  "tabWidth": 2,
  "semi": true,
  "singleQuote": true
}</code></pre>

<p>We’re setting a tab width of <code>2</code> and enforcing the use of single quotes throughout our application. Do check the prettier <a href="https://prettier.io/docs/en/options.html">guide</a> for more styling options.</p>

<p>Now add the following scripts to your <em>package.json</em>:</p>

<div class="break-out">
<pre><code class="language-json"># add these one after the other

"lint": "./node_modules/.bin/eslint ./src"

"pretty": "prettier --write '&#42;&#42;/&#42;.{js,json}' '!node_modules/&#42;&#42;'"

"postpretty": "yarn lint --fix"</code></pre>
</div>

<p>Run <code>yarn lint</code>. You should see a number of errors and warnings in the console.</p>

<p>The <code>pretty</code> command prettifies our code. The <code>postpretty</code> command is run immediately after. It runs the <code>lint</code> command with the <code>--fix</code> flag appended. This flag tells <code>ESLint</code> to automatically fix common linting issues. In this way, I mostly run the <code>yarn pretty</code> command without bothering about the <code>lint</code> command.</p>

<p>Run <code>yarn pretty</code>. You should see that we have only two warnings about the presence of <code>alert</code> in the <em>bin/www.js</em> file.</p>

<p>Here’s what our project structure looks like at this point.</p>

<pre><code class="language-javascript">EXPRESS-API-TEMPLATE
├── build
├── node_modules
├── src
|   ├── bin
│   │   ├── www.js
│   ├── routes
│   |   ├── index.js
│   └── app.js
├── .babelrc
├── .editorconfig
├── .eslintrc.json
├── .gitignore
├── .prettierrc
├── nodemon.json
├── package.json
├── README.md
└── yarn.lock</code></pre>

<p>You may find that you have an additional file,  <code>yarn-error.log</code> in your project root. Add it to  <code>.gitignore</code> file. Commit your changes.</p>

<ul>
<li><em>The corresponding branch at this point in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/02-dev-dependencies">02-dev-dependencies</a>.</em></li>
</ul>

<h3 id="settings-and-environment-variables-in-our-env-file">Settings And Environment Variables In Our <em>.env</em> File</h3>

<p>In nearly every project, you’ll need somewhere to store settings that will be used throughout your app e.g. an AWS secret key. We store such settings as environment variables. This keeps them away from prying eyes, and we can use them within our application as needed.</p>

<p>I like having a <em>settings.js</em> file with which I read all my environment variables. Then, I can refer to the settings file from anywhere within my app. You’re at liberty to name this file whatever you want, but there’s some kind of consensus about naming such files <em>settings.js</em> or <em>config.js</em>.</p>

<p>For our environment variables, we’ll keep them in a <code>.env</code> file and read them into our <code>settings</code> file from there.</p>

<p>Create the <em>.env</em> file at the root of your project and enter the below line:</p>

<pre><code class="language-env">TEST_ENV_VARIABLE="Environment variable is coming across"
</code></pre>

<p>To be able to read environment variables into our project, there’s a nice library, <code>dotenv</code> that reads our <code>.env</code> file and gives us access to the environment variables defined inside. Let’s install it.</p>

<pre><code class="language-env"># install dotenv
yarn add dotenv</code></pre>

<p>Add the <em>.env</em> file to the list of files being watched by <code>nodemon</code>.</p>

<p>Now, create the <em>settings.js</em> file inside the <code>src/</code> folder and add the below code:</p>

<div class="break-out">
<pre><code class="language-javascript">import dotenv from 'dotenv';
dotenv.config();
export const testEnvironmentVariable = process.env.TEST_ENV_VARIABLE;</code></pre>
</div>

<p>We import the <code>dotenv</code> package and call its config method. We then export the <code>testEnvironmentVariable</code> which we set in our <code>.env</code> file.</p>

<p>Open <em>src/routes/index.js</em> and replace the code with the one below.</p>

<div class="break-out">
<pre><code class="language-javascript">import express from 'express';
import { testEnvironmentVariable } from '../settings';

const indexRouter = express.Router();

indexRouter.get('/', (req, res) => res.status(200).json({ message: testEnvironmentVariable }));

export default indexRouter;</code></pre>
</div>

<p>The only change we’ve made here is that we import <code>testEnvironmentVariable</code> from our <code>settings</code> file and use is as the return message for a request from the <code>/</code> route.</p>

<p>Visit <a href="http://localhost:3000/v1">http://localhost:3000/v1</a> and you should see the message, as shown below.</p>

<pre><code class="language-javascript">{
  "message": "Environment variable is coming across."
}</code></pre>

<p>And that’s it. From now on we can add as many environment variables as we want and we can export them from our <em>settings.js</em> file.</p>

<p>This is a good point to commit your code. Remember to prettify and lint your code.</p>

<ul>
<li><em>The corresponding branch on my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/03-env-variables">03-env-variables</a>.</em></li>
</ul>

<h3 id="writing-our-first-test">Writing Our First Test</h3>

<p>It’s time to incorporate testing into our app. One of the things that give the developer confidence in their code is tests. I’m sure you’ve seen countless articles on the web preaching Test-Driven Development (TDD). It cannot be emphasized enough that your code needs some measure of testing. TDD is very easy to follow when you’re working with Express.js.</p>

<p>In our tests, we will make calls to our API endpoints and check to see if what is returned is what we expect.</p>

<p>Install the required dependencies:</p>

<pre><code class="language-bash"># install dependencies

yarn add mocha chai nyc sinon-chai supertest coveralls --dev</code></pre>

<p>Each of these libraries has its own role to play in our tests.</p>

<table class="tablesaw" data-tablesaw-mode="swipe" data-tablesaw-minimap>
  <tbody>
    <tr>
      <td><code>mocha</code></td>
      <td>test runner</td>
    </tr>
    <tr>
      <td><code>chai</code></td>
      <td>used to make assertions</td>
    </tr>
    <tr>
      <td><code>nyc</code></td>
      <td>collect test coverage report</td>
    </tr>
    <tr>
      <td><code>sinon-chai</code></td>
      <td>extends chai’s assertions</td>
    </tr>
    <tr>
      <td><code>supertest</code></td>
      <td>used to make HTTP calls to our API endpoints</td>
    </tr>
    <tr>
      <td><code>coveralls</code></td>
      <td>for uploading test coverage to coveralls.io</td>
    </tr>
  </tbody>
</table>

<p>Create a new <code>test/</code> folder at the root of your project. Create two files inside this folder:</p>

<ul>
<li><em>test/setup.js</em></li>
<li><em>test/index.test.js</em></li>
</ul>

<p>Mocha will find the <code>test/</code> folder automatically.</p>

<p>Open up <em>test/setup.js</em> and paste the below code. This is just a helper file that helps us organize all the imports we need in our test files.</p>

<pre><code class="language-javascript">import supertest from 'supertest';
import chai from 'chai';
import sinonChai from 'sinon-chai';
import app from '../src/app';

chai.use(sinonChai);
export const { expect } = chai;
export const server = supertest.agent(app);
export const BASE_URL = '/v1';
</code></pre>

<p>This is like a settings file, but for our tests. This way we don’t have to initialize everything inside each of our test files. So we import the necessary packages and export what we initialized &mdash; which we can then import in the files that need them.</p>

<p>Open up <em>index.test.js</em> and paste the following test code.</p>

<pre><code class="language-javascript">import { expect, server, BASE_URL } from './setup';

describe('Index page test', () => {
  it('gets base url', done => {
    server
      .get(`${BASE_URL}/`)
      .expect(200)
      .end((err, res) => {
        expect(res.status).to.equal(200);
        expect(res.body.message).to.equal(
          'Environment variable is coming across.'
        );
        done();
      });
  });
});</code></pre>

<p>Here we make a request to get the base endpoint, which is <code>/</code> and assert that the <code>res.</code><code>body</code> object has a <code>message</code> key with a value of <code>Environment variable is coming across.</code></p>

<p>If you’re not familiar with the <code>describe</code>, <code>it</code> pattern, I encourage you to take a quick look at Mocha’s “<a href="https://mochajs.org/#getting-started">Getting Started</a>” doc.</p>

<p>Add the test command to the <code>scripts</code> section of <em>package.json</em>.</p>

<div class="break-out">
<pre><code class="language-javascript">"test": "nyc --reporter=html --reporter=text --reporter=lcov mocha -r @babel/register"</code></pre>
</div>

<p>This script executes our test with <code>nyc</code> and generates three kinds of coverage report: an HTML report, outputted to the <code>coverage/</code> folder; a text report outputted to the terminal and an lcov report outputted to the <code>.nyc_output/</code> folder.</p>

<p>Now run <code>yarn test</code>. You should see a text report in your terminal just like the one in the below photo.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Test coverage report (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0a8035c-d7ad-4b6b-acb9-474495a5c84d/01-first-test-report.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Notice that two additional folders are generated:</p>

<ul>
<li><code>.nyc_output/</code></li>
<li><code>coverage/</code></li>
</ul>

<p>Look inside <code>.gitignore</code> and you’ll see that we’re already ignoring both. I encourage you to open up <code>coverage/index.html</code> in a browser and view the test report for each file.</p>

<p>This is a good point to commit your changes.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/04-first-test">04-first-test</a>.</em></li>
</ul>

<h3 id="continuous-integration-cd-and-badges-travis-coveralls-code-climate-appveyor">Continuous Integration(CD) And Badges: Travis, Coveralls, Code Climate, AppVeyor</h3>

<p>It’s now time to configure continuous integration and deployment (CI/CD) tools. We will configure common services such as <code>travis-ci</code>, <code>coveralls</code>, <code>AppVeyor</code>, and <code>codeclimate</code> and add badges to our README file.</p>

<p>Let’s get started.</p>

<h4 id="travis-ci">Travis CI</h4>

<p>Travis CI is a tool that runs our tests automatically each time we push a commit to GitHub (and recently, Bitbucket) and each time we create a pull request. This is mostly useful when making pull requests by showing us if the our new code has broken any of our tests.</p>

<ol>
<li>Visit <a href="https://travis-ci.com/">travis-ci.com</a> or <a href="https://travis-ci.org/">travis-ci.org</a> and create an account if you don’t have one. You have to sign up with your GitHub account.</li>
<li>Hover over the dropdown arrow next to your profile picture and click on <code>settings</code>.</li>
<li>Under <code>Repositories</code> tab click <code>Manage repositories on Github</code> to be redirected to Github.</li>
<li>On the GitHub page, scroll down to <code>Repository access</code>  and click the checkbox next to <code>Only select repositories</code>.</li>
<li>Click the <code>Select repositories</code> dropdown and find the <code>express-api-template</code> repo. Click it to add it to the list of repositories you want to add to <code>travis-ci</code>.</li>
<li>Click <code>Approve and install</code> and wait to be redirected back to <code>travis-ci</code>.</li>
<li>At the top of the repo page, close to the repo name, click on the <code>build unknown</code> icon. From the Status Image modal, select markdown from the format dropdown.</li>
<li>Copy the resulting code and paste it in your <em>README.md</em> file.</li>
<li>On the project page, click on <code>More options</code> &gt; <code>Settings</code>. Under <code>Environment Variables</code> section, add the <code>TEST_ENV_VARIABLE</code> env variable. When entering its value, be sure to have it within double quotes like this <code>&quot;Environment variable is coming across.&quot;</code></li>
<li>Create <em>.travis.yml</em> file at the root of your project and paste in the below code (We’ll set the value of <code>CC_TEST_REPORTER_ID</code> in the <a href="#codeclimate">Code Climate section</a>).</li>
</ol>

<div class="break-out">
<pre><code class="language-yml">language: node_js
env:
  global:
    - CC_TEST_REPORTER_ID=get-this-from-code-climate-repo-page
matrix:
  include:
  - node_js: '12'
cache:
  directories: [node_modules]
install:
  yarn
after_success: yarn coverage
before_script:
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build
script:
  - yarn test
after_script:
  - ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESUL
</code></pre>
</div>

<p>First, we tell Travis to run our test with Node.js, then set the <code>CC_TEST_REPORTER_ID</code> global environment variable (we’ll get to this in the <a href="#codeclimate">Code Climate section</a>). In the <code>matrix</code> section, we tell Travis to run our tests with Node.js v12. We also want to cache the <code>node_modules/</code> directory so it doesn’t have to be regenerated every time.</p>

<p>We install our dependencies using the <code>yarn</code> command which is a shorthand for <code>yarn install</code>. The <code>before_script</code> and <code>after_script</code> commands are used to upload coverage results to <code>codeclimate</code>. We’ll configure <code>codeclimate</code> shortly. After <code>yarn test</code> runs successfully, we want to also run <code>yarn coverage</code> which will upload our coverage report to <a href="https://coveralls.io/">coveralls.io</a>.</p>

<h4 id="coveralls">Coveralls</h4>

<p>Coveralls uploads test coverage data for easy visualization. We can view the test coverage on our local machine from the coverage folder, but Coveralls makes it available outside our local machine.</p>

<ol>
<li>Visit <a href="https://coveralls.io/">coveralls.io</a> and either sign in or sign up with your Github account.</li>
<li>Hover over the left-hand side of the screen to reveal the navigation menu. Click on <code>ADD REPOS</code>.</li>
<li>Search for the <code>express-api-template</code> repo and turn on coverage using the toggle button on the left-hand side. If you can’t find it, click on <code>SYNC REPOS</code> on the upper right-hand corner and try again. Note that your repo has to be public, unless you have a PRO account.</li>
<li>Click details to go to the repo details page.</li>
<li>Create the <em>.coveralls.yml</em> file at the root of your project and enter the below code. To get the <code>repo_token</code>, click on the repo details. You will find it easily on that page. You could just do a browser search for <code>repo_token</code>.</li>
</ol>

<pre><code class="language-yml">repo_token: get-this-from-repo-settings-on-coveralls.io</code></pre>

<p>This token maps your coverage data to a repo on Coveralls. Now, add the <code>coverage</code> command to the <code>scripts</code> section of your <em>package.json</em> file:</p>

<pre><code class="language-json">&#34;coverage&#34;: &#34;nyc report --reporter=text-lcov | coveralls&#34;
</code></pre>

<p>This command uploads the coverage report in the <code>.nyc_output</code> folder to <a href="https://coveralls.io/">coveralls.io</a>. Turn on your Internet connection and run:</p>

<pre><code class="language-bash">yarn coverage
</code></pre>

<p>This should upload the existing coverage report to coveralls. Refresh the repo page on coveralls to see the full report.</p>

<p>On the details page, scroll down to find the <code>BADGE YOUR REPO</code> section. Click on the <code>EMBED</code> dropdown and copy the markdown code and paste it into your <em>README</em> file.</p>

<h4 id="codeclimate">Code Climate</h4>

<p>Code Climate is a tool that helps us measure code quality. It shows us maintenance metrics by checking our code against some defined patterns. It detects things such as unnecessary repetition and deeply nested for loops. It also collects test coverage data just like coveralls.io.</p>

<ol>
<li>Visit <a href="https://codeclimate.com/oss/dashboard">codeclimate.com</a> and click on ‘Sign up with GitHub’. Log in if you already have an account.</li>
<li>Once in your dashboard, click on <code>Add a repository</code>.</li>
<li>Find the <code>express-api-template</code> repo from the list and click on <code>Add Repo</code>.</li>
<li>Wait for the build to complete and redirect to the repo dashboard.</li>
<li>Under <code>Codebase Summary</code>, click on <code>Test Coverage</code>. Under the <code>Test coverage</code> menu, copy the <code>TEST REPORTER ID</code> and paste it in your <em>.travis.yml</em> as the value of <code>CC_TEST_REPORTER_ID</code>.</li>
<li>Still on the same page, on the left-hand navigation, under <code>EXTRAS</code>, click on Badges. Copy the <code>maintainability</code> and <code>test coverage</code> badges in markdown format and paste them into your <em>README.md</em> file.</li>
</ol>

<p>It’s important to note that there are two ways of configuring maintainability checks. There are the default settings that are applied to every repo, but if you like, you could provide a <em>.codeclimate.yml</em> file at the root of your project. I’ll be using the default settings, which you can find under the <code>Maintainability</code> tab of the repo settings page. I encourage you to take a look at least. If you still want to configure your own settings, this <a href="https://docs.codeclimate.com/docs/advanced-configuration">guide</a> will give you all the information you need.</p>

<h4 id="appveyor">AppVeyor</h4>

<p>AppVeyor and Travis CI are both automated test runners. The main difference is that travis-ci runs tests in a Linux environment while AppVeyor runs tests in a Windows environment. This section is included to show how to get started with AppVeyor.</p>

<ul>
<li>Visit <a href="https://ci.appveyor.com">AppVeyor</a> and log in or sign up.</li>
<li>On the next page, click on <code>NEW PROJECT</code>.</li>
<li>From the repo list, find the <code>express-api-template</code> repo. Hover over it and click <code>ADD</code>.</li>
<li>Click on the <code>Settings</code> tab. Click on <code>Environment</code> on the left navigation. Add  <code>TEST_ENV_VARIABLE</code> and its value. Click ‘Save’ at the bottom of the page.</li>
<li>Create the <em>appveyor.yml</em> file at the root of your project and paste in the below code.</li>
</ul>

<pre><code class="language-yml">environment:
  matrix:
  - nodejs_version: "12"
install:
  - yarn
test_script:
  - yarn test
build: off</code></pre>

<p>This code instructs AppVeyor to run our tests using Node.js v12. We then install our project dependencies with the <code>yarn</code> command. <code>test_script</code> specifies the command to run our test. The last line tells AppVeyor not to create a build folder.</p>

<p>Click on the <code>Settings</code> tab. On the left-hand navigation, click on badges. Copy the markdown code and paste it in your <em>README.md</em> file.</p>

<p>Commit your code and push to GitHub. If you have done everything as instructed all tests should pass and you should see your shiny new badges as shown below. Check again that you have set the environment variables on Travis and AppVeyor.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Repo CI/CD badges. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4daf736a-f918-48a9-af01-04a785aedab7/02-express-api-backend-project-with-postgresql.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Now is a good time to commit our changes.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/05-ci">05-ci</a>.</em></li>
</ul>

<h3 id="adding-a-controller">Adding A Controller</h3>

<p>Currently, we’re handling the <code>GET</code> request to the root URL, <code>/v1</code>, inside the <em>src/routes/index.js</em>. This works as expected and there is nothing wrong with it. However, as your application grows, you want to keep things tidy. You want concerns to be separated &mdash; you want a clear separation between the code that handles the request and the code that generates the response that will be sent back to the client. To achieve this, we write <code>controllers</code>. Controllers are simply functions that handle requests coming through a particular URL.</p>

<p>To get started, create a <code>controllers/</code>  folder inside the <code>src/</code> folder. Inside <code>controllers</code> create two files: <em>index.js</em> and <em>home.js</em>. We would export our functions from within <em>index.js</em>.  You could name <em>home.js</em> anything you want, but typically you want to name controllers after what they control. For example, you might have a file <em>usersController.js</em> to hold every function related to users in your app.</p>

<p>Open <em>src/controllers/home.js</em> and enter the code below:</p>

<div class="break-out">
<pre><code class="language-javascript">import { testEnvironmentVariable } from '../settings';

export const indexPage = (req, res) => res.status(200).json({ message: testEnvironmentVariable });</code></pre>
</div>

<p>You will notice that we only moved the function that handles the request for the <code>/</code> route.</p>

<p>Open <em>src/controllers/index.js</em> and enter the below code.</p>

<pre><code class="language-javascript">// export everything from home.js
export * from './home';</code></pre>

<p>We export everything from the <em>home.js</em> file. This allows us shorten our import statements to <code>import { indexPage } from '../controllers';</code></p>

<p>Open <em>src/routes/index.js</em> and replace the code there with the one below:</p>

<pre><code class="language-javascript">import express from 'express';
import { indexPage } from '../controllers';
const indexRouter = express.Router();

indexRouter.get('/', indexPage);

export default indexRouter;</code></pre>

<p>The only change here is that we’ve provided a function to handle the request to the <code>/</code> route.</p>

<p>You just successfully wrote your first controller. From here it’s a matter of adding more files and functions as needed.</p>

<p>Go ahead and play with the app by adding a few more routes and controllers. You could add a route and a controller for the about page. Remember to update your test, though.</p>

<p>Run <code>yarn test</code> to confirm that we’ve not broken anything. Does your test pass? That’s cool.</p>

<p>This is a good point to commit our changes.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/06-controllers">06-controllers</a>.</em></li>
</ul>

<h3 id="connecting-the-postgresql-database-and-writing-a-model">Connecting The <code>PostgreSQL</code> Database And Writing A Model</h3>

<p>Our controller currently returns hard-coded text messages. In a real-world app, we often need to store and retrieve information from a database. In this section, we will connect our app to a PostgreSQL database.</p>

<p>We’re going to implement the storage and retrieval of simple text messages using a database. We have two options for setting a database: we could provision one from a cloud server, or we could set up our own locally.</p>

<p>I would recommend you provision a database from a cloud server. <a href="https://www.elephantsql.com/">ElephantSQL</a> has a free plan that gives 20MB of free storage which is sufficient for this tutorial. Visit the site and click on <code>Get a managed database today</code>. Create an account (if you don’t have one) and follow the instructions to create a free plan. Take note of the URL on the database details page. We’ll be needing it soon.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      ElephantSQL turtle plan details page (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eacbd2b-e090-43f6-96dc-f6ab7763b2b8/03-express-api-backend-project-with-postgresql.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>If you would rather set up a database locally, you should visit the <a href="https://www.postgresql.org/">PostgreSQL</a> and <a href="https://www.pgadmin.org/">PgAdmin</a> sites for further instructions.</p>

<p>Once we have a database set up, we need to find a way to allow our Express app to communicate with our database. Node.js by default doesn’t support reading and writing to <code>PostgreSQL</code> database, so we’ll be using an excellent library, appropriately named, <a href="https://node-postgres.com/">node-postgres</a>.</p>

<p><code>node-postgres</code> executes <code>SQL</code> queries in node and returns the result as an object, from which we can grab items from the rows key.</p>

<p>Let’s connect <code>node-postgres</code> to our application.</p>

<pre><code class="language-bash"># install node-postgres
yarn add pg</code></pre>

<p>Open <em>settings.js</em> and add the line below:</p>

<pre><code class="language-javascript">export const connectionString = process.env.CONNECTION_STRING;</code></pre>

<p>Open your <code>.env</code> file and add the <code>CONNECTION_STRING</code> variable. This is the connection string we’ll be using to establish a connection to our database. The general form of the connection string is shown below.</p>

<div class="break-out">
<pre><code class="language-javascript">CONNECTION_STRING="postgresql://dbuser:dbpassword@localhost:5432/dbname"</code></pre>
</div>

<p>If you’re using elephantSQL you should copy the URL from the database details page.</p>

<p>Inside your <code>/src</code> folder, create a new folder called <code>models/</code>. Inside this folder, create two files:</p>

<ul>
<li><em>pool.js</em></li>
<li><em>model.js</em></li>
</ul>

<p>Open <em>pools.js</em> and paste the following code:</p>

<pre><code class="language-javascript">import { Pool } from 'pg';
import dotenv from 'dotenv';
import { connectionString } from '../settings';
dotenv.config();

export const pool = new Pool({ connectionString });</code></pre>

<p>First, we import the <code>Pool</code> and <code>dotenv</code> from the <code>pg</code> and <code>dotenv</code> packages, and then import the settings we created for our postgres database before initializing <code>dotenv</code>. We establish a connection to our database with the <code>Pool</code> object. In <code>node-postgres</code>, every query is executed by a client. A Pool is a collection of clients for communicating with the database.</p>

<p>To create the connection, the pool constructor takes a config object. You can read more about all the possible configurations <a href="https://node-postgres.com/api/pool">here</a>. It also accepts a single connection string, which I will use here.</p>

<p>Open <em>model.js</em> and paste the following code:</p>

<div class="break-out">
<pre><code class="language-javascript">import { pool } from './pool';

class Model {
  constructor(table) {
    this.pool = pool;
    this.table = table;
    this.pool.on('error', (err, client) => `Error, ${err}, on idle client${client}`);
  }

  async select(columns, clause) {
    let query = `SELECT ${columns} FROM ${this.table}`;
    if (clause) query += clause;
    return this.pool.query(query);
  }
}

export default Model;</code></pre>
</div>

<p>We create a model class whose constructor accepts the database table we wish to operate on. We’ll be using a single pool for all our models.</p>

<p>We then create a <code>select</code> method which we will use to retrieve items from our database. This method accepts the columns we want to retrieve and a clause, such as a <code>WHERE</code> clause. It returns the result of the query, which is a <code>Promise</code>. Remember we said earlier that every query is executed by a client, but here we execute the query with pool. This is because, when we use <code>pool.query</code>, <code>node-postgres</code> executes the query using the first available idle client.</p>

<p>The query you write is entirely up to you, provided it is a valid <code>SQL</code> statement that can be executed by a Postgres engine.</p>

<p>The next step is to actually create an API endpoint to utilize our newly connected database. Before we do that, I’d like us to create some utility functions. The goal is for us to have a way to perform common database operations from the command line.</p>

<p>Create a folder, <code>utils/</code> inside the <code>src/</code> folder. Create three files inside this folder:</p>

<ul>
<li><em>queries.js</em></li>
<li><em>queryFunctions.js</em></li>
<li><em>runQuery.js</em></li>
</ul>

<p>We’re going to create functions to create a table in our database, insert seed data in the table, and to delete the table.</p>

<p>Open up <em>queries.js</em> and paste the following code:</p>

<pre><code class="language-javascript">export const createMessageTable = `
DROP TABLE IF EXISTS messages;
CREATE TABLE IF NOT EXISTS messages (
  id SERIAL PRIMARY KEY,
  name VARCHAR DEFAULT '',
  message VARCHAR NOT NULL
  )
  `;

export const insertMessages = `
INSERT INTO messages(name, message)
VALUES ('chidimo', 'first message'),
      ('orji', 'second message')
`;

export const dropMessagesTable = 'DROP TABLE messages';
</code></pre>

<p>In this file, we define three SQL query strings. The first query deletes and recreates the <code>messages</code> table. The second query inserts two rows into the <code>messages</code> table. Feel free to add more items here. The last query drops/deletes the <code>messages</code> table.</p>

<p>Open <em>queryFunctions.js</em> and paste the following code:</p>

<div class="break-out">
<pre><code class="language-javascript">import { pool } from '../models/pool';
import {
  insertMessages,
  dropMessagesTable,
  createMessageTable,
} from './queries';

export const executeQueryArray = async arr => new Promise(resolve => {
  const stop = arr.length;
  arr.forEach(async (q, index) => {
    await pool.query(q);
    if (index + 1 === stop) resolve();
  });
});

export const dropTables = () => executeQueryArray([ dropMessagesTable ]);
export const createTables = () => executeQueryArray([ createMessageTable ]);
export const insertIntoTables = () => executeQueryArray([ insertMessages ]);</code></pre>
</div>
    

<p>Here, we create functions to execute the queries we defined earlier. Note that the <code>executeQueryArray</code> function executes an array of queries and waits for each one to complete inside the loop. (Don’t do such a thing in production code though). Then, we only resolve the promise once we have executed the last query in the list. The reason for using an array is that the number of such queries will grow as the number of tables in our database grows.</p>

<p>Open <em>runQuery.js</em> and paste the following code:</p>

<div class="break-out">
<pre><code class="language-javascript">import { createTables, insertIntoTables } from './queryFunctions';

(async () => {
  await createTables();
  await insertIntoTables();
})();</code></pre>
</div>

<p>This is where we execute the functions to create the table and insert the messages in the table. Let’s add a command in the <code>scripts</code> section of our <em>package.json</em> to execute this file.</p>

<pre><code class="language-json">"runQuery": "babel-node ./src/utils/runQuery"</code></pre>

<p>Now run:</p>

<pre><code class="language-bash">yarn runQuery
</code></pre>

<p>If you inspect your database, you will see that the <code>messages</code> table has been created and that the messages were inserted into the table.</p>

<p>If you’re using ElephantSQL, on the database details page, click on <code>BROWSER</code> from the left navigation menu. Select the <code>messages</code> table and click <code>Execute</code>. You should see the messages from the <em>queries.js</em> file.</p>

<p>Let’s create a controller and route to display the messages from our database.</p>

<p>Create a new controller file <em>src/controllers/messages.js</em> and paste the following code:</p>

<pre><code class="language-javascript">import Model from '../models/model';

const messagesModel = new Model('messages');
export const messagesPage = async (req, res) => {
  try {
    const data = await messagesModel.select('name, message');
    res.status(200).json({ messages: data.rows });
  } catch (err) {
    res.status(200).json({ messages: err.stack });
  }
};</code></pre>

<p>We import our <code>Model</code> class and create a new instance of that model. This represents the <code>messages</code> table in our database. We then use the <code>select</code> method of the model to query our database. The data (<code>name</code> and <code>message</code>) we get is sent as JSON in the response.</p>

<p>We define the <code>messagesPage</code> controller as an <code>async</code> function. Since <code>node-postgres</code> queries return a promise, we <code>await</code> the result of that query. If we encounter an error during the query we catch it and display the stack to the user. You should decide how choose to handle the error.</p>

<p>Add the get messages endpoint to <em>src/routes/index.js</em> and update the import line.</p>

<pre><code class="language-javascript"># update the import line
import { indexPage, messagesPage } from '../controllers';

# add the get messages endpoint
indexRouter.get('/messages', messagesPage)</code></pre>

<p>Visit <a href="http://localhost:3000/v1/messages">http://localhost:3000/v1/messages</a> and you should see the messages displayed as shown below.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Messages from database. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61480f23-8930-4e4f-affd-ee1548760c39/04-express-api-backend-project-with-postgresql.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Now, let’s update our test file. When doing TDD, you usually write your tests before implementing the code that makes the test pass. I’m taking the opposite approach here because we’re still working on setting up the database.</p>

<p>Create a new file, <em>hooks.js</em> in the <code>test/</code> folder and enter the below code:</p>

<pre><code class="language-javascript">import {
  dropTables,
  createTables,
  insertIntoTables,
} from '../src/utils/queryFunctions';

before(async () => {
  await createTables();
  await insertIntoTables();
});

after(async () => {
  await dropTables();
});</code></pre>

<p>When our test starts, Mocha finds this file and executes it before running any test file. It executes the <code>before</code> hook to create the database and insert some items into it. The test files then run after that. Once the test is finished, Mocha runs the <code>after</code> hook in which we drop the database. This ensures that each time we run our tests, we do so with clean and new records in our database.</p>

<p>Create a new test file <em>test/messages.test.js</em> and add the below code:</p>

<pre><code class="language-javascript">import { expect, server, BASE_URL } from './setup';
describe('Messages', () => {
  it('get messages page', done => {
    server
      .get(`${BASE_URL}/messages`)
      .expect(200)
      .end((err, res) => {
        expect(res.status).to.equal(200);
        expect(res.body.messages).to.be.instanceOf(Array);
        res.body.messages.forEach(m => {
          expect(m).to.have.property('name');
          expect(m).to.have.property('message');
        });
        done();
      });
  });
});</code></pre>

<p>We assert that the result of the call to <code>/messages</code> is an array. For each message object, we assert that it has the <code>name</code> and <code>message</code> property.</p>

<p>The final step in this section is to update the CI files.</p>

<p>Add the following sections to the <em>.travis.yml</em> file:</p>

<pre><code class="language-yml">services:
  - postgresql
addons:
  postgresql: "10"
  apt:
    packages:
    - postgresql-10
    - postgresql-client-10
before_install:
  - sudo cp /etc/postgresql/{9.6,10}/main/pg_hba.conf
  - sudo /etc/init.d/postgresql restart</code></pre>

<p>This instructs Travis to spin up a PostgreSQL 10 database before running our tests.</p>

<p>Add the command to create the database as the first entry in the <code>before_script</code> section:</p>

<pre><code class="language-yml"># add this as the first line in the before_script section

- psql -c 'create database testdb;' -U postgres</code></pre>

<p>Create the <code>CONNECTION_STRING</code> environment variable on Travis, and use the below value:</p>

<div class="break-out">
<pre><code class="language-yml">CONNECTION_STRING="postgresql://postgres:postgres@localhost:5432/testdb"</code></pre>
</div>

<p>Add the following sections to the <em>.appveyor.yml</em> file:</p>

<pre><code class="language-yml">before_test:
  - SET PGUSER=postgres
  - SET PGPASSWORD=Password12!
  - PATH=C:\Program Files\PostgreSQL\10\bin\;%PATH%
  - createdb testdb
services:
  - postgresql101</code></pre>

<p>Add the connection string environment variable to appveyor. Use the below line:</p>

<div class="break-out">
<pre><code class="language-javascript">CONNECTION_STRING=postgresql://postgres:Password12!@localhost:5432/testdb</code></pre>
</div>

<p>Now commit your changes and push to GitHub. Your tests should pass on both Travis CI and AppVeyor.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/07-connect-postgres">07-connect-postgres</a>.</em></li>
</ul>

<p><strong>Note</strong>: <em>I hope everything works fine on your end, but in case you should be having trouble for some reason, you can always check my code in the repo!</em></p>

<p>Now, let’s see how we can add a message to our database. For this step, we’ll need a way to send <code>POST</code> requests to our URL. I’ll be using <a href="https://www.postman.com/">Postman</a> to send <code>POST</code> requests.</p>

<p>Let’s go the TDD route and update our test to reflect what we expect to achieve.</p>

<p>Open <em>test/message.test.js</em> and add the below test case:</p>

<div class="break-out">
<pre><code class="language-javascript">it('posts messages', done => {
  const data = { name: 'some name', message: 'new message' };
  server
    .post(`${BASE_URL}/messages`)
    .send(data)
    .expect(200)
    .end((err, res) => {
      expect(res.status).to.equal(200);
      expect(res.body.messages).to.be.instanceOf(Array);
      res.body.messages.forEach(m => {
        expect(m).to.have.property('id');
        expect(m).to.have.property('name', data.name);
        expect(m).to.have.property('message', data.message);
      });
      done();
    });
});</code></pre>
</div>

<p>This test makes a POST request to the <code>/v1/messages</code> endpoint and we expect an array to be returned. We also check for the <code>id</code>, <code>name</code>, and <code>message</code> properties on the array.</p>

<p>Run your tests to see that this case fails. Let’s now fix it.</p>

<p>To send post requests, we use the post method of the server. We also send the name and message we want to insert. We expect the response to be an array, with a property <code>id</code> and the other info that makes up the query. The <code>id</code> is proof that a record has been inserted into the database.</p>

<p>Open <em>src/models/model.js</em> and add the <code>insert</code> method:</p>

<pre><code class="language-javascript">async insertWithReturn(columns, values) {
  const query = `
        INSERT INTO ${this.table}(${columns})
        VALUES (${values})
        RETURNING id, ${columns}
    `;
  return this.pool.query(query);
}</code></pre>

<p>This is the method that allows us to insert messages into the database. After inserting the item, it returns the <code>id</code>, <code>name</code> and <code>message</code>.</p>

<p>Open <em>src/controllers/messages.js</em> and add the below controller:</p>

<div class="break-out">
<pre><code class="language-javascript">export const addMessage = async (req, res) => {
  const { name, message } = req.body;
  const columns = 'name, message';
  const values = `'${name}', '${message}'`;
  try {
    const data = await messagesModel.insertWithReturn(columns, values);
    res.status(200).json({ messages: data.rows });
  } catch (err) {
    res.status(200).json({ messages: err.stack });
  }
};</code></pre>
</div>

<p>We destructure the request body to get the name and message. Then we use the values to form an SQL query string which we then execute with the <code>insertWithReturn</code> method of our model.</p>

<p>Add the below <code>POST</code> endpoint to <em>/src/routes/index.js</em> and update your import line.</p>

<div class="break-out">
<pre><code class="language-javascript">import { indexPage, messagesPage, addMessage } from '../controllers';

indexRouter.post('/messages', addMessage);</code></pre>
</div>

<p>Run your tests to see if they pass.</p>

<p>Open Postman and send a <code>POST</code> request to the <code>messages</code> endpoint. If you’ve just run your test, remember to run <code>yarn query</code> to recreate the <code>messages</code> table.</p>

<pre><code class="language-bash">yarn query
</code></pre>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      POST request to messages endpoint. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d69d2e52-8a94-4fa1-a883-772c6c1ab2c9/05-express-api-backend-project-with-postgresql.png'>Large preview</a>)
    </figcaption>
  
</figure>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      GET request showing newly added message. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd02979f-dbd0-490d-82cf-c7a7369f91e6/06-express-api-backend-project-with-postgresql.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Commit your changes and push to GitHub. Your tests should pass on both Travis and AppVeyor. Your test coverage will drop by a few points, but that’s okay.</p>

<ul>
<li><em>The corresponding branch on my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/08-post-to-db">08-post-to-db</a>.</em></li>
</ul>

<h3 id="middleware">Middleware</h3>

<p>Our discussion of Express won’t be complete without talking about middleware. The Express documentation describes a middlewares as:</p>

<blockquote>“[...] functions that have access to the <a href="https://expressjs.com/en/4x/api.html#req">request object</a> (<code>req</code>), the <a href="https://expressjs.com/en/4x/api.html#res">response object</a> (<code>res</code>), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named <code>next</code>.”</blockquote>

<p>A middleware can perform any number of functions such as authentication, modifying the request body, and so on. See the <a href="https://expressjs.com/en/guide/using-middleware.html">Express documentation on using middleware</a>.</p>

<p>We’re going to write a simple middleware that modifies the request body. Our middleware will append the word <code>SAYS:</code> to the incoming message before it is saved in the database.</p>

<p>Before we start, let’s modify our test to reflect what we want to achieve.</p>

<p>Open up <em>test/messages.test.js</em> and modify the last expect line in the <code>posts message</code> test case:</p>

<div class="break-out">
<pre><code class="language-javascript">it('posts messages', done => {
   ...
  expect(m).to.have.property('message', `SAYS: ${data.message}`); # update this line
    ...
});</code></pre>
</div>

<p>We’re asserting that the <code>SAYS:</code> string has been appended to the message. Run your tests to make sure this test case fails.</p>

<p>Now, let’s write the code to make the test pass.</p>

<p>Create a new <code>middleware/</code> folder inside <code>src/</code> folder. Create two files inside this folder:</p>

<ul>
<li><em>middleware.js</em></li>
<li><em>index.js</em></li>
</ul>

<p>Enter the below code in <em>middleware.js</em>:</p>

<pre><code class="language-javascript">export const modifyMessage = (req, res, next) => {
  req.body.message = `SAYS: ${req.body.message}`;
  next();
};</code></pre>

<p>Here, we append the string <code>SAYS:</code>  to the message in the request body. After doing that, we must call the <code>next()</code> function to pass execution to the next function in the request-response chain. Every middleware has to call the <code>next</code> function to pass execution to the next middleware in the request-response cycle.</p>

<p>Enter the below code in <em>index.js</em>:</p>

<pre><code class="language-javascript"># export everything from the middleware file

export * from './middleware';</code></pre>

<p>This exports the middleware we have in the <em>/middleware.js</em> file. For now, we only have the <code>modifyMessage</code> middleware.</p>

<p>Open <em>src/routes/index.js</em> and add the middleware to the post message request-response chain.</p>

<pre><code class="language-javascript">import { modifyMessage } from '../middleware';

indexRouter.post('/messages', modifyMessage, addMessage);</code></pre>

<p>We can see that the <code>modifyMessage</code> function comes before the <code>addMessage</code> function. We invoke the <code>addMessage</code> function by calling <code>next</code> in the <code>modifyMessage</code> middleware. As an experiment, comment out the <code>next()</code> line in the <code>modifyMessage</code> middle and watch the request hang.</p>

<p>Open Postman and create a new message. You should see the appended string.</p>











<figure class="
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Message modified by middleware. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c36c9fd6-e754-4c4c-b08b-4b4c12c1c9e5/07-express-api-backend-project-with-postgresql.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>This is a good point to commit our changes.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/09-middleware">09-middleware</a>.</em></li>
</ul>

<h3 id="error-handling-and-asynchronous-middleware">Error Handling And Asynchronous Middleware</h3>

<p>Errors are inevitable in any application. The task before the developer is how to deal with errors as gracefully as possible.</p>

<p>In Express:</p>

<blockquote>“<strong>Error Handling</strong> refers to how Express catches and processes errors that occur both synchronously and asynchronously.</blockquote>

<p>If we were only writing synchronous functions, we might not have to worry so much about error handling as Express already does an excellent job of handling those. According to the <a href="https://expressjs.com/en/guide/error-handling.html">docs</a>:</p>

<blockquote>“Errors that occur in synchronous code inside route handlers and middleware require no extra work.”</blockquote>

<p>But once we start writing asynchronous router handlers and middleware, then we have to do some error handling.</p>

<p>Our <code>modifyMessage</code> middleware is a synchronous function. If an error occurs in that function, Express will handle it just fine. Let’s see how we deal with errors in asynchronous middleware.</p>

<p>Let’s say, before creating a message, we want to get a picture from the <a href="https://picsum.photos/">Lorem Picsum</a> API using this URL <code>https://picsum.photos/id/0/info</code>. This is an asynchronous operation that could either succeed or fail, and that presents a case for us to deal with.</p>

<p>Start by installing Axios.</p>

<pre><code class="language-bash"># install axios
yarn add axios</code></pre>
 

<p>Open <em>src/middleware/middleware.js</em> and add the below function:</p>

<div class="break-out">
<pre><code class="language-javascript">export const performAsyncAction = async (req, res, next) => {
  try {
    await axios.get('https://picsum.photos/id/0/info');
    next();
  } catch (err) {
    next(err);
  }
};</code></pre>
</div>

<p>In this <code>async</code> function, we <code>await</code> a call to an API (we don’t actually need the returned data) and afterward call the <code>next</code> function in the request chain. If the request fails, we catch the error and pass it on to <code>next</code>. Once Express sees this error, it skips all other middleware in the chain. If we didn’t call <code>next(err)</code>, the request will hang. If we only called <code>next()</code> without <code>err</code>, the request will proceed as if nothing happened and the error will not be caught.</p>

<p>Import this function and add it to the middleware chain of the post messages route:</p>

<div class="break-out">
<pre><code class="language-javascript">import { modifyMessage, performAsyncAction } from '../middleware';

indexRouter.post('/messages', modifyMessage, performAsyncAction, addMessage);</code></pre>
</div>

<p>Open <em>src/app.js</em> and add the below code just before the <code>export default app</code> line.</p>

<pre><code class="language-javascript">app.use((err, req, res, next) => {
  res.status(400).json({ error: err.stack });
});

export default app;</code></pre>

<p>This is our error handler. According to the Express <a href="https://expressjs.com/en/guide/error-handling.html">error handling</a> doc:</p>

<blockquote>“[...] error-handling functions have four arguments instead of three: <code>(err, req, res, next)</code>.”</blockquote>

<p>Note that this error handler must come last, after every <code>app.use()</code> call. Once we encounter an error, we return the stack trace with a status code of <code>400</code>. You could do whatever you like with the error. You might want to log it or send it somewhere.</p>

<p>This is a good place to commit your changes.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/10-error-async-middleware">10-async-middleware</a>.</em></li>
</ul>

<h3 id="deploy-to-heroku">Deploy To Heroku</h3>

<ol>
<li>To get started, go to <a href="https://www.heroku.com/">https://www.heroku.com/</a> and either log in or register.</li>
<li>Download and install the Heroku CLI from <a href="https://devcenter.heroku.com/articles/heroku-cli">here</a>.</li>
<li>Open a terminal in the project folder to run the command.</li>
</ol>

<pre><code class="language-bash"># login to heroku on command line
heroku login</code></pre>

<p>This will open a browser window and ask you to log into your Heroku account.</p>

<p>Log in to grant your terminal access to your Heroku account, and create a new heroku app by running:</p>

<pre><code class="language-bash">#app name is up to you
heroku create app-name</code></pre>

<p>This will create the app on Heroku and return two URLs.</p>

<div class="break-out">
<pre><code class="language-bash"># app production url and git url
https://app-name.herokuapp.com/ | https://git.heroku.com/app-name.git</code></pre>
</div>

<p>Copy the URL on the right and run the below command. Note that this step is optional as you may find that Heroku has already added the remote URL.</p>

<div class="break-out">
<pre><code class="language-bash"># add heroku remote url
git remote add heroku https://git.heroku.com/my-shiny-new-app.git</code></pre>
</div>

<p>Open a side terminal and run the command below. This shows you the app log in real-time as shown in the image.</p>

<pre><code class="language-bash"># see process logs
heroku logs --tail</code></pre>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Heroku logs. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023c952-8e6d-41cc-82a5-be95c682808f/08-express-api-backend-project-with-postgresql.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Run the following three commands to set the required environment variables:</p>

<div class="break-out">
<pre><code class="language-javascript">heroku config:set TEST_ENV_VARIABLE="Environment variable is coming across."
heroku config:set CONNECTION_STRING=your-db-connection-string-here.
heroku config:set NPM_CONFIG_PRODUCTION=false</code></pre>
</div>

<p>Remember in our scripts, we set:</p>

<pre><code class="language-javascript">"prestart": "babel ./src --out-dir build",
"start": "node ./build/bin/www",</code></pre>

<p>To start the app, it needs to be compiled down to ES5 using babel in the <code>prestart</code> step because babel only exists in our development dependencies. We have to set <code>NPM_CONFIG_PRODUCTION</code> to <code>false</code> in order to be able to install those as well.</p>

<p>To confirm everything is set correctly, run the command below. You could also visit the <code>settings</code> tab on the app page and click on <code>Reveal Config Vars</code>.</p>

<pre><code class="language-javascript"># check configuration variables
heroku config</code></pre>

<p>Now run <code>git push heroku</code>.</p>

<p>To open the app, run:</p>

<pre><code class="language-javascript"># open /v1 route
heroku open /v1

# open /v1/messages route
heroku open /v1/messages</code></pre>

<p>If like me, you’re using the same PostgresSQL database for both development and production, you may find that each time you run your tests, the database is deleted. To recreate it, you could run either one of the following commands:</p>

<pre><code class="language-javascript"># run script locally
yarn runQuery

# run script with heroku
heroku run yarn runQuery</code></pre>

<h3 id="continuous-deployment-cd-with-travis">Continuous Deployment (CD) With Travis</h3>

<p>Let’s now add Continuous Deployment (CD) to complete the CI/CD flow. We will be deploying from Travis after every successful test run.</p>

<p>The first step is to install Travis CI. (You can find the installation instructions over <a href="https://github.com/travis-ci/travis.rb#installation">here</a>.) After successfully installing the Travis CI, login by running the below command. (Note that this should be done in your project repository.)</p>

<pre><code class="language-javascript"># login to travis
travis login --pro

# use this if you’re using two factor authentication
travis login --pro --github-token enter-github-token-here</code></pre>

<p>If your project is hosted on <a href="https://travis-ci.org/">travis-ci.org</a>, remove the <code>--pro</code> flag. To get a GitHub token, visit the <a href="https://github.com/settings/tokens">developer settings</a> page of your account and generate one. This only applies if your account is secured with 2FA.</p>

<p>Open your <em>.travis.yml</em> and add a deploy section:</p>

<pre><code class="language-yml">deploy:
  provider: heroku
  app:
    master: app-name</code></pre>

<p>Here, we specify that we want to deploy to Heroku. The app sub-section specifies that we want to deploy the <code>master</code> branch of our repo to the <code>app-name</code> app on Heroku. It’s possible to deploy different branches to different apps. You can read more about the available options <a href="https://docs.travis-ci.com/user/deployment/heroku/">here</a>.</p>

<p>Run the below command to encrypt your Heroku API key and add it to the deploy section:</p>

<div class="break-out">
<pre><code class="language-yml"># encrypt heroku API key and add to .travis.yml
travis encrypt $(heroku auth:token) --add deploy.api_key --pro</code></pre>
</div>

<p>This will add the below sub-section to the deploy section.</p>

<pre><code class="language-yml">api_key:
  secure: very-long-encrypted-api-key-string</code></pre>

<p>Now commit your changes and push to GitHub while monitoring your logs. You will see the build triggered as soon as the Travis test is done. In this way, if we have a failing test, the changes would never be deployed. Likewise, if the build failed, the whole test run would fail. This completes the CI/CD flow.</p>

<ul>
<li><em>The corresponding branch in my repo is <a href="https://github.com/chidimo/Express-API-Template/tree/11-cd">11-cd</a>.</em></li>
</ul>

<h3 id="conclusion">Conclusion</h3>

<p>If you’ve made it this far, I say, “Thumbs up!” In this tutorial, we successfully set up a new Express project. We went ahead to configure development dependencies as well as Continuous Integration (CI). We then wrote asynchronous functions to handle requests to our API endpoints &mdash; completed with tests. We then looked briefly at error handling. Finally, we deployed our project to Heroku and configured Continuous Deployment.</p>

<p>You now have a template for your next back-end project. We’ve only done enough to get you started, but you should keep learning to keep going. Be sure to check out the Express.js docs as well. If you would rather use <code>MongoDB</code> instead of <code>PostgreSQL</code>, I have a template <a href="https://github.com/chidimo/Express-API-Template-With-MongoDB">here</a> that does exactly that. You can check it out for the setup. It has only a few points of difference.</p>

<h4 id="resources">Resources</h4>

<ul>
<li>“<a href="https://github.com/chidimo/Express-API-Template-With-MongoDB">Create Express API Backend With MongoDB </a>,” Orji Chidi Matthew, GitHub</li>
<li>“<a href="https://stephensugden.com/middleware_guide/">A Short Guide To Connect Middleware</a>,” Stephen Sugden</li>
<li>“<a href="https://github.com/chidimo/Express-API-Template">Express API template</a>,” GitHub</li>
<li>“<a href="https://stackshare.io/stackups/appveyor-vs-travis-ci">AppVeyor vs Travis CI</a>,” StackShare</li>
<li>“<a href="https://devcenter.heroku.com/articles/heroku-cli">The Heroku CLI</a>,” Heroku Dev Center</li>
<li>“<a href="https://docs.travis-ci.com/user/deployment/heroku/">Heroku Deployment</a>,” Travis CI</li>
<li>“<a href="https://expressjs.com/en/guide/using-middleware.html">Using middleware</a>,” Express.js</li>
<li>“<a href="https://expressjs.com/en/guide/error-handling.html">Error Handling</a>,” Express.js</li>
<li>“<a href="https://mochajs.org/#getting-started">Getting Started</a>,” Mocha</li>
<li><a href="https://github.com/istanbuljs/nyc"><code>nyc</code></a> (GitHub)</li>
<li><a href="https://www.elephantsql.com/">ElephantSQL</a></li>
<li><a href="https://www.postman.com/">Postman</a></li>
<li><a href="https://expressjs.com/">Express</a></li>
<li><a href="https://travis-ci.com/">Travis CI</a></li>
<li><a href="https://docs.codeclimate.com/docs/advanced-configuration">Code Climate</a></li>
<li><a href="https://www.postgresql.org/">PostgreSQL</a></li>
<li><a href="https://www.pgadmin.org/">pgAdmin</a></li>
</ul>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ks, yk, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Drew McLellan</author><title>Smashing Podcast Episode 13 With Laura Kalbag: What Is Online Privacy?</title><link>https://www.smashingmagazine.com/2020/04/smashing-podcast-episode-13/</link><pubDate>Tue, 07 Apr 2020 07:00:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/smashing-podcast-episode-13/</guid><description>In this episode of the Smashing Podcast, we’re talking about online privacy. What should web developers be doing to make sure the privacy of our users is maintained? I spoke to Laura Kalbag to find out.
Show Notes Laura Kalbag’s personal website Small Technology Foundation Better Blocker Site.js Weekly Update “How To Make Life Easier When Using Git,”
by Shane Hudson “Visual Design Language: The Building Blocks Of Design,”</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/smashing-podcast-episode-13/" />
              <title>Smashing Podcast Episode 13 With Laura Kalbag: What Is Online Privacy?</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Smashing Podcast Episode 13 With Laura Kalbag: What Is Online Privacy?</h1>
                  
                    
                    <address>Drew McLellan</address>
                  
                  <time datetime="2020-04-07T07:00:00&#43;00:00" class="op-published">2020-04-07T07:00:00+00:00</time>
                  <time datetime="2020-04-07T07:00:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p><a href="https://twitter.com/laurakalbag"><img style="float: right; padding: 1em;border-radius: 110px;max-width: 50%;height:auto" src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b588d4eb-9d28-40c9-b24e-81020a17111f/laurakalbag-300x300.jpg" width="200" height="200" alt="Laura Kalbag" /></a>In this episode of the Smashing Podcast, we’re talking about online privacy. What should web developers be doing to make sure the privacy of our users is maintained? I spoke to Laura Kalbag to find out.</p>

<iframe src="https://share.transistor.fm/e/820a3914/dark" width="100%" height="180" frameborder="0" scrolling="no" seamless="true" style="width:100%; height:180px;"></iframe>

<h3 id="show-notes">Show Notes</h3>

<ul>
<li><a href="https://laurakalbag.com">Laura Kalbag’s personal website</a></li>
<li><a href="https://small-tech.org">Small Technology Foundation</a></li>
<li><a href="https://better.fyi">Better Blocker</a></li>
<li><a href="https://sitejs.org">Site.js</a></li>
</ul>

<h4 id="weekly-update">Weekly Update</h4>

<ul>
<li>“<a href="https://www.smashingmagazine.com/make-life-easier-when-using-git/">How To Make Life Easier When Using Git</a>,”<br />
<em>by Shane Hudson</em></li>
<li>“<a href="https://www.smashingmagazine.com/2020/03/visual-design-language-building-blocks/">Visual Design Language: The Building Blocks Of Design</a>,”<br />
<em>by Gleb Kuznetsov</em></li>
<li>“<a href="https://www.smashingmagazine.com/2020/03/web-design-trend-popular/">What Should You Do When A Web Design Trend Becomes Too Popular?</a>,”<br />
<em>by Suzanne Scacca</em></li>
<li>“<a href="https://www.smashingmagazine.com/2020/04/web-app-headless-cms-react/">Building A Web App With Headless CMS And React</a>,”<br />
<em>by Blessing Krofegha</em></li>
<li>“<a href="https://www.smashingmagazine.com/2020/04/django-highlights-templating-saves-lines/">Django Highlights: Templating Saves Lines (Part 2)</a>,”<br />
<em>by Philip Kiely</em></li>
</ul>

<h3 id="transcript">Transcript</h3>

<p><span class="smashing-tv-host">Drew McLellan:</span> She’s a designer from the UK, but now based in Ireland, she’s co-founder of the Small Technology Foundation. You’ll often find her talking about rights-respecting design, accessibility and inclusivity, privacy, and web design and development, both on her personal website and with publications such as Smashing magazine. She’s the author of the book Accessibility for Everyone from A Book Apart. And with the Small Technology Foundation, she’s part of the team behind Better Blocker, a tracking blocker tool for Safari on iOS and Mac. So we know she’s an expert in inclusive design and online privacy, but did you know she took Paris Fashion Week by storm wearing a kilt made out of spaghetti. My Smashing friends, please welcome Laura Kalbag.</p>

<p><span class="smashing-tv-speaker">Laura Kalbag:</span> Hello.</p>

<p><span class="smashing-tv-host">Drew:</span> Hello Laura, how are you?</p>

<p><span class="smashing-tv-speaker">Laura:</span> I am smashing.</p>

<p><span class="smashing-tv-host">Drew:</span> I wanted to talk to you today about the topic of online privacy and the challenges around being an active participant online without seeding too much of your privacy and personal data to companies who may or may not be trustworthy. This is an area that you think about a lot, isn’t it?</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. And I don’t just think about the role of us as consumers in that, but also as people who work on the web, our role in actually doing it and how much we’re actually making that a problem for the rest of society as well.</p>

<p><span class="smashing-tv-host">Drew:</span> As a web developer growing up in the &lsquo;90s as I did, for me maintaining an active presence online involved basically building and updating my own website. Essentially, it was distributed technology but it was under my control. And these days it seems like it’s more about posting on centralized commercially operated platforms such as Twitter and Facebook, the obvious ones. That’s a really big shift in how we publish stuff online. Is it a problem?</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. And I think we have gone far away from those decentralized distributed ways of posting on our own websites. And the problem is that we are essentially posting everything on somebody else’s website. And not only does that mean that we’re subject to their rules, which in some cases is a good thing, you don’t necessarily want to be on a website that is full of spam, full of trolls, full of Nazi content, we don’t want to be experiencing that. But also we have no control over whether we get kicked off, whether they decide to censor us in any way. But also everything underlying on that platform. So whether that platform is knowing where we are at all times because it’s picking up on our location. Whether it is reading our private messages because if it’s not end-to-end encrypted, if we’re sending direct messages to each other, that could be accessed by the company.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Whether it’s actively, so whether people working there could actually just read your messages. Or passively, where they are just sucking up the stuff from inside your messages and using that to build profiles about you, which they can then use to target you with ads and stuff like that. Or even combine that information with other datasets and sell that on to other people as well.</p>

<p><span class="smashing-tv-host">Drew:</span> It can be quite terrifying, can’t it? Have what you considered to be a private message with somebody on a platform like Facebook, using Facebook Messenger, and find the things you’ve mentioned in a conversation then used to target ads towards you. It’s not something you think you’ve shared but it is something you’ve shared with the platform.</p>

<p><span class="smashing-tv-speaker">Laura:</span> And I have a classic example of this that happened to me a few years ago. So, I was on Facebook, and my mom had just died, and I was getting ads for funeral directors. And I thought is was really strange because none of my family had said anything on a social media platform at that point, none of my family had said anything on Facebook because we’d agreed that no one wants to find out that kind of thing about a friend or family member via Facebook so we’d not say about it. And then, so I asked my siblings, &ldquo;Have any of you said anything on Facebook that might cause this strange?&rdquo; Because I just usually just get ads for make-up, and dresses, and pregnancy tests, and all those fun things they like to target women of a certain age. And my sister got back to me, she said, &ldquo;Well, yeah, my friend lives in Australia so I sent her a message on Messenger, Facebook Messenger, and told her that our mom had died.&rdquo;</p>

<p><span class="smashing-tv-speaker">Laura:</span> And of course Facebook knew that we’re sisters, it has that relationship connection that you can choose to add on there, it could probably guess we were sisters anyway by the locations we’ve been together, the fact that we share a surname. And decided that’s an appropriate ad to put in her feed.</p>

<p><span class="smashing-tv-host">Drew:</span> It’s sobering, isn’t it? To think that technology is making these decisions for us that actually affects people, potentially in this example, in quite a sensitive or vulnerable time.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. We say it’s creepy, but a lot of the time people say it’s almost like the microphone on my phone or my laptop was listening to me because I was just having this conversation about this particular product and suddenly it’s appearing in my feed everywhere. And I think what’s actually scary is the fact that most of them don’t have access to your microphone, but it’s the fact that your other behaviors, your search, the fact that it knows who you’re talking to because of your proximity to each other and your location on your devices. It can connect all of those things that we might not connect ourselves together in order to say, maybe they’ll be interested in this product because they’ll probably think you’re talking about it already.</p>

<p><span class="smashing-tv-host">Drew:</span> And of course, it’s not as simple as just rolling back the clock and going back to a time where if you wanted to be online, you had to create your own website because there’s technical barriers to that, there’s cost barriers. And you only need to look at the explosion of things like sharing video online, there’s not an easy way to share a video online in the same way you can just by putting it on YouTube, or uploading it to Facebook, or onto Twitter, there are technical challenges there.</p>

<p><span class="smashing-tv-speaker">Laura:</span> It’s not fair to blame anyone for it because using the web today and using these platforms today is part of participating in society. You can’t help it if your school has a Facebook group for all the parents. You can’t help it if you have to use a website that, in order to get some vital information. It’s part of our infrastructure now, particularly nowadays when everyone is suddenly relying video calling and things like that so much more. These are our infrastructure, they are as used and as important as our roads, as our utilities, so we need to have them treated accordingly. And we can’t blame people for using them, especially if there aren’t any alternatives that are better.</p>

<p><span class="smashing-tv-host">Drew:</span> When the suggestion is using these big platforms that it’s easy and it’s free, but is it free?</p>

<p><span class="smashing-tv-speaker">Laura:</span> No, because you’re paying with your personal information. And I hear a lot of developers saying things like, &ldquo;Oh well, I’m not interesting, I don’t really care, it’s not really a problem for me.&rdquo; And we have to think about the fact that we’re often in quite a privileged group. What about people that are more vulnerable? We think about people who have parts of their identity that they don’t necessarily want to share publicly, they don’t want to be outed by platforms to their employers, to their government. People who are in domestic abuse situations, we think about people who are scared of their governments and don’t want to spied on. That’s a huge number of people across the world, we can’t just say, &ldquo;Oh well, it’s fine for me, so it has to be fine for everybody else,&rdquo; it’s just not fair.</p>

<p><span class="smashing-tv-host">Drew:</span> It doesn’t have to be a very big issue you’re trying to conceal from the world to be worried about what a platform might share about you.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. And the whole thing about privacy is that it isn’t about having something to hide, it’s about choosing what you want to share. So you might not feel like you have anything in particular that you want to hide, but it doesn’t necessarily mean you put a camera in your bedroom and broadcast it 24 hours, there’s things we do and don’t want to share.</p>

<p><span class="smashing-tv-host">Drew:</span> Because there are risks as well in sharing social content, things like pictures of family and friends. That we could be sacrificing other peoples privacy without them really being aware, is that a risk?</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. And I think that that applies to a lot of different things as well. So it’s not just if you’re uploading things of people you know and then they’re being added to facial recognition databases, which is happening quite a lot of the time. These very dodgy databases, they’ll scrape social media sites to make their facial recognition databases. So Clearview is an example of a company that’s done that, they’ve scraped images off Facebook and used those. But also things like email, you might choose&hellip; I’m not going to use Gmail because I don’t want Google to have access to everything in my email, which is everything I’ve signed up for, every event I’m attending, all of my personal communication, so I decide not to use it. But if I’m communicating with someone who uses Gmail, well, they’ve made that decision on my behalf, that everything I email them will be shared with Google.</p>

<p><span class="smashing-tv-host">Drew:</span> You say that, often from a privileged position, we think okay, we’re getting all this technology, all these platforms are being given to us for free, we’re not having to pay for it, all we got to do is&hellip; We’re giving up a little bit of privacy, but that’s okay, that’s an acceptable trade-off. But is it an acceptable trade-off?</p>

<p><span class="smashing-tv-speaker">Laura:</span> No. It’s certainly not an acceptable trade-off. But I think it’s also because you don’t necessarily immediately see the harms that are caused by giving these things up. You might feel like you’re in a safe situation today, but you may not be tomorrow. I think a good example is Facebook, they’ve actually got a pattern for approving or disproving loans based on the financial status of your friends on Facebook. So thinking, oh well, if your friend owes lots of money, and a lot of your friends owes lots of money, you’re more likely to be in that same situation as them. So all these systems, all of these algorithms, they are making decisions and influencing our lives and we have no say on them. So it’s not necessarily about what we’re choosing to share and what we’re choosing not to share in terms of something we put in a status, or a photo, or a video, but it’s also about all of this information that is derived about us from our activity on these platforms.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Things about our locations or whether we have a tendency to be out late at night, the kinds of people that we tend to spend our time with, all of this information can be collected by these platforms too and then they’ll make decisions about us based on that information. And we not only don’t have access to what’s being derived about us, we have no way of seeing it, we have no way of changing it, we have no way of removing it, bar a few things that we could do if we’re in the EU based on GDPR, if you’re in California based on their regulation there that you can go in and ask companies what data they have on you and ask them to delete it. But then what data counts under that situation? Just the data they’ve collected about you? What about the data they’ve derived and created by combining your information with other people’s information and the categories they’ve put you in, things like that. We have no transparency on that information.</p>

<p><span class="smashing-tv-host">Drew:</span> People might say that this is paranoia, this is tinfoil hat stuff. And really all that these companies are doing is collecting data to show us different ads. And okay, there’s the potential for these other things, but they’re not actually doing that. All they’re doing is just tailoring ads to us. Is that the case or is this data actually actively being used in more malicious ways than just showing ads?</p>

<p><span class="smashing-tv-speaker">Laura:</span> No. We’ve seen in many, many occasions how this information is being used in ways other than just ads. And even if one company decides to just collect it based on ads, they then later might get sold to or acquired by an organization that decides to do something different with that data and that’s parts of the problem with collecting the data at all in the first place. And it’s also a big risk to things like hacking, if you’re creating a big centralized database with people’s information, their phone numbers, their email addresses, even just the most simple stuff, that’s really juicy data for hackers. And that’s why we see massive scale hacks that result in a lot of people’s personal information ending up being publicly available. It’s because a company decided it was a good idea to collect of that information in one place in the first place.</p>

<p><span class="smashing-tv-host">Drew:</span> Are there ways then that we can use these platforms, interact with friends and family that are also on these platforms, Facebook is the obvious example where you might have friends and family all over the world and Facebook is the place where they communicate. Are there ways that you can participate in that and not be giving up privacy or is it just something that if you want to be on that platform, you just have to accept?</p>

<p><span class="smashing-tv-speaker">Laura:</span> I think there’s different layers, depending on what we would call your threat model is. So depending how vulnerable you are, but also your friends and family, and what your options are. So yeah, the ultimate thing is to not use these platforms at all. But if you do, try to use them more than they use you. So if you have things that you’re communicating one-on-one, don’t use Messenger for that because there are plenty of alternatives for one-on-one direct communication that can be end-to-end encrypted or is private and you don’t have to worry about Facebook listening in on it. And there’s not really much you can do about things like sharing your location data and stuff like that, which is really valuable information. It’s all of your meta information that’s so valuable, it’s not even necessarily the content of what you’re saying, but who you’re with and where you are when you’re saying it. That’s the kind of stuff that’s useful that companies would use to put you in different categories and be able to sell things to you accordingly or group you accordingly.</p>

<p><span class="smashing-tv-speaker">Laura:</span> So I think we can try to use them as little as possible. I think it’s important to seek alternatives, particularly if you’re a person who is more technically savvy in your group of friends and family, you can always encourage other people to join other things as well to have. So use Wire for messaging, that’s a nice little platform that’s available in lots of places and is private. Or Signal is another option that’s just like WhatsApp but it’s end-to-end encrypted as well. And if you can be that person, I think there’s two points that we have to really forget about. One, is the idea that everyone needs to be on a platform for it to be valuable. The benefit is that everyone’s on Facebook, that’s actually the downside as well, that everyone’s on Facebook. You don’t need everyone you know to suddenly be on the same platform as you. As long as you have those few people you want to communicate with regularly on a better platform, that’s a really good start.</p>

<p><span class="smashing-tv-speaker">Laura:</span> And the other thing that we need to embrace, we’re not going to find an alternative to a particular platform that does everything that platform does as well. You’re not going to find an alternative to Facebook that does messaging, that has status updates, that has groups, that has events, that has live, that has all of this stuff. Because the reason Facebook can do that is because Facebook is massive, Facebook has these resources, Facebook has a business model that really makes a lot out of all that data and so it’s really beneficial to provide all those services to you. And so we have to change our expectations and maybe be like, &ldquo;Well okay, what’s the one function I need? To be able to share a photo. Well, let’s find the thing that I can do that will help me just share that photo.&rdquo; And not be expecting just another great big company to do the right thing for us.</p>

<p><span class="smashing-tv-host">Drew:</span> Is this something that RSS can help us with? I tend to think RSS is the solution to most problems, but I was thinking here if you have a service for photo sharing, and something else for status updates, and something else for all these different things is RSS the solution that brings it all together to create a virtual&hellip; That encompasses all these services?</p>

<p><span class="smashing-tv-speaker">Laura:</span> I’m with you on that for lots of things. I, myself, I’ve built into my own site, I have a section for photos, a section for status updates, as well as my blog and stuff. So that I can allow people to, if they don’t follow me on social media platforms, if I’m posting the same stuff to my site, they can use RSS to access it and they’re not putting themselves at risk. And that’s one of the ways that I see as just a fairly ordinary designer/developer that I can not force other people to use those platforms in order to join in with me. And RSS is really good for that. RSS can have tracking, I think people can do stuff with it, but it’s rare and it’s not the point of it. That’s what I think RSS is a really good standard for.</p>

<p><span class="smashing-tv-host">Drew:</span> As a web developer, I’m aware when I’m building sites that I’m frequently being required to add JavaScript from Google for things like analytics or ads, and from Facebook for like and share actions, and all that sort of thing, and from various other places, Twitter, and you name it. Are those something that we need to worry about in terms of developers or as users of the web? That there’s this code executing that it’s origin is on google.com or facebook.com?</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yes. Absolutely. I think Google is a good example here of things like web fonts and libraries and stuff like that. So people are encouraged to use them because they’re told well, it’s going to very performant, it’s on Google servers, Google will grab it from the closest part of the world, you’ll have a brilliant site just by using, say a font off Google rather than embedding it, self-hosting it on your own site. There’s a reason why Google offers up all of those fonts for free and it’s not out of the goodness of their Googley little hearts, it is because they get something out of it. And what they get is, they get access to your visitors on your website when you include their script on your website. So I think it’s not just something we should be worried about as developers, I think that it’s our responsibility to know what our site is doing and know what a third party script is doing or could do, because they could change it and you don’t necessarily have control over that as well. Know what their privacy policies are and things like that before we use them.</p>

<p><span class="smashing-tv-speaker">Laura:</span> And ideally, don’t use them at all. If we can self-host things, self-host things, a lot of the time it’s easier. If we don’t need to provide a login with Google or Facebook, don’t do it. I think we can be the gatekeepers in this situation. We as the people who have the knowledge and the skills in this area, we can be the ones that can go back to our bosses or our managers and say, &ldquo;Look, we can provide this login with Facebook or we could build our own login, it will be private, it would be safer. Yeah, it might take a little bit more work but actually we’ll be able to instill more trust in what we’re building because we don’t have that association with Facebook.&rdquo; Because what we’re seeing now, over time, is that even mainstream media is starting to catch up with the downsides of Facebook, and Google, and these other organizations.</p>

<p><span class="smashing-tv-speaker">Laura:</span> And so we end up being guilty by association even if we’re just trying to make the user experience easier by adding a login where someone doesn’t have to create a new username and password. And so I think we really do need to take that responsibility and a lot of it is about valuing people’s rights and respecting their rights and their privacy over our own convenience. Because of course it’s going to be much quicker just to add that script to the page, just to add another package in without investigating what it actually does. We’re giving up a lot when we do that and I think that we need to take responsibility not to.</p>

<p><span class="smashing-tv-host">Drew:</span> As web developers are there other things that we should be looking out for when it comes to protecting the privacy of our own customers in the things that we build?</p>

<p><span class="smashing-tv-speaker">Laura:</span> We shouldn’t be collecting data at all. And I think most of the time, you can avoid it. Analytics is one of my biggest bugbears because I think that a lot of people get all these analytics scripts, all these scripts that can see what people are doing on your website and give you insights and things like that, but I don’t think we use them particularly well. I think we use them to confirm our own assumptions and all we’re being taught about is what is already on our site. It’s not telling us anything that research and actually talking to people who use our websites&hellip; We could really benefit more from that than just looking at some numbers go up and down, and guessing what the effect of that is or why it’s happening. So I think that we need to be more cautious around anything that we’re putting on our sites and anything that we’re collecting. And I think nowadays we’re also looking at regulatory and legal risks as well when we’re starting to collect people’s data.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Because when we look at things like the GDPR, we’re very restricted in what we are allowed to collect and the reasons why we’re allowed to collect it. And that’s why we’re getting all of these consent notifications and things like that coming up now. Because companies have to have your explicit consent for collecting any data that is not associated with vital function for the website. So if you’re using something like a login, you don’t need to get permission to store someone’s email and password for a login because that is implied by logging in, you need that. But things like analytics and stuff like that, you actually need to get explicit consent in order to be able to spy on the people visiting the website. So this is why we see all of these consent boxes, this is why we should actually be including them on our websites if we’re using analytics and other tools that are collecting data that aren’t vital to the functioning of the page.</p>

<p><span class="smashing-tv-host">Drew:</span> I think about some of even just the side projects and things that I’ve launched, that just almost as a matter of routine I’ve put Google analytics on there. I think, &ldquo;Oh, I need to track how many people are visiting.&rdquo; And then I either never look at it or I only look at it to gain an understanding of the same things that I could’ve just got from server logs like we used to do in the old days, just by crunching over their web access logs.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Exactly. And yet Google is sitting there going, &ldquo;Thank you very much.&rdquo; Because you’ve instilled another input for them on the website. And I think once you start thinking about it, once you adjust your brain to taking this other way of looking at it, it’s much easier to start seeing the vulnerabilities. But we do have to train ourselves to think in that way, to think about how can we harm people with what we’re building, who could lose out from this, and try to build things that are a bit more considerate of people.</p>

<p><span class="smashing-tv-host">Drew:</span> There’s an example, actually, that I can think of where Google analytics itself was used to breach somebody’s privacy. And that was the author of Belle de Jour, The Secret Diary of a Call Girl, who was a London call girl who kept a blog for years and it was all completely anonymous. And she diarized her daily life. And it was incredibly successful, and it became a book, and a TV series, and what have you. She was intending to be completely anonymous, but she was eventually found out. Her identity was revealed because she used the same Google analytics tracking user id on her personal blog where she was her professional self and on the call girl blog as well. And that’s how she was identified, just-</p>

<p><span class="smashing-tv-speaker">Laura:</span> So she did it to herself in that way as well.</p>

<p><span class="smashing-tv-host">Drew:</span> She did it to herself. Yeah. She leaked personal data there that she didn’t mean to leak. She didn’t even know it was personal data, I suspect. There are so many implications that you just don’t think of. And so I think it pays to start thinking of it.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. And not doing things because you feel that that’s what we always did, and that’s what we always do, or that’s what this other organization that I admire, they do it, so I should, I think. And a lot of the time it is about being a bit more restrictive and maybe not jumping on the bandwagon of I’m going to use this service like everybody else is. And stopping, reading their privacy policy, which is not something I recommend doing for fun, because it’s really tedious, and I have to do a lot of it when I’m looking into trackers for Better. But you can see a lot of red flags if you read privacy policies. You see the kinds of language that means that they’re trying to make it free and easy for them to do whatever they want with your information. And there’s a reason why I say to designers and developers, if you’re making your own projects, don’t just copy the privacy policy from somebody else. Because you might be opening yourself up to more issues and you might actually be making yourself look suspicious.</p>

<p><span class="smashing-tv-speaker">Laura:</span> It’s much better to be transparent and clear about what you’re doing, everything doesn’t need to be written in legal ease in order for you to be clear about what you’re doing with people’s information.</p>

<p><span class="smashing-tv-host">Drew:</span> So, in almost anything, people say that the solution to it is to use the JAMstack. Is the JAMstack a solution, is it a good answer, is it going to help us out of accidentally breaching the privacy of our customers?</p>

<p><span class="smashing-tv-speaker">Laura:</span> There’s a lot of stuff I like about the JAMstack stuff, but I would say I like the &ldquo;JMstack&rdquo;, because it’s the APIs bit that worries me. Because if we’re taking control over our own sites, we’re building static sites, and we’re generating it all on our machines, and we’re not using servers, and that’s great that we’ve taken away a lot potential issues there. But then if we’re adding back in all of the third party functionality using APIs, we may as well be adding script tags to our pages all over again. We may as well have it on somebody else’s platform. Because we’re losing that control again. Because every time we’re adding something from a third party, we’re losing control over a little bit of our site. So I think that a lot of static site generators and things like that have a lot of value, but we still need to be cautious.</p>

<p><span class="smashing-tv-speaker">Laura:</span> And I think one of the reasons why we love the jam stack stuff because again, it’s allowed us to knock up a site really quickly, deploy it really quickly, have a development environment set up really quickly, and we’re valuing again, our developer experience over that of the people that are using the websites.</p>

<p><span class="smashing-tv-host">Drew:</span> So I guess the key there is to just be hyperaware of what every API you’re using is doing. What data you could be sending to them, what their individual privacy policies are.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. And I think we have to be cautious about being loyal to companies. We might have people that we are friends with and think are great and things like that, that are working for these companies. We might that they are producing some good work, they’re doing good blogs, they’re introducing some interesting new technologies into the world. But at the end of the day, businesses are businesses. And they all have business models. And we have to know what are their business models. How are they making their money? Who is behind the money? Because a lot of venture capital backed organizations end up having to deal in personal data, and profiling, and things like that, because it’s an easy way to make money. And it is hard to build a sustainable business on technology, particularly if you’re not selling a physical product, it’s really hard to make a business sustainable. And if an organization has taken a huge amount of money and they’re paying a huge amount of employees, they’ve got to make some money back somehow.</p>

<p><span class="smashing-tv-speaker">Laura:</span> And that’s what we’re seeing now is, so many businesses doing what Shoshana Zuboff refers to as surveillance capitalism, tracking people, profiling them, and monetizing that information because it’s the easiest way to make money on the web. And I think that the rest of us have to try to resist it because it can be very tempting to jump in and do what everyone else is doing and make big money, and make a big name. But I think that we’re realizing too slowly the impact that that has on the rest of our society. The fact that Cambridge Analytica only came about because Facebook was collecting massive amounts of people’s information and Cambridge Analytica was just using that information in order to target people with, essentially, propaganda in order to make referendums and elections of their way. And that’s terrifying, that’s a really scary effect that’s come out of what you might think is an innocuous little banner ad.</p>

<p><span class="smashing-tv-host">Drew:</span> Professionally, many people are transitioning into building client sites or helping their clients to build their own sites on platforms like Squarespace and that sort of thing, online site builders where sites are then completely hosted on that service. Is that an area that they should also be worried about in terms of privacy?</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. Because you’re very much subject to the privacy policies of those platforms. And while a lot of them are paid platforms, so just because it’s a platform doesn’t necessarily mean that they are tracking you. But the inverse is also true, just because you’re paying for it, doesn’t mean they’re not tracking you. I’d use Spotify as an example of this. People pay Spotify a lot of money for their accounts. And Spotify does that brilliant thing where it shows off how much it’s tracking you by telling people all of this incredible information about them on a yearly basis, and giving them playlists for their moods, and things like that. And then you realize, oh, actually, Spotify knows what my mood is because I’m listening to a playlist that’s made for this mood that I’m in. And Spotify is with me when I’m exercising. And Spotify knows when I’m working. And Spotify knows when I’m trying to sleep. And whatever other playlists you’ve set up for it, whatever other activities you’ve done.</p>

<p><span class="smashing-tv-speaker">Laura:</span> So I think we just have to look at everything that a business is doing in order to work out whether it’s a threat to us and really treat everything as though it could possibly cause harm to us, and use it carefully.</p>

<p><span class="smashing-tv-host">Drew:</span> You’ve got a fantastic personal website where you collate all the things that you’re working on and things that you share socially. I see that your site is built using Site.js. What’s that?</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yes. So it’s something that we’ve been building. So what we do at the Small Technology Foundation, or what we did when we were called Ind.ie, which was the UK version of the Small Technology Foundation, is that we’re tying to work on how do we help in this situation. How do we help in a world where technology is not respecting people’s rights? And we’re a couple of designers and developers, so what is our skills? And the way we see it is we have to do a few different things. We have to first of all, prevent some of the worst harms if we can. And one of the ways we do that is having a tracker blocker, so it’s something that blocks trackers on the web, with their browser. And another thing we do is, we try to help inform things like regulation, and we campaign for better regulation and well informed regulation that is not encouraging authoritarian governments and is trying to restrict businesses from collecting people’s personal information.</p>

<p><span class="smashing-tv-speaker">Laura:</span> And the other thing we can do is, we can try to build alternatives. Because one of the biggest problems with technology and with the web today is that there’s not actually much choice when you want to build something. A lot of things are built in the same way. And we’ve been looking at different ways of doing this for quite a few years now. And the idea behind Site.js is to make it really easy to build and deploy a personal website that is secure, has the all the HTTPS stuff going on and everything, really, really, easily. So it’s something that really benefits the developer experience, but doesn’t threaten the visitor’s experience at the same time. So it’s something that is also going to keep being rights respecting, that you have full ownership and control over as the developer of your own personal website as well. And so that’s what Site.js does.</p>

<p><span class="smashing-tv-speaker">Laura:</span> So we’re just working on ways for people to build personal websites with the idea that in the future, hopefully those websites will also be able to communicate easily with each other. So you could use them to communicate with each other and it’s all in your own space as well.</p>

<p><span class="smashing-tv-host">Drew:</span> You’ve put a lot of your expertise in this area to use with Better Blocker. You must see some fairly wild things going on there as you’re updating it and&hellip;</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. You can always tell when I’m working on Better because that’s when my tweets get particularly angry and cross, because it makes me so irritated when I see what’s going on. And it also really annoys me because I spend a lot of time looking at websites, and working out what the scripts are doing, and what happens when something is blocked. One of the things that really annoys me is how developers don’t have fallbacks in their code. And so the amount of times that if you block something, for example, I block an analytics script, and if you block an analytics script, all the links stop working on the webpage, then you’re probably not using the web properly if you need JavaScript to use a link. And so I wish that developers bear that in mind, especially when they think about maybe removing these scripts from their sites. But the stuff I see is they&hellip;</p>

<p><span class="smashing-tv-speaker">Laura:</span> I’ve seen, like The Sun tabloid newspaper, everybody hates it, it’s awful. They have about 30 different analytics scripts on every page load. And to some degree I wonder whether performance would be such a hot topic in the industry if we weren’t all sticking so much junk on our webpages all the time. Because, actually, you look at a website that doesn’t have a bunch of third party tracking scripts on, tends to load quite quickly. Because you’ve got to do a huge amount to make a webpage heavy if you haven’t got all of that stuff as well.</p>

<p><span class="smashing-tv-host">Drew:</span> So is it a good idea for people who build for the web to be running things like tracker blockers and ad blockers or might it change our experience of the web and cause problems from a developer point of view?</p>

<p><span class="smashing-tv-speaker">Laura:</span> I think in the same way that we test things across different browsers and we might have a browser that we use for our own consumer style, I hate the word consumer, use, just our own personal use, like our shopping and our social stuff, and things like that. And we wouldn’t only test webpages in that browser, we test webpages in as many browsers can get our hands on because that’s what makes us good developers. And I think the same should be for if you’re using a tracker blocker or an ad blocker in your day-to-day, then yeah, you should try it without as well. Like I keep Google Chrome on my computer for browser testing, but you can be sure that I will not be using that browser for any of my personal stuff, ever, it’s horrible. So yeah, you’ve got to be aware of what’s going in the world around you as part of your responsibility as a developer.</p>

<p><span class="smashing-tv-host">Drew:</span> It’s almost just like another browser combination, isn’t it? To be aware of the configurations that the audience your site or your product might have and then testing with those configurations to find any problems.</p>

<p><span class="smashing-tv-speaker">Laura:</span> Yeah. And also developing more robust ways of writing your code, so that your code can work without certain scripts and things like that. So not everything is hinging off one particular script unless it is absolutely necessary. Things completely fall apart when people are using third party CDNs, for example. I think that’s a really interesting thing that so many people decided to use a third party CDN, but you have very little control over it’s uptime and stuff like that. And if you block the third party CDN, what happens? Suddenly you have no images, no content, no videos, or do you have no functionality because all of your functional JavaScript is coming from a third party CND?</p>

<p><span class="smashing-tv-host">Drew:</span> As a web developer or designer, if I’d not really thought about privacy concerns about the sites I’m producing up until this point, if I wanted to make a start, what should be the first thing that I do to look at the potential things I’m exposing my customers to?</p>

<p><span class="smashing-tv-speaker">Laura:</span> I’d review one of your existing pages or one of your existing sites. And you can take it on a component by component basis even. I think any small step is better than no step. And it’s the same way you’d approach learning anything new. It’s the same way I think about accessibility as well. Is you start by, okay, what is one thing I can take away? What is one thing I can change that will make a difference? And then you start building up that way of thinking, that way of looking at how you’re doing your work. And eventually that will build up into being much more well informed about things.</p>

<p><span class="smashing-tv-host">Drew:</span> So I’ve been learning a lot about online privacy. What have you been learning about lately?</p>

<p><span class="smashing-tv-speaker">Laura:</span> One of the things I’ve been learning about is Hugo, which is a static site generator that is written using Go. And I use it for my personal site already, but right now for Site.js, I’ve been writing a starter blog theme so that people could just set up a site really easily and don’t necessarily have to know a lot about Hugo. Because Hugo is interesting, it’s very fast, but the templating is quite tricky and the documentation is not the most accessible. And so I’m trying to work my way through that to understand it better, which I think I finally got over the initial hurdle. Where I understand what I’m doing now and I can make it better. But it’s hard learning these stuff, isn’t it?</p>

<p><span class="smashing-tv-host">Drew:</span> It really is.</p>

<p><span class="smashing-tv-speaker">Laura:</span> It reminds you how inadequate you are sometimes.</p>

<p><span class="smashing-tv-host">Drew:</span> If you, dear listener, would like to hear more from Laura, you can find her on the web at laurakalbag.com and Small Technology Foundation at small-tech.org. Thanks for joining us today, Laura. Do you any parting words?</p>

<p><span class="smashing-tv-speaker">Laura:</span> I’d say, I think we should always just be examining what we’re doing and our responsibility in the work that we do. And what can we do that can make things better for people? And what we can do to make things slightly less bad for people as well.</p>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item><item><author>Zara Cooper</author><title>Create Your Free Developer Blog Using Hugo And Firebase</title><link>https://www.smashingmagazine.com/2020/04/free-developer-blog-hugo-firebase/</link><pubDate>Mon, 06 Apr 2020 11:30:00 +0000</pubDate><guid>https://www.smashingmagazine.com/2020/04/free-developer-blog-hugo-firebase/</guid><description>In this tutorial, I’ll demonstrate how to create your own blog using Hugo and deploy it on Firebase for free. Hugo is an open-source static site generator and Firebase is a Google platform that offers resources and services used to augment web and mobile development. If you’re a developer who does not have a blog yet but is interested in hosting one, this article will help you create one. To follow these steps, you need to know how to use Git and your terminal.</description><content:encoded><![CDATA[
          <html>
            <head>
              <meta charset="utf-8">
              <link rel="canonical" href="https://www.smashingmagazine.com/2020/04/free-developer-blog-hugo-firebase/" />
              <title>Create Your Free Developer Blog Using Hugo And Firebase</title>
            </head>
            <body>
              <article>
                <header>
                  <h1>Create Your Free Developer Blog Using Hugo And Firebase</h1>
                  
                    
                    <address>Zara Cooper</address>
                  
                  <time datetime="2020-04-06T11:30:00&#43;00:00" class="op-published">2020-04-06T11:30:00+00:00</time>
                  <time datetime="2020-04-06T11:30:00&#43;00:00" class="op-modified">2020-04-24T09:35:42+00:00</time>
                </header>
                

<p>In this tutorial, I’ll demonstrate how to create your own blog using Hugo and deploy it on Firebase for free. Hugo is an open-source static site generator and Firebase is a Google platform that offers resources and services used to augment web and mobile development. If you’re a developer who does not have a blog yet but is interested in hosting one, this article will help you create one. To follow these steps, you need to know how to use Git and your terminal.</p>

<p>Having your own technical blog can have tons of benefits to your career as a developer. For one, blogging about technical topics makes you learn things you might not have otherwise picked up at your primary developer job. As you research your pieces or try new things, you end up learning a whole host of things like how to work with new technologies and solve edge case problems. In addition to that, you get to practice soft skills like communication and dealing with criticism and feedback when you engage with your reader’s comments.</p>

<p>Additionally, you become more self-assured in your software development skills because you get to write so much code when building sample projects for your blog to illustrate concepts. A technical blog augments your brand as a developer since it gives you a platform to showcase your skills and expertise. This opens you up to all kinds of opportunities like jobs, speaking and conference engagements, book deals, side businesses, relationships with other developers, and so on.</p>

<h4><span class="rh">Recommended Reading</span> on SmashingMag:</h4>

<ul>
<li><a title="Read 'Switching From WordPress To Hugo'" href="https://www.smashingmagazine.com/2019/05/switch-wordpress-hugo/" rel="bookmark">Switching From WordPress To Hugo</a></li>
<li><a title="Read 'How To Create A Headless WordPress Site On The JAMstack'" href="https://www.smashingmagazine.com/2020/02/headless-wordpress-site-jamstack/" rel="bookmark">How To Create A Headless WordPress Site On The JAMstack</a></li>
<li><a title="Read 'Replacing jQuery With Vue.js: No Build Step Necessary'" href="https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/" rel="bookmark">Replacing jQuery With Vue.js: No Build Step Necessary</a></li>
<li><a title="Read 'Creating Authentic Human Connections Within A Remote Team'" href="https://www.smashingmagazine.com/2019/08/creating-authentic-human-connections-remote-team/" rel="bookmark">Creating Authentic Human Connections Within A Remote Team</a></li>
</ul>

<p>Chris Sevilleja, for example, started writing tutorials in 2014 on his blog <a href="https://scotch.io">scotch.io</a> that turned into a business that <a href="https://twitter.com/chrisoncode/status/1206720993089052672">later joined Digital Ocean</a>. Another significant benefit of having a technical blog is that it makes you a better writer which can be an asset in your job when writing software design and technical spec documents. Moreover, it makes you an exceptional teacher and mentor. For example, I often read <a href="https://research.swtch.com/">research.swtch.com</a>, a blog by Russ Cox who blogs about the Go language and also works on the Google Go team that builds it. From it, I’ve learned a ton about how the language works that I might not have picked up from my main job.</p>

<p>Another great blog I also enjoy reading and learning a lot from is <a href="https://welearncode.com/">welearncode.com</a> by Ali Spittel who <a href="https://dev.to/ladybug/why-blogging-is-awesome-127">once wrote that</a> a really great part of blogging is:</p>

<blockquote>“Helping other people learn how to code and making it easier for the people coming after me.”</blockquote>

<p>A fairly easy and painless way to get your blog up and running is to use a third-party platform like Medium where you only have to create an account to get a blog. Although these platforms may suit most blogging needs at the start, they do have some drawbacks in the long run.</p>

<p>Some platforms offer bad user experiences like constantly sending distracting notifications for trivial things, asking for app installs, and so on. If your reader has a bad experience on a platform where your blog is hosted they are less likely to engage with your content. Besides that, tools you may need to enhance your reader’s interaction with and time on your blog may not be supported. Things like RSS feeds, syntax highlighting for code snippets among other things may not be supported on the platform. In a worst-case scenario, the platform where your blog is hosted may close and you may lose all the work you’ve done.</p>

<p>Hosting your own blog and redirecting your users to it increases the chances that they will be more engaged with the posts you put out. You won’t have to compete for your reader’s attention with other writers on a platform since you’ll be the only one on it. Readers are likely to read more of your posts or sign up for your newsletter since they’re more focused on what you&rsquo;re communicating. Another plus that comes with hosting your own blog is the ability to customize it in a myriad of ways to your own tastes, which is usually not possible with third-party platforms.</p>


  <div data-component="FeaturePanel" data-audience="non-subscriber" data-remove="true" class="feature-panel-container hidden"></div>


<h3 id="setting-up-hugo">Setting Up Hugo</h3>

<p>If you’re working on macOS or Linux, the easiest way to install Hugo is to use <a href="https://brew.sh/">Homebrew</a>. All you’ll need to run on your terminal is:</p>

<pre><code class="language-bash">brew install hugo
</code></pre>

<p>If you’re running on windows, Hugo can be installed using either the <a href="https://scoop.sh/">scoop</a> installer or the  <a href="https://chocolatey.org/install">chocolatey</a> package manager. For scoop:</p>

<pre><code class="language-bash">scoop install hugo 
</code></pre>

<p>For chocolatey:</p>

<pre><code class="language-bash">choco install hugo -confirm
</code></pre>

<p>If none of these options apply to you, check out <a href="https://gohugo.io/getting-started/installing/#linux">these options for installation</a>.</p>

<h3 id="setting-up-firebase-tools">Setting Up Firebase Tools</h3>

<p>To install firebase tools, you need to have <a href="https://nodejs.org/en/download/">Node.js</a> installed to get access to <a href="https://www.npmjs.com/">npm</a>. To install Firebase tools, run:</p>

<pre><code class="language-bash">npm install -g firebase-tools
</code></pre>

<p>Create a Firebase account for free at this <a href="https://console.firebase.google.com/">link</a>. You’ll need a Google account for this. Next, login using the Firebase tools. You’ll be redirected to a browser tab where you can log in using your Google account.</p>

<pre><code class="language-bash">firebase login
</code></pre>

<h3 id="create-your-blog">Create Your Blog</h3>

<p>Pick a directory where you’d like your blog’s source code to reside. Change location to that directory on your terminal. Pick a name for your blog. For the purposes of this tutorial, let’s name the blog <code>sm-blog</code>.</p>

<pre><code class="language-bash">hugo new site sm-blog
</code></pre>

<p>It’s advisable to back up your site’s source code in case anything goes wrong. I’m going to use Github for this but you could use any version control service &mdash; if you choose to do the same. I’ll initialize a repository.</p>

<pre><code class="language-bash">cd sm-blog
git init
</code></pre>

<p>Before we can run the site locally and actually view it on the browser, we need to add a theme otherwise all you’ll see is a blank page.</p>

<div class="sponsors__lead-place"></div>




<h3 id="picking-and-installing-a-theme-for-your-blog">Picking And Installing A Theme For Your Blog</h3>

<p>One thing I love about Hugo is the community behind it and all the developers who submit themes for the community to use. There is a vast array of themes to choose from, everything from small business websites, portfolios to blogs. To pick a blog theme, head on over to the <a href="https://themes.gohugo.io/tags/blog/">blog section of themes.gohugo.io.</a> I picked a theme called <a href="https://themes.gohugo.io/hugo-theme-cactus-plus/">Cactus Plus</a> because of its simplicity and minimalism. To install this theme, I’ll need to add it as a submodule of my repository. Many themes instruct its users to use submodules for installs but if this is not the case, just follow the instructions given by the theme maker provided in the description. I’ll add the theme to the <code>/themes</code> folder.</p>

<pre><code class="language-bash">git submodule -b master add https://github.com/nodejh/hugo-theme-cactus-plus.git theme/hugo-theme-cactus-plus
</code></pre>

<p>At the root of the blog folder, there exists a generated file, <em>config.toml</em>. This is where you specify settings for your site. We’ll need to change the theme there. The theme name corresponds to the chosen theme’s folder name in the <code>/themes</code> folder. These are the contents of the <em>config.toml</em> file now. You could also change the title of the blog.</p>

<pre><code class="language-bash">baseURL = "http://example.org/"
languageCode = "en-us"
title = "SM Blog"
theme="hugo-theme-cactus-plus"
</code></pre>

<p>Now we can run the blog. It will look exactly like the theme with the exception of the name change. Once you run the server, head on over to <strong><a href="http://localhost:1313">http://localhost:1313</a></strong> on your browser.</p>

<pre><code class="language-bash">hugo server -D
</code></pre>

<h3 id="personalizing-your-blog">Personalizing Your Blog</h3>

<p>One benefit of deploying your own blog is getting to personalize it to your liking in all kinds of ways. The primary way to do this with Hugo is to change the theme you selected. Many themes provide customization options through the <em>config.toml</em>. The theme creator usually provides a list of options and what they all mean in the description on the theme page. If they don’t, check out the <code>/exampleSite</code> folder of the theme and copy the contents of <em>config.toml</em> within that folder to your <em>config.toml</em> file. For example:</p>

<pre><code class="language-bash">cp themes/hugo-theme-cactus-plus/exampleSite/config.toml .
</code></pre>

<p>Since all themes are different, changes I make here may not apply to your theme but hopefully, you may be able to get an idea of what to do with your blog.</p>

<ol>
<li>I’ll change the avatar image and the favicon of the blog. All static files including images should be added to the <code>/static</code>  folder. I created an <code>/images</code> folder within <code>static</code> and added the images there.</li>
<li>I’ll add Google Analytics so I can track the traffic to my blog.</li>
<li>I’ll enable Disqus so my readers can leave comments on my posts.</li>
<li>I’ll enable RSS.</li>
<li>I’ll put in my social links to Twitter and Github.</li>
<li>I’ll enable the Twitter card.</li>
<li>I’ll enable summaries under the post titles on the home page.</li>
</ol>

<p>So my <em>config.toml</em> will look this:</p>

<div class="break-out">
 <pre><code class="language-toml">### Site settings
baseurl = "your_firebase_address"
languageCode = "en"
title = "SM Blog"
theme = "hugo-theme-cactus-plus"
googleAnalytics = "your_google_analytics_id"

[params]
    # My information
    author = "Cat Lense"
    description = "blog about cats"
    bio = "cat photographer"
    twitter = "cats"
    copyright = "Cat Photographer"

    # Tools 
    enableRSS = true
    enableDisqus = true
    disqusShortname = "your_disqus_short_name"
    enableSummary = true
    enableGoogleAnalytics = true
    enableTwitterCard = true

[social]
    twitter = "https://twitter.com/cats"
    github = "https://github.com/cats"
</code></pre>
</div>

<div class="sponsors__lead-place"></div>




<h3 id="creating-your-first-post">Creating Your First Post</h3>

<p>Hugo posts are written in markdown. So you’ll need to be familiar with it. When creating a post, you’re actually creating a markdown file that Hugo will then render into HTML. Take the title of your post, make it lower case, substitute the spaces with hyphens. That will be the name of your post. Hugo takes the file name, replaces the hyphens with spaces, transforms it to start case, then sets it as the title. I’ll name my file <em>my-first-post.md</em>. To create your first post, run:</p>

<pre><code class="language-bash">hugo new posts/my-first-post.md
</code></pre>

<p>The post is created in the <code>/content</code> folder. These are the contents of the file.</p>

<pre><code class="language-bash">---
title: "My First Post"
date: 2020-03-18T15:59:53+03:00
draft: true
---
</code></pre>

<p>A post contains front matter which is the metadata that describes your post. If you’d like to keep your posts as drafts while you write them, leave <code>draft: true</code>. Once you’re done writing, change <code>draft: false</code> so that the posts can be displayed on the home page. I’ll add a summary line to the front matter to summarize the post on the home page.</p>

<h3 id="adding-resources-to-your-post">Adding Resources To Your Post</h3>

<p>To add resources to your posts like images, videos, audio files, etc. create a folder within the <code>/content/posts</code> folder with the same name as your post excluding the extension.</p>

<p>For example, I’d create this folder:</p>

<pre><code class="language-bash">mkdir content/posts/my-first-post
</code></pre>

<p>Then I’d add all my post resources to that folder and link to the resources just by file name without having to specify a long URL. For example, I’d add an image like this:</p>

<pre><code class="language-bash">![A cute cat](cute-cat.png)
</code></pre>

<h3 id="hosting-your-blog-s-source-code">Hosting Your Blog’s Source Code</h3>

<p>Once you’re done writing your first post, it’s important to back it up before you deploy it. Before that, make sure you have a <em>.gitignore</em> file and add the <code>/public</code> folder to it. The public folder should be ignored because it can be generated again.</p>

<p>Create a repository on Github to host your blog’s source code. Then set the remote repository locally.</p>

<pre><code class="language-bash">git remote add origin [remote repository URL]
</code></pre>

<p>Finally, stage and commit all your changes then push them to the remote repository.</p>

<pre><code class="language-bash">git add *
git commit -m "Add my first post"
git push origin master
</code></pre>

<h3 id="deploying-your-blog-to-firebase">Deploying Your Blog To Firebase</h3>

<p>Before you can deploy your blog to Firebase, you’ll need to create a project on Firebase. Head on over to the <a href="https://console.firebase.google.com/">Firebase Console</a>. Click on Add Project.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Firebase Console home page where the “Create a Project” button resides. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c4f2c62-de2e-4afc-889b-316bae3892fe/hugo-1-firebase-project-creation.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Input the name of your project.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      First page of “Create a project” flow on Firebase Console. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1eb3572a-f416-4c45-9acf-d770f055303b/hugo-2-firebase-project-creation.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Enable Google Analytics if you want to use it in your blog.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Second page of “Create a project” flow on Firebase Console. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773bbde5-7097-46dc-9400-473e4fb2fb58/hugo-3-firebase-project-creation.png'>Large preview</a>)
    </figcaption>
  
</figure>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Third page of “Create a project” flow on Firebase Console. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b645d43-cadf-4ffd-869d-bf739a72e770/hugo-4-firebase-project-creation.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Once you’re done creating the project, go back to your blog’s root and initialize a Firebase project in the blog.</p>

<pre><code class="language-bash">firebase init
</code></pre>

<p>You’ll be prompted to enter some information when this command runs.</p>

<table class="tablesaw break-out" data-tablesaw-mode="swipe" data-tablesaw-minimap>
    <thead>
        <tr>
            <th data-tablesaw-priority="persist">Prompts</th>
            <th>Answer</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Which Firebase CLI features do you want to set up for this folder?</td>
            <td>Hosting: Configure and deploy Firebase Hosting sites</td>
        </tr>
        <tr>
            <td>Project Setup Options</td>
            <td>Use an existing project</td>
        </tr>
        <tr>
            <td>What do you want to use as your public directory?</td>
            <td>public</td>
        </tr>
        <tr>
            <td>Configure as a single-page app (rewrite all urls to <em>/index.html</em>)?</td>
            <td>N</td>
        </tr>
    </tbody>
</table>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      First prompt of the <code>firebase init</code> command requesting a feature selection. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f520d7f-3e1a-48c4-a51f-a50b040e06b4/hugo-1-firebase-init.png'>Large preview</a>)
    </figcaption>
  
</figure>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Second prompt of the <code>firebase init</code> command requesting a project selection. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a83efd2e-dba9-4ab7-86a2-228f981328ad/hugo-2-firebase-init.png'>Large preview</a>)
    </figcaption>
  
</figure>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Third and fourth prompts of the <code>firebase init</code> command requesting a deployment folder and inquiring whether to configure the project as a single-page app. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca3a55d6-def3-4f4c-95ab-683e2ac89a5f/hugo-3-firebase-init.png'>Large preview</a>)
    </figcaption>
  
</figure>

<p>Next, we’ll build the blog. A <code>/public</code> folder will be created and it will contain your generated blog.</p>

<pre><code class="language-bash">hugo
</code></pre>

<p>After this, all we have to do is deploy the blog.</p>

<pre><code class="language-bash">firebase deploy
</code></pre>

<p>Now the blog is deployed. Check it out at the hosting URL provided in the output.</p>











<figure class="
  
    break-out article__image
  
  
  ">
  
    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png">
    
    <img
			srcset="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png 400w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png 800w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png 1200w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png 1600w,
			        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png 2000w"
			src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png"
			sizes="100vw"
			alt=""
		/>
    
    </a>
  

  
    <figcaption class="op-vertical-bottom">
      Output from running the <code>firebase deploy</code> command. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/875dc148-2e4c-4e8d-8d95-557ddbefa94b/hugo-firebase-deployment.png'>Large preview</a>)
    </figcaption>
  
</figure>

<h3 id="next-steps">Next Steps</h3>

<p>The only drawback of hosting on Firebase is the URL it uses for your hosted project. It can be unsightly and difficult to remember. So I’d advise that you buy a domain and set it up for your blog.</p>

<p>Third-party platforms are not all bad. They have tons of readers who may be interested in your writing but haven’t come across your blog yet. You could cross-post to those sites to put your work in front of a large audience but don’t forget to link back to your own blog. Add the link to your article on your blog to whichever platform you are posting to as a canonical URL so that it is not viewed as duplicate content by a search engine and hurts the SEO of your site. Sites like <a href="https://medium.com">Medium</a>, <a href="https://dev.to">dev.to</a>, and <a href="https://hashnode.com">Hashnode</a> support canonical URLs.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Writing on your own technical blog can have immense benefits to your career as a software developer and help you cultivate your skills and expertise. It’s my hope that this tutorial has started you on that journey or at least encouraged you to make your own blog.</p>

<div class="signature">
  <img src="https://www.smashingmagazine.com/images/logo/logo--red.png" alt="Smashing Editorial">
  <span>(ra, il)</span>
</div>


              </article>
            </body>
          </html>
        ]]></content:encoded></item></channel></rss>